<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/Any.hx" private="1" module="Any"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Array" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/_std/Array.hx" extern="1">
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<exec public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Null"><c path="js.lib.RegExpMatch"/></x>
</f></exec>
		<test public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Bool"/>
</f></test>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="pattern:?flags">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).</haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/EnumValue.hx" private="1" module="EnumValue"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Math" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/_std/Math.hx" extern="1"><meta>
	<m n=":keep"/>
	<m n=":keepInit"/>
</meta></class>
	<class path="js.Syntax" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```</haxe_doc>
		</code>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<x path="haxe.extern.Rest"><d/></x>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="String" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/_std/Std.hx">
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="Vscode" params="" file="src/Vscode.hx" extern="1">
		<version public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc>* The version of the editor.</haxe_doc>
		</version>
		<env public="1" set="null" static="1">
			<c path="VscodeEnv"/>
			<haxe_doc>* Namespace describing the environment the editor runs in.</haxe_doc>
		</env>
		<commands public="1" set="null" static="1">
			<c path="VscodeCommands"/>
			<haxe_doc><![CDATA[* Namespace for dealing with commands. In short, a command is a function with a
	 * unique identifier. The function is sometimes also called _command handler_.
	 *
	 * Commands can be added to the editor using the [registerCommand](#commands.registerCommand)
	 * and [registerTextEditorCommand](#commands.registerTextEditorCommand) functions. Commands
	 * can be executed [manually](#commands.executeCommand) or from a UI gesture. Those are:
	 *
	 * * palette - Use the `commands`-section in `package.json` to make a command show in
	 * the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette).
	 * * keybinding - Use the `keybindings`-section in `package.json` to enable
	 * [keybindings](https://code.visualstudio.com/docs/getstarted/keybindings#_customizing-shortcuts)
	 * for your extension.
	 *
	 * Commands from other extensions and from the editor itself are accessible to an extension. However,
	 * when invoking an editor command not all argument types are supported.
	 *
	 * This is a sample that registers a command handler and adds an entry for that command to the palette. First
	 * register a command handler with the identifier `extension.sayHello`.
	 * ```javascript
	 * commands.registerCommand('extension.sayHello', () => {
	 * 	window.showInformationMessage('Hello World!');
	 * });
	 * ```
	 * Second, bind the command identifier to a title under which it will show in the palette (`package.json`).
	 * ```json
	 * {
	 * 	"contributes": {
	 * 		"commands": [{
	 * 			"command": "extension.sayHello",
	 * 			"title": "Hello World"
	 * 		}]
	 * 	}
	 * }
	 * ```]]></haxe_doc>
		</commands>
		<window public="1" set="null" static="1">
			<c path="VscodeWindow"/>
			<haxe_doc>* Namespace for dealing with the current window of the editor. That is visible
	 * and active editors, as well as, UI elements to show messages, selections, and
	 * asking for user input.</haxe_doc>
		</window>
		<workspace public="1" set="null" static="1">
			<c path="VscodeWorkspace"/>
			<haxe_doc>* Namespace for dealing with the current workspace. A workspace is the collection of one
	 * or more folders that are opened in a VS Code window (instance).
	 *
	 * It is also possible to open VS Code without a workspace. For example, when you open a
	 * new VS Code window by selecting a file from your platform's File menu, you will not be
	 * inside a workspace. In this mode, some of VS Code's capabilities are reduced but you can
	 * still open text files and edit them.
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information on
	 * the concept of workspaces in VS Code.
	 *
	 * The workspace offers support for [listening](#workspace.createFileSystemWatcher) to fs
	 * events and for [finding](#workspace.findFiles) files. Both perform well and run _outside_
	 * the editor-process so that they should be always used instead of nodejs-equivalents.</haxe_doc>
		</workspace>
		<languages public="1" set="null" static="1">
			<c path="VscodeLanguages"/>
			<haxe_doc><![CDATA[* Namespace for participating in language-specific editor [features](https://code.visualstudio.com/docs/editor/editingevolved),
	 * like IntelliSense, code actions, diagnostics etc.
	 *
	 * Many programming languages exist and there is huge variety in syntaxes, semantics, and paradigms. Despite that, features
	 * like automatic word-completion, code navigation, or code checking have become popular across different tools for different
	 * programming languages.
	 *
	 * The editor provides an API that makes it simple to provide such common features by having all UI and actions already in place and
	 * by allowing you to participate by providing data only. For instance, to contribute a hover all you have to do is provide a function
	 * that can be called with a [TextDocument](#TextDocument) and a [Position](#Position) returning hover info. The rest, like tracking the
	 * mouse, positioning the hover, keeping the hover stable etc. is taken care of by the editor.
	 *
	 * ```javascript
	 * languages.registerHoverProvider('javascript', {
	 * 	provideHover(document, position, token) {
	 * 		return new Hover('I am a hover!');
	 * 	}
	 * });
	 * ```
	 *
	 * Registration is done using a [document selector](#DocumentSelector) which is either a language id, like `javascript` or
	 * a more complex [filter](#DocumentFilter) like `{ language: 'typescript', scheme: 'file' }`. Matching a document against such
	 * a selector will result in a [score](#languages.match) that is used to determine if and how a provider shall be used. When
	 * scores are equal the provider that came last wins. For features that allow full arity, like [hover](#languages.registerHoverProvider),
	 * the score is only checked to be `>0`, for other features, like [IntelliSense](#languages.registerCompletionItemProvider) the
	 * score is used for determining the order in which providers are asked to participate.]]></haxe_doc>
		</languages>
		<scm public="1" set="null" static="1"><c path="VscodeScm"/></scm>
		<debug public="1" set="null" static="1">
			<c path="VscodeDebug"/>
			<haxe_doc>* Namespace for debug functionality.</haxe_doc>
		</debug>
		<extensions public="1" set="null" static="1">
			<c path="VscodeExtensions"/>
			<haxe_doc>* Namespace for dealing with installed extensions. Extensions are represented
	 * by an [extension](#Extension)-interface which enables reflection on them.
	 *
	 * Extension writers can provide APIs to other extensions by returning their API public
	 * surface from the `activate`-call.
	 *
	 * ```javascript
	 * export function activate(context: vscode.ExtensionContext) {
	 * 	let api = {
	 * 		sum(a, b) {
	 * 			return a + b;
	 * 		},
	 * 		mul(a, b) {
	 * 			return a * b;
	 * 		}
	 * 	};
	 * 	// 'export' public api-surface
	 * 	return api;
	 * }
	 * ```
	 *
	 * When depending on the API of another extension add an `extensionDependencies`-entry
	 * to `package.json`, and use the [getExtension](#extensions.getExtension)-function
	 * and the [exports](#Extension.exports)-property, like below:
	 *
	 * ```javascript
	 * let mathExt = extensions.getExtension('genius.math');
	 * let importedApi = mathExt.exports;
	 *
	 * console.log(importedApi.mul(42, 1));
	 * ```</haxe_doc>
		</extensions>
		<tasks public="1" set="null" static="1">
			<c path="VscodeTasks"/>
			<haxe_doc>* Namespace for tasks functionality.</haxe_doc>
		</tasks>
		<comments public="1" set="null" static="1"><c path="VscodeComments"/></comments>
		<authentication public="1" set="null" static="1">
			<c path="VscodeAuthentication"/>
			<haxe_doc>* Namespace for authentication.</haxe_doc>
		</authentication>
		<meta><m n=":jsRequire"><e>"vscode"</e></m></meta>
	</class>
	<class path="VscodeEnv" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<appName public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The application name of the editor, like 'VS Code'.</haxe_doc>
		</appName>
		<appRoot public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The application root folder from which the editor is running.
	 *
	 * *Note* that the value is the empty string when running in an
	 * environment that has no representation of an application root folder.</haxe_doc>
		</appRoot>
		<uriScheme public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The custom uri scheme the editor registers to in the operating system.</haxe_doc>
		</uriScheme>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Represents the preferred user-language, like `de-CH`, `fr`, or `en-US`.</haxe_doc>
		</language>
		<clipboard public="1" set="null">
			<t path="vscode.Clipboard"/>
			<haxe_doc>* The system clipboard.</haxe_doc>
		</clipboard>
		<machineId public="1" set="null">
			<c path="String"/>
			<haxe_doc>* A unique identifier for the computer.</haxe_doc>
		</machineId>
		<sessionId public="1" set="null">
			<c path="String"/>
			<haxe_doc>* A unique identifier for the current session.
	 * Changes each time the editor is started.</haxe_doc>
		</sessionId>
		<isNewAppInstall public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Indicates that this is a fresh install of the application.
	 * `true` if within the first day of installation otherwise `false`.</haxe_doc>
		</isNewAppInstall>
		<isTelemetryEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Indicates whether the users has telemetry enabled.
	 * Can be observed to determine if the extension should send telemetry.</haxe_doc>
		</isTelemetryEnabled>
		<onDidChangeTelemetryEnabled public="1">
			<t path="vscode.Event"><x path="Bool"/></t>
			<haxe_doc>* An [event](#Event) which fires when the user enabled or disables telemetry.
	 * `true` if the user has enabled telemetry or `false` if the user has disabled telemetry.</haxe_doc>
		</onDidChangeTelemetryEnabled>
		<remoteName public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The name of a remote. Defined by extensions, popular samples are `wsl` for the Windows
	 * Subsystem for Linux or `ssh-remote` for remotes using a secure shell.
	 *
	 * *Note* that the value is `undefined` when there is no remote extension host but that the
	 * value is defined in all extension hosts (local and remote) in case a remote extension host
	 * exists. Use [`Extension#extensionKind`](#Extension.extensionKind) to know if
	 * a specific extension runs remote or not.</haxe_doc>
		</remoteName>
		<shell public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The detected default shell for the extension host, this is overridden by the
	 * `terminal.integrated.shell` setting for the extension host's platform. Note that in
	 * environments that do not support a shell the value is the empty string.</haxe_doc>
		</shell>
		<uiKind public="1" set="null">
			<x path="vscode.UIKind"/>
			<haxe_doc>* The UI kind property indicates from which UI extensions
	 * are accessed from. For example, extensions could be accessed
	 * from a desktop application or a web browser.</haxe_doc>
		</uiKind>
		<openExternal public="1" set="method">
			<f a="target">
				<c path="vscode.Uri"/>
				<x path="js.lib.Thenable"><x path="Bool"/></x>
			</f>
			<haxe_doc>* Opens a link externally using the default application. Depending on the
	 * used scheme this can be:
	 * * a browser (`http:`, `https:`)
	 * * a mail client (`mailto:`)
	 * * VSCode itself (`vscode:` from `vscode.env.uriScheme`)
	 *
	 * *Note* that [`showTextDocument`](#window.showTextDocument) is the right
	 * way to open a text document inside the editor, not this function.
	 *
	 * @param target The uri that should be opened.
	 * @returns A promise indicating if open was successful.</haxe_doc>
		</openExternal>
		<asExternalUri public="1" set="method">
			<f a="target">
				<c path="vscode.Uri"/>
				<x path="js.lib.Thenable"><c path="vscode.Uri"/></x>
			</f>
			<haxe_doc><![CDATA[* Resolves a uri to form that is accessible externally. Currently only supports `https:`, `http:` and
	 * `vscode.env.uriScheme` uris.
	 *
	 * #### `http:` or `https:` scheme
	 *
	 * Resolves an *external* uri, such as a `http:` or `https:` link, from where the extension is running to a
	 * uri to the same resource on the client machine.
	 *
	 * This is a no-op if the extension is running on the client machine.
	 *
	 * If the extension is running remotely, this function automatically establishes a port forwarding tunnel
	 * from the local machine to `target` on the remote and returns a local uri to the tunnel. The lifetime of
	 * the port forwarding tunnel is managed by VS Code and the tunnel can be closed by the user.
	 *
	 * *Note* that uris passed through `openExternal` are automatically resolved and you should not call `asExternalUri` on them.
	 *
	 * #### `vscode.env.uriScheme`
	 *
	 * Creates a uri that - if opened in a browser (e.g. via `openExternal`) - will result in a registered [UriHandler](#UriHandler)
	 * to trigger.
	 *
	 * Extensions should not make any assumptions about the resulting uri and should not alter it in anyway.
	 * Rather, extensions can e.g. use this uri in an authentication flow, by adding the uri as callback query
	 * argument to the server to authenticate to.
	 *
	 * *Note* that if the server decides to add additional query parameters to the uri (e.g. a token or secret), it
	 * will appear in the uri that is passed to the [UriHandler](#UriHandler).
	 *
	 * **Example** of an authentication flow:
	 * ```typescript
	 * vscode.window.registerUriHandler({
	 *   handleUri(uri: vscode.Uri): vscode.ProviderResult<void> {
	 *     if (uri.path === '/did-authenticate') {
	 *       console.log(uri.toString());
	 *     }
	 *   }
	 * });
	 *
	 * const callableUri = await vscode.env.asExternalUri(vscode.Uri.parse(`${vscode.env.uriScheme}://my.extension/did-authenticate`));
	 * await vscode.env.openExternal(callableUri);
	 * ```
	 *
	 * *Note* that extensions should not cache the result of `asExternalUri` as the resolved uri may become invalid due to
	 * a system or user action — for example, in remote cases, a user may close a port forwarding tunnel that was opened by
	 * `asExternalUri`.
	 *
	 * @return A uri that can be used on the client machine.]]></haxe_doc>
		</asExternalUri>
	</class>
	<class path="VscodeCommands" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<registerCommand public="1" set="method">
			<f a="command:callback:?thisArg">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="Any"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a command that can be invoked via a keyboard shortcut,
	 * a menu item, an action, or directly.
	 *
	 * Registering a command with an existing command identifier twice
	 * will cause an error.
	 *
	 * @param command A unique identifier for the command.
	 * @param callback A command handler function.
	 * @param thisArg The `this` context used when invoking the handler function.
	 * @return Disposable which unregisters this command on disposal.</haxe_doc>
		</registerCommand>
		<registerTextEditorCommand public="1" set="method">
			<f a="command:callback:?thisArg">
				<c path="String"/>
				<f a=":">
					<t path="vscode.TextEditor"/>
					<t path="vscode.TextEditorEdit"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a text editor command that can be invoked via a keyboard shortcut,
	 * a menu item, an action, or directly.
	 *
	 * Text editor commands are different from ordinary [commands](#commands.registerCommand) as
	 * they only execute when there is an active editor when the command is called. Also, the
	 * command handler of an editor command has access to the active editor and to an
	 * [edit](#TextEditorEdit)-builder. Note that the edit-builder is only valid while the
	 * callback executes.
	 *
	 * @param command A unique identifier for the command.
	 * @param callback A command handler function with access to an [editor](#TextEditor) and an [edit](#TextEditorEdit).
	 * @param thisArg The `this` context used when invoking the handler function.
	 * @return Disposable which unregisters this command on disposal.</haxe_doc>
		</registerTextEditorCommand>
		<executeCommand public="1" params="T" set="method">
			<f a="command:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><x path="Any"/></x>
				<x path="js.lib.Thenable"><x path="Null"><c path="executeCommand.T"/></x></x>
			</f>
			<haxe_doc>* Executes the command denoted by the given command identifier.
	 *
	 * * *Note 1:* When executing an editor command not all types are allowed to
	 * be passed as arguments. Allowed are the primitive types `string`, `boolean`,
	 * `number`, `undefined`, and `null`, as well as [`Position`](#Position), [`Range`](#Range), [`Uri`](#Uri) and [`Location`](#Location).
	 * * *Note 2:* There are no restrictions when executing commands that have been contributed
	 * by extensions.
	 *
	 * @param command Identifier of the command to execute.
	 * @param rest Parameters passed to the command function.
	 * @return A thenable that resolves to the returned value of the given command. `undefined` when
	 * the command handler function doesn't return anything.</haxe_doc>
		</executeCommand>
		<getCommands public="1" set="method">
			<f a="?filterInternal">
				<x path="Bool"/>
				<x path="js.lib.Thenable"><c path="Array"><c path="String"/></c></x>
			</f>
			<haxe_doc>* Retrieve the list of all available commands. Commands starting with an underscore are
	 * treated as internal commands.
	 *
	 * @param filterInternal Set `true` to not see internal commands (starting with an underscore)
	 * @return Thenable that resolves to a list of command ids.</haxe_doc>
		</getCommands>
	</class>
	<class path="VscodeWindow" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<activeTextEditor public="1">
			<x path="Null"><t path="vscode.TextEditor"/></x>
			<haxe_doc>* The currently active editor or `undefined`. The active editor is the one
	 * that currently has focus or, when none has focus, the one that has changed
	 * input most recently.</haxe_doc>
		</activeTextEditor>
		<visibleTextEditors public="1">
			<c path="Array"><t path="vscode.TextEditor"/></c>
			<haxe_doc>* The currently visible editors or an empty array.</haxe_doc>
		</visibleTextEditors>
		<onDidChangeActiveTextEditor public="1" set="null">
			<t path="vscode.Event"><x path="Null"><t path="vscode.TextEditor"/></x></t>
			<haxe_doc>* An [event](#Event) which fires when the [active editor](#window.activeTextEditor)
	 * has changed. *Note* that the event also fires when the active editor changes
	 * to `undefined`.</haxe_doc>
		</onDidChangeActiveTextEditor>
		<onDidChangeVisibleTextEditors public="1" set="null">
			<t path="vscode.Event"><c path="Array"><t path="vscode.TextEditor"/></c></t>
			<haxe_doc>* An [event](#Event) which fires when the array of [visible editors](#window.visibleTextEditors)
	 * has changed.</haxe_doc>
		</onDidChangeVisibleTextEditors>
		<onDidChangeTextEditorSelection public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextEditorSelectionChangeEvent"/></t>
			<haxe_doc>* An [event](#Event) which fires when the selection in an editor has changed.</haxe_doc>
		</onDidChangeTextEditorSelection>
		<onDidChangeTextEditorVisibleRanges public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextEditorVisibleRangesChangeEvent"/></t>
			<haxe_doc>* An [event](#Event) which fires when the visible ranges of an editor has changed.</haxe_doc>
		</onDidChangeTextEditorVisibleRanges>
		<onDidChangeTextEditorOptions public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextEditorOptionsChangeEvent"/></t>
			<haxe_doc>* An [event](#Event) which fires when the options of an editor have changed.</haxe_doc>
		</onDidChangeTextEditorOptions>
		<onDidChangeTextEditorViewColumn public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextEditorViewColumnChangeEvent"/></t>
			<haxe_doc>* An [event](#Event) which fires when the view column of an editor has changed.</haxe_doc>
		</onDidChangeTextEditorViewColumn>
		<terminals public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Terminal"/></x>
			<haxe_doc>* The currently opened terminals or an empty array.</haxe_doc>
		</terminals>
		<activeTerminal public="1" set="null">
			<x path="Null"><t path="vscode.Terminal"/></x>
			<haxe_doc>* The currently active terminal or `undefined`. The active terminal is the one that
	 * currently has focus or most recently had focus.</haxe_doc>
		</activeTerminal>
		<onDidChangeActiveTerminal public="1" set="null">
			<x path="Null"><t path="vscode.Event"><t path="vscode.Terminal"/></t></x>
			<haxe_doc>* An [event](#Event) which fires when the [active terminal](#window.activeTerminal)
	 * has changed. *Note* that the event also fires when the active terminal changes
	 * to `undefined`.</haxe_doc>
		</onDidChangeActiveTerminal>
		<onDidOpenTerminal public="1" set="null">
			<t path="vscode.Event"><t path="vscode.Terminal"/></t>
			<haxe_doc>* An [event](#Event) which fires when a terminal has been created, either through the
	 * [createTerminal](#window.createTerminal) API or commands.</haxe_doc>
		</onDidOpenTerminal>
		<onDidCloseTerminal public="1" set="null">
			<t path="vscode.Event"><t path="vscode.Terminal"/></t>
			<haxe_doc>* An [event](#Event) which fires when a terminal is disposed.</haxe_doc>
		</onDidCloseTerminal>
		<state public="1" set="null">
			<t path="vscode.WindowState"/>
			<haxe_doc>* Represents the current window's state.</haxe_doc>
		</state>
		<onDidChangeWindowState public="1" set="null">
			<t path="vscode.Event"><t path="vscode.WindowState"/></t>
			<haxe_doc>* An [event](#Event) which fires when the focus state of the current window
	 * changes. The value of the event represents whether the window is focused.</haxe_doc>
		</onDidChangeWindowState>
		<showTextDocument public="1" set="method">
			<f a="document:?column:?preserveFocus">
				<t path="vscode.TextDocument"/>
				<x path="vscode.ViewColumn"/>
				<x path="Bool"/>
				<x path="js.lib.Thenable"><t path="vscode.TextEditor"/></x>
			</f>
			<haxe_doc>* Show the given document in a text editor. A [column](#ViewColumn) can be provided
	 * to control where the editor is being shown. Might change the [active editor](#window.activeTextEditor).
	 *
	 * @param document A text document to be shown.
	 * @param column A view column in which the [editor](#TextEditor) should be shown. The default is the [active](#ViewColumn.Active), other values
	 * are adjusted to be `Min(column, columnCount + 1)`, the [active](#ViewColumn.Active)-column is not adjusted. Use [`ViewColumn.Beside`](#ViewColumn.Beside)
	 * to open the editor to the side of the currently active one.
	 * @param preserveFocus When `true` the editor will not take focus.
	 * @return A promise that resolves to an [editor](#TextEditor).</haxe_doc>
			<overloads>
				<showTextDocument public="1" set="method">
					<f a="uri:?options">
						<c path="vscode.Uri"/>
						<t path="vscode.TextDocumentShowOptions"/>
						<x path="js.lib.Thenable"><t path="vscode.TextEditor"/></x>
					</f>
					<haxe_doc>* Show the given document in a text editor. A [column](#ViewColumn) can be provided
	 * to control where the editor is being shown. Might change the [active editor](#window.activeTextEditor).
	 *
	 * @param document A text document to be shown.
	 * @param column A view column in which the [editor](#TextEditor) should be shown. The default is the [active](#ViewColumn.Active), other values
	 * are adjusted to be `Min(column, columnCount + 1)`, the [active](#ViewColumn.Active)-column is not adjusted. Use [`ViewColumn.Beside`](#ViewColumn.Beside)
	 * to open the editor to the side of the currently active one.
	 * @param preserveFocus When `true` the editor will not take focus.
	 * @return A promise that resolves to an [editor](#TextEditor).</haxe_doc>
				</showTextDocument>
				<showTextDocument public="1" set="method">
					<f a="document:?options">
						<t path="vscode.TextDocument"/>
						<t path="vscode.TextDocumentShowOptions"/>
						<x path="js.lib.Thenable"><t path="vscode.TextEditor"/></x>
					</f>
					<haxe_doc>* Show the given document in a text editor. A [column](#ViewColumn) can be provided
	 * to control where the editor is being shown. Might change the [active editor](#window.activeTextEditor).
	 *
	 * @param document A text document to be shown.
	 * @param column A view column in which the [editor](#TextEditor) should be shown. The default is the [active](#ViewColumn.Active), other values
	 * are adjusted to be `Min(column, columnCount + 1)`, the [active](#ViewColumn.Active)-column is not adjusted. Use [`ViewColumn.Beside`](#ViewColumn.Beside)
	 * to open the editor to the side of the currently active one.
	 * @param preserveFocus When `true` the editor will not take focus.
	 * @return A promise that resolves to an [editor](#TextEditor).</haxe_doc>
				</showTextDocument>
			</overloads>
		</showTextDocument>
		<createTextEditorDecorationType public="1" set="method">
			<f a="options">
				<t path="vscode.DecorationRenderOptions"/>
				<t path="vscode.TextEditorDecorationType"/>
			</f>
			<haxe_doc>* Create a TextEditorDecorationType that can be used to add decorations to text editors.
	 *
	 * @param options Rendering options for the decoration type.
	 * @return A new decoration type instance.</haxe_doc>
		</createTextEditorDecorationType>
		<showInformationMessage public="1" set="method">
			<f a="message:options:items">
				<c path="String"/>
				<t path="vscode.MessageOptions"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
			</f>
			<haxe_doc>* Show an information message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @param options Configures the behaviour of the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
			<overloads>
				<showInformationMessage public="1" params="T" set="method">
					<f a="message:items">
						<c path="String"/>
						<x path="haxe.extern.Rest"><c path="showInformationMessage.T"/></x>
						<x path="js.lib.Thenable"><x path="Null"><c path="showInformationMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show an information message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @param options Configures the behaviour of the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showInformationMessage>
				<showInformationMessage public="1" params="T" set="method">
					<f a="message:options:items">
						<c path="String"/>
						<t path="vscode.MessageOptions"/>
						<x path="haxe.extern.Rest"><c path="showInformationMessage.T"/></x>
						<x path="js.lib.Thenable"><x path="Null"><c path="showInformationMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show an information message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @param options Configures the behaviour of the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showInformationMessage>
				<showInformationMessage public="1" set="method">
					<f a="message:items">
						<c path="String"/>
						<x path="haxe.extern.Rest"><c path="String"/></x>
						<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
					</f>
					<haxe_doc>* Show an information message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @param options Configures the behaviour of the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showInformationMessage>
			</overloads>
		</showInformationMessage>
		<showWarningMessage public="1" set="method">
			<f a="message:options:items">
				<c path="String"/>
				<t path="vscode.MessageOptions"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
			</f>
			<haxe_doc>* Show a warning message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
			<overloads>
				<showWarningMessage public="1" params="T" set="method">
					<f a="message:items">
						<c path="String"/>
						<x path="haxe.extern.Rest"><c path="showWarningMessage.T"/></x>
						<x path="js.lib.Thenable"><x path="Null"><c path="showWarningMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show a warning message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showWarningMessage>
				<showWarningMessage public="1" params="T" set="method">
					<f a="message:options:items">
						<c path="String"/>
						<t path="vscode.MessageOptions"/>
						<x path="haxe.extern.Rest"><c path="showWarningMessage.T"/></x>
						<x path="js.lib.Thenable"><x path="Null"><c path="showWarningMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show a warning message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showWarningMessage>
				<showWarningMessage public="1" set="method">
					<f a="message:items">
						<c path="String"/>
						<x path="haxe.extern.Rest"><c path="String"/></x>
						<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
					</f>
					<haxe_doc>* Show a warning message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showWarningMessage>
			</overloads>
		</showWarningMessage>
		<showErrorMessage public="1" set="method">
			<f a="message:options:items">
				<c path="String"/>
				<t path="vscode.MessageOptions"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
			</f>
			<haxe_doc>* Show an error message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
			<overloads>
				<showErrorMessage public="1" params="T" set="method">
					<f a="message:items">
						<c path="String"/>
						<x path="haxe.extern.Rest"><c path="showErrorMessage.T"/></x>
						<x path="js.lib.Thenable"><x path="Null"><c path="showErrorMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show an error message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showErrorMessage>
				<showErrorMessage public="1" params="T" set="method">
					<f a="message:options:items">
						<c path="String"/>
						<t path="vscode.MessageOptions"/>
						<x path="haxe.extern.Rest"><c path="showErrorMessage.T"/></x>
						<x path="js.lib.Thenable"><x path="Null"><c path="showErrorMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show an error message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showErrorMessage>
				<showErrorMessage public="1" set="method">
					<f a="message:items">
						<c path="String"/>
						<x path="haxe.extern.Rest"><c path="String"/></x>
						<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
					</f>
					<haxe_doc>* Show an error message.
	 *
	 * @see [showInformationMessage](#window.showInformationMessage)
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @return A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showErrorMessage>
			</overloads>
		</showErrorMessage>
		<showQuickPick public="1" params="T" set="method">
			<f a="items:?options:?token">
				<x path="haxe.extern.EitherType">
					<c path="Array"><c path="showQuickPick.T"/></c>
					<x path="js.lib.Thenable"><c path="Array"><c path="showQuickPick.T"/></c></x>
				</x>
				<t path="vscode.QuickPickOptions"/>
				<t path="vscode.CancellationToken"/>
				<x path="js.lib.Thenable"><x path="Null"><c path="showQuickPick.T"/></x></x>
			</f>
			<haxe_doc>* Shows a selection list.
	 *
	 * @param items An array of strings, or a promise that resolves to an array of strings.
	 * @param options Configures the behavior of the selection list.
	 * @param token A token that can be used to signal cancellation.
	 * @return A promise that resolves to the selection or `undefined`.</haxe_doc>
			<overloads><showQuickPick public="1" set="method">
	<f a="items:?options:?token">
		<x path="haxe.extern.EitherType">
			<c path="Array"><c path="String"/></c>
			<x path="js.lib.Thenable"><c path="Array"><c path="String"/></c></x>
		</x>
		<t path="vscode.QuickPickOptions"/>
		<t path="vscode.CancellationToken"/>
		<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
	</f>
	<haxe_doc>* Shows a selection list.
	 *
	 * @param items An array of strings, or a promise that resolves to an array of strings.
	 * @param options Configures the behavior of the selection list.
	 * @param token A token that can be used to signal cancellation.
	 * @return A promise that resolves to the selection or `undefined`.</haxe_doc>
</showQuickPick></overloads>
		</showQuickPick>
		<showQuickPickMany public="1" params="T" get="inline" set="null" line="566">
			<f a="items:?options:?token">
				<x path="haxe.extern.EitherType">
					<c path="Array"><c path="showQuickPickMany.T"/></c>
					<x path="js.lib.Thenable"><c path="Array"><c path="showQuickPickMany.T"/></c></x>
				</x>
				<t path="vscode.QuickPickOptions"/>
				<t path="vscode.CancellationToken"/>
				<x path="js.lib.Thenable"><x path="Null"><c path="Array"><c path="showQuickPickMany.T"/></c></x></x>
			</f>
			<haxe_doc>* Shows a selection list allowing multiple selections.
	 *
	 * @param items An array of items, or a promise that resolves to an array of items.
	 * @param options Configures the behavior of the selection list.
	 * @param token A token that can be used to signal cancellation.
	 * @return A promise that resolves to the selected items or `undefined`.</haxe_doc>
		</showQuickPickMany>
		<showWorkspaceFolderPick public="1" set="method">
			<f a="?options">
				<t path="vscode.WorkspaceFolderPickOptions"/>
				<x path="js.lib.Thenable"><x path="Null"><t path="vscode.WorkspaceFolder"/></x></x>
			</f>
			<haxe_doc>* Shows a selection list of [workspace folders](#workspace.workspaceFolders) to pick from.
	 * Returns `undefined` if no folder is open.
	 *
	 * @param options Configures the behavior of the workspace folder list.
	 * @return A promise that resolves to the workspace folder or `undefined`.</haxe_doc>
		</showWorkspaceFolderPick>
		<showOpenDialog public="1" set="method">
			<f a="?options">
				<t path="vscode.OpenDialogOptions"/>
				<x path="js.lib.Thenable"><x path="Null"><c path="Array"><c path="vscode.Uri"/></c></x></x>
			</f>
			<haxe_doc>* Shows a file open dialog to the user which allows to select a file
	 * for opening-purposes.
	 *
	 * @param options Options that control the dialog.
	 * @returns A promise that resolves to the selected resources or `undefined`.</haxe_doc>
		</showOpenDialog>
		<showSaveDialog public="1" set="method">
			<f a="?options">
				<t path="vscode.SaveDialogOptions"/>
				<x path="js.lib.Thenable"><x path="Null"><c path="vscode.Uri"/></x></x>
			</f>
			<haxe_doc>* Shows a file save dialog to the user which allows to select a file
	 * for saving-purposes.
	 *
	 * @param options Options that control the dialog.
	 * @returns A promise that resolves to the selected resource or `undefined`.</haxe_doc>
		</showSaveDialog>
		<showInputBox public="1" set="method">
			<f a="?options:?token">
				<t path="vscode.InputBoxOptions"/>
				<t path="vscode.CancellationToken"/>
				<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
			</f>
			<haxe_doc>* Opens an input box to ask the user for input.
	 *
	 * The returned value will be undefined if the input box was canceled (e.g. pressing ESC). Otherwise the
	 * returned value will be the string typed by the user or an empty string if the user did not type
	 * anything but dismissed the input box with OK.
	 *
	 * @param options Configures the behavior of the input box.
	 * @param token A token that can be used to signal cancellation.
	 * @return A promise that resolves to a string the user provided or to `undefined` in case of dismissal.</haxe_doc>
		</showInputBox>
		<createQuickPick public="1" params="T" set="method">
			<f a=""><t path="vscode.QuickPick"><c path="createQuickPick.T"/></t></f>
			<haxe_doc>* Creates a [QuickPick](#QuickPick) to let the user pick an item from a list
	 * of items of type T.
	 *
	 * Note that in many cases the more convenient [window.showQuickPick](#window.showQuickPick)
	 * is easier to use. [window.createQuickPick](#window.createQuickPick) should be used
	 * when [window.showQuickPick](#window.showQuickPick) does not offer the required flexibility.
	 *
	 * @return A new [QuickPick](#QuickPick).</haxe_doc>
		</createQuickPick>
		<createInputBox public="1" set="method">
			<f a=""><t path="vscode.InputBox"/></f>
			<haxe_doc>* Creates a [InputBox](#InputBox) to let the user enter some text input.
	 *
	 * Note that in many cases the more convenient [window.showInputBox](#window.showInputBox)
	 * is easier to use. [window.createInputBox](#window.createInputBox) should be used
	 * when [window.showInputBox](#window.showInputBox) does not offer the required flexibility.
	 *
	 * @return A new [InputBox](#InputBox).</haxe_doc>
		</createInputBox>
		<createOutputChannel public="1" set="method">
			<f a="name">
				<c path="String"/>
				<t path="vscode.OutputChannel"/>
			</f>
			<haxe_doc>* Creates a new [output channel](#OutputChannel) with the given name.
	 *
	 * @param name Human-readable string which will be used to represent the channel in the UI.</haxe_doc>
		</createOutputChannel>
		<createWebviewPanel public="1" set="method">
			<f a="viewType:title:showOptions:?options">
				<c path="String"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<x path="vscode.ViewColumn"/>
					<a>
						<viewColumn><x path="vscode.ViewColumn"/></viewColumn>
						<preserveFocus>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</preserveFocus>
					</a>
				</x>
				<x path="Null"><a>
	<retainContextWhenHidden set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Controls if the webview panel's content (iframe) is kept around even when the panel
	 * is no longer visible.
	 *
	 * Normally the webview panel's html context is created when the panel becomes visible
	 * and destroyed when it is hidden. Extensions that have complex state
	 * or UI can set the `retainContextWhenHidden` to make VS Code keep the webview
	 * context around, even when the webview moves to a background tab. When a webview using
	 * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.
	 * When the panel becomes visible again, the context is automatically restored
	 * in the exact same state it was in originally. You cannot send messages to a
	 * hidden webview, even with `retainContextWhenHidden` enabled.
	 *
	 * `retainContextWhenHidden` has a high memory overhead and should only be used if
	 * your panel's context cannot be quickly saved and restored.</haxe_doc>
	</retainContextWhenHidden>
	<portMapping set="null">
		<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.WebviewPortMapping"/></x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Mappings of localhost ports used inside the webview.
	 *
	 * Port mapping allow webviews to transparently define how localhost ports are resolved. This can be used
	 * to allow using a static localhost port inside the webview that is resolved to random port that a service is
	 * running on.
	 *
	 * If a webview accesses localhost content, we recommend that you specify port mappings even if
	 * the `webviewPort` and `extensionHostPort` ports are the same.
	 *
	 * *Note* that port mappings only work for `http` or `https` urls. Websocket urls (e.g. `ws://localhost:3000`)
	 * cannot be mapped to another port.</haxe_doc>
	</portMapping>
	<localResourceRoots set="null">
		<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Root paths from which the webview can load local (filesystem) resources using the `vscode-resource:` scheme.
	 *
	 * Default to the root folders of the current workspace plus the extension's install directory.
	 *
	 * Pass in an empty array to disallow access to any local resources.</haxe_doc>
	</localResourceRoots>
	<enableScripts set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Controls whether scripts are enabled in the webview content or not.
	 *
	 * Defaults to false (scripts-disabled).</haxe_doc>
	</enableScripts>
	<enableFindWidget set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Controls if the find widget is enabled in the panel.
	 *
	 * Defaults to false.</haxe_doc>
	</enableFindWidget>
	<enableCommandUris set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Controls whether command uris are enabled in webview content or not.
	 *
	 * Defaults to false.</haxe_doc>
	</enableCommandUris>
</a></x>
				<t path="vscode.WebviewPanel"/>
			</f>
			<haxe_doc>* Create and show a new webview panel.
	 *
	 * @param viewType Identifies the type of the webview panel.
	 * @param title Title of the panel.
	 * @param showOptions Where to show the webview in the editor. If preserveFocus is set, the new webview will not take focus.
	 * @param options Settings for the new panel.
	 *
	 * @return New webview panel.</haxe_doc>
		</createWebviewPanel>
		<setStatusBarMessage public="1" set="method">
			<f a="text">
				<c path="String"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Set a message to the status bar. This is a short hand for the more powerful
	 * status bar [items](#window.createStatusBarItem).
	 *
	 * *Note* that status bar messages without hide arguments stack and that they must be disposed when no
	 * longer used.
	 *
	 * @param text The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).
	 * @param hideAfterTimeout Timeout in milliseconds after which the message will be disposed.
	 * @param hideWhenDone Thenable on which completion (resolve or reject) the message will be disposed.
	 * @return A disposable which hides the status bar message.</haxe_doc>
			<overloads>
				<setStatusBarMessage public="1" set="method">
					<f a="text:hideAfterTimeout">
						<c path="String"/>
						<x path="Float"/>
						<c path="vscode.Disposable"/>
					</f>
					<haxe_doc>* Set a message to the status bar. This is a short hand for the more powerful
	 * status bar [items](#window.createStatusBarItem).
	 *
	 * *Note* that status bar messages without hide arguments stack and that they must be disposed when no
	 * longer used.
	 *
	 * @param text The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).
	 * @param hideAfterTimeout Timeout in milliseconds after which the message will be disposed.
	 * @param hideWhenDone Thenable on which completion (resolve or reject) the message will be disposed.
	 * @return A disposable which hides the status bar message.</haxe_doc>
				</setStatusBarMessage>
				<setStatusBarMessage public="1" set="method">
					<f a="text:hideWhenDone">
						<c path="String"/>
						<x path="js.lib.Thenable"><d/></x>
						<c path="vscode.Disposable"/>
					</f>
					<haxe_doc>* Set a message to the status bar. This is a short hand for the more powerful
	 * status bar [items](#window.createStatusBarItem).
	 *
	 * *Note* that status bar messages without hide arguments stack and that they must be disposed when no
	 * longer used.
	 *
	 * @param text The message to show, supports icon substitution as in status bar [items](#StatusBarItem.text).
	 * @param hideAfterTimeout Timeout in milliseconds after which the message will be disposed.
	 * @param hideWhenDone Thenable on which completion (resolve or reject) the message will be disposed.
	 * @return A disposable which hides the status bar message.</haxe_doc>
				</setStatusBarMessage>
			</overloads>
		</setStatusBarMessage>
		<withScmProgress public="1" params="R" set="method">
			<f a="task">
				<f a="">
					<t path="vscode.Progress"><x path="Float"/></t>
					<x path="js.lib.Thenable"><c path="withScmProgress.R"/></x>
				</f>
				<x path="js.lib.Thenable"><c path="withScmProgress.R"/></x>
			</f>
			<meta><m n=":deprecated"><e>"Use `withProgress` instead."</e></m></meta>
			<haxe_doc>* Show progress in the Source Control viewlet while running the given callback and while
	 * its returned promise isn't resolve or rejected.
	 *
	 * @deprecated Use `withProgress` instead.
	 *
	 * @param task A callback returning a promise. Progress increments can be reported with
	 * the provided [progress](#Progress)-object.
	 * @return The thenable the task did return.</haxe_doc>
		</withScmProgress>
		<withProgress public="1" params="R" set="method">
			<f a="options:task">
				<t path="vscode.ProgressOptions"/>
				<f a=":">
					<t path="vscode.Progress"><a>
	<message>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</message>
	<increment>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</increment>
</a></t>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><c path="withProgress.R"/></x>
				</f>
				<x path="js.lib.Thenable"><c path="withProgress.R"/></x>
			</f>
			<haxe_doc>* Show progress in the editor. Progress is shown while running the given callback
	 * and while the promise it returned isn't resolved nor rejected. The location at which
	 * progress should show (and other details) is defined via the passed [`ProgressOptions`](#ProgressOptions).
	 *
	 * @param task A callback returning a promise. Progress state can be reported with
	 * the provided [progress](#Progress)-object.
	 *
	 * To report discrete progress, use `increment` to indicate how much work has been completed. Each call with
	 * a `increment` value will be summed up and reflected as overall progress until 100% is reached (a value of
	 * e.g. `10` accounts for `10%` of work done).
	 * Note that currently only `ProgressLocation.Notification` is capable of showing discrete progress.
	 *
	 * To monitor if the operation has been cancelled by the user, use the provided [`CancellationToken`](#CancellationToken).
	 * Note that currently only `ProgressLocation.Notification` is supporting to show a cancel button to cancel the
	 * long running operation.
	 * @return The thenable the task-callback returned.</haxe_doc>
		</withProgress>
		<createStatusBarItem public="1" set="method">
			<f a="?alignment:?priority">
				<x path="vscode.StatusBarAlignment"/>
				<x path="Float"/>
				<t path="vscode.StatusBarItem"/>
			</f>
			<haxe_doc>* Creates a status bar [item](#StatusBarItem).
	 *
	 * @param alignment The alignment of the item.
	 * @param priority The priority of the item. Higher values mean the item should be shown more to the left.
	 * @return A new status bar item.</haxe_doc>
		</createStatusBarItem>
		<createTerminal public="1" set="method">
			<f a="?name:?shellPath:?shellArgs">
				<c path="String"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="Array"><c path="String"/></c>
					<c path="String"/>
				</x>
				<t path="vscode.Terminal"/>
			</f>
			<haxe_doc>* Creates a [Terminal](#Terminal) with a backing shell process. The cwd of the terminal will be the workspace
	 * directory if it exists.
	 *
	 * @param name Optional human-readable string which will be used to represent the terminal in the UI.
	 * @param shellPath Optional path to a custom shell executable to be used in the terminal.
	 * @param shellArgs Optional args for the custom shell executable. A string can be used on Windows only which
	 * allows specifying shell args in
	 * [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6).
	 * @param options A TerminalOptions object describing the characteristics of the new terminal.
	 * @param options An [ExtensionTerminalOptions](#ExtensionTerminalOptions) object describing
	 * the characteristics of the new terminal.
	 * @return A new Terminal.
	 * @throws When running in an environment where a new process cannot be started.</haxe_doc>
			<overloads>
				<createTerminal public="1" set="method">
					<f a="options">
						<t path="vscode.TerminalOptions"/>
						<t path="vscode.Terminal"/>
					</f>
					<haxe_doc>* Creates a [Terminal](#Terminal) with a backing shell process. The cwd of the terminal will be the workspace
	 * directory if it exists.
	 *
	 * @param name Optional human-readable string which will be used to represent the terminal in the UI.
	 * @param shellPath Optional path to a custom shell executable to be used in the terminal.
	 * @param shellArgs Optional args for the custom shell executable. A string can be used on Windows only which
	 * allows specifying shell args in
	 * [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6).
	 * @param options A TerminalOptions object describing the characteristics of the new terminal.
	 * @param options An [ExtensionTerminalOptions](#ExtensionTerminalOptions) object describing
	 * the characteristics of the new terminal.
	 * @return A new Terminal.
	 * @throws When running in an environment where a new process cannot be started.</haxe_doc>
				</createTerminal>
				<createTerminal public="1" set="method">
					<f a="options">
						<t path="vscode.ExtensionTerminalOptions"/>
						<t path="vscode.Terminal"/>
					</f>
					<haxe_doc>* Creates a [Terminal](#Terminal) with a backing shell process. The cwd of the terminal will be the workspace
	 * directory if it exists.
	 *
	 * @param name Optional human-readable string which will be used to represent the terminal in the UI.
	 * @param shellPath Optional path to a custom shell executable to be used in the terminal.
	 * @param shellArgs Optional args for the custom shell executable. A string can be used on Windows only which
	 * allows specifying shell args in
	 * [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6).
	 * @param options A TerminalOptions object describing the characteristics of the new terminal.
	 * @param options An [ExtensionTerminalOptions](#ExtensionTerminalOptions) object describing
	 * the characteristics of the new terminal.
	 * @return A new Terminal.
	 * @throws When running in an environment where a new process cannot be started.</haxe_doc>
				</createTerminal>
			</overloads>
		</createTerminal>
		<registerTreeDataProvider public="1" params="T" set="method">
			<f a="viewId:treeDataProvider">
				<c path="String"/>
				<t path="vscode.TreeDataProvider"><c path="registerTreeDataProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a [TreeDataProvider](#TreeDataProvider) for the view contributed using the extension point `views`.
	 * This will allow you to contribute data to the [TreeView](#TreeView) and update if the data changes.
	 *
	 * **Note:** To get access to the [TreeView](#TreeView) and perform operations on it, use [createTreeView](#window.createTreeView).
	 *
	 * @param viewId Id of the view contributed using the extension point `views`.
	 * @param treeDataProvider A [TreeDataProvider](#TreeDataProvider) that provides tree data for the view</haxe_doc>
		</registerTreeDataProvider>
		<createTreeView public="1" params="T" set="method">
			<f a="viewId:options">
				<c path="String"/>
				<t path="vscode.TreeViewOptions"><c path="createTreeView.T"/></t>
				<t path="vscode.TreeView"><c path="createTreeView.T"/></t>
			</f>
			<haxe_doc>* Create a [TreeView](#TreeView) for the view contributed using the extension point `views`.
	 * @param viewId Id of the view contributed using the extension point `views`.
	 * @param options Options for creating the [TreeView](#TreeView)
	 * @returns a [TreeView](#TreeView).</haxe_doc>
		</createTreeView>
		<registerUriHandler public="1" set="method">
			<f a="handler">
				<t path="vscode.UriHandler"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a [uri handler](#UriHandler) capable of handling system-wide [uris](#Uri).
	 * In case there are multiple windows open, the topmost window will handle the uri.
	 * A uri handler is scoped to the extension it is contributed from; it will only
	 * be able to handle uris which are directed to the extension itself. A uri must respect
	 * the following rules:
	 *
	 * - The uri-scheme must be `vscode.env.uriScheme`;
	 * - The uri-authority must be the extension id (e.g. `my.extension`);
	 * - The uri-path, -query and -fragment parts are arbitrary.
	 *
	 * For example, if the `my.extension` extension registers a uri handler, it will only
	 * be allowed to handle uris with the prefix `product-name://my.extension`.
	 *
	 * An extension can only register a single uri handler in its entire activation lifetime.
	 *
	 * * *Note:* There is an activation event `onUri` that fires when a uri directed for
	 * the current extension is about to be handled.
	 *
	 * @param handler The uri handler to register for this extension.</haxe_doc>
		</registerUriHandler>
		<registerWebviewPanelSerializer public="1" params="T" set="method">
			<f a="viewType:serializer">
				<c path="String"/>
				<t path="vscode.WebviewPanelSerializer"><c path="registerWebviewPanelSerializer.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a webview panel serializer.
	 *
	 * Extensions that support reviving should have an `"onWebviewPanel:viewType"` activation event and
	 * make sure that [registerWebviewPanelSerializer](#registerWebviewPanelSerializer) is called during activation.
	 *
	 * Only a single serializer may be registered at a time for a given `viewType`.
	 *
	 * @param viewType Type of the webview panel that can be serialized.
	 * @param serializer Webview serializer.</haxe_doc>
		</registerWebviewPanelSerializer>
		<registerWebviewViewProvider public="1" set="method">
			<f a="viewId:provider:?options">
				<c path="String"/>
				<t path="vscode.WebviewViewProvider"/>
				<a><webviewOptions set="null">
	<x path="Null"><a><retainContextWhenHidden set="null">
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Controls if the webview element itself (iframe) is kept around even when the view
			 * is no longer visible.
			 *
			 * Normally the webview's html context is created when the view becomes visible
			 * and destroyed when it is hidden. Extensions that have complex state
			 * or UI can set the `retainContextWhenHidden` to make VS Code keep the webview
			 * context around, even when the webview moves to a background tab. When a webview using
			 * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.
			 * When the view becomes visible again, the context is automatically restored
			 * in the exact same state it was in originally. You cannot send messages to a
			 * hidden webview, even with `retainContextWhenHidden` enabled.
			 *
			 * `retainContextWhenHidden` has a high memory overhead and should only be used if
			 * your view's context cannot be quickly saved and restored.</haxe_doc>
</retainContextWhenHidden></a></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Content settings for the webview created for this view.</haxe_doc>
</webviewOptions></a>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a new provider for webview views.
	 *
	 * @param viewId Unique id of the view. This should match the `id` from the
	 *   `views` contribution in the package.json.
	 * @param provider Provider for the webview views.
	 *
	 * @return Disposable that unregisters the provider.</haxe_doc>
		</registerWebviewViewProvider>
		<registerCustomEditorProvider public="1" params="T" set="method">
			<f a="viewType:provider:?options">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<t path="vscode.CustomTextEditorProvider"/>
					<x path="haxe.extern.EitherType">
						<t path="vscode.CustomReadonlyEditorProvider"><c path="registerCustomEditorProvider.T"/></t>
						<t path="vscode.CustomEditorProvider"><c path="registerCustomEditorProvider.T"/></t>
					</x>
				</x>
				<a>
					<webviewOptions final="1" set="null">
						<x path="Null"><t path="vscode.WebviewPanelOptions"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>* Content settings for the webview panels created for this custom editor.</haxe_doc>
					</webviewOptions>
					<supportsMultipleEditorsPerDocument final="1" set="null">
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>* Only applies to `CustomReadonlyEditorProvider | CustomEditorProvider`.
			 *
			 * Indicates that the provider allows multiple editor instances to be open at the same time for
			 * the same resource.
			 *
			 * By default, VS Code only allows one editor instance to be open at a time for each resource. If the
			 * user tries to open a second editor instance for the resource, the first one is instead moved to where
			 * the second one was to be opened.
			 *
			 * When `supportsMultipleEditorsPerDocument` is enabled, users can split and create copies of the custom
			 * editor. In this case, the custom editor must make sure it can properly synchronize the states of all
			 * editor instances for a resource so that they are consistent.</haxe_doc>
					</supportsMultipleEditorsPerDocument>
				</a>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a provider for custom editors for the `viewType` contributed by the `customEditors` extension point.
	 *
	 * When a custom editor is opened, VS Code fires an `onCustomEditor:viewType` activation event. Your extension
	 * must register a [`CustomTextEditorProvider`](#CustomTextEditorProvider), [`CustomReadonlyEditorProvider`](#CustomReadonlyEditorProvider),
	 * [`CustomEditorProvider`](#CustomEditorProvider)for `viewType` as part of activation.
	 *
	 * @param viewType Unique identifier for the custom editor provider. This should match the `viewType` from the
	 *   `customEditors` contribution point.
	 * @param provider Provider that resolves custom editors.
	 * @param options Options for the provider.
	 *
	 * @return Disposable that unregisters the provider.</haxe_doc>
		</registerCustomEditorProvider>
		<registerTerminalLinkProvider public="1" params="T" set="method">
			<f a="provider">
				<t path="vscode.TerminalLinkProvider"><c path="registerTerminalLinkProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register provider that enables the detection and handling of links within the terminal.
	 * @param provider The provider that provides the terminal links.
	 * @return Disposable that unregisters the provider.</haxe_doc>
		</registerTerminalLinkProvider>
		<registerFileDecorationProvider public="1" set="method">
			<f a="provider">
				<t path="vscode.FileDecorationProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a file decoration provider.
	 *
	 * @param provider A [FileDecorationProvider](#FileDecorationProvider).
	 * @return A [disposable](#Disposable) that unregisters the provider.</haxe_doc>
		</registerFileDecorationProvider>
		<activeColorTheme public="1">
			<t path="vscode.ColorTheme"/>
			<haxe_doc>* The currently active color theme as configured in the settings. The active
	 * theme can be changed via the `workbench.colorTheme` setting.</haxe_doc>
		</activeColorTheme>
		<onDidChangeActiveColorTheme public="1" set="null">
			<t path="vscode.Event"><t path="vscode.ColorTheme"/></t>
			<haxe_doc>* An [event](#Event) which fires when the active color theme is changed or has changes.</haxe_doc>
		</onDidChangeActiveColorTheme>
	</class>
	<class path="VscodeExtensions" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<getExtension public="1" params="T" set="method">
			<f a="extensionId">
				<c path="String"/>
				<x path="Null"><t path="vscode.Extension"><c path="getExtension.T"/></t></x>
			</f>
			<haxe_doc>* Get an extension by its full identifier in the form of: `publisher.name`.
	 *
	 * @param extensionId An extension identifier.
	 * @return An extension or `undefined`.</haxe_doc>
		</getExtension>
		<all public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Extension"><x path="Any"/></t></x>
			<haxe_doc>* All extensions currently known to the system.</haxe_doc>
		</all>
		<onDidChange public="1" set="null">
			<t path="vscode.Event"><x path="Void"/></t>
			<haxe_doc>* An event which fires when `extensions.all` changes. This can happen when extensions are
	 * installed, uninstalled, enabled or disabled.</haxe_doc>
		</onDidChange>
	</class>
	<class path="VscodeScm" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<inputBox public="1" set="null">
			<t path="vscode.SourceControlInputBox"/>
			<meta><m n=":deprecated"><e>"Use SourceControl.inputBox instead"</e></m></meta>
			<haxe_doc>* The [input box](#SourceControlInputBox) for the last source control
	 * created by the extension.
	 *
	 * @deprecated Use SourceControl.inputBox instead</haxe_doc>
		</inputBox>
		<createSourceControl public="1" set="method">
			<f a="id:label:?rootUri">
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.Uri"/>
				<t path="vscode.SourceControl"/>
			</f>
			<haxe_doc>* Creates a new [source control](#SourceControl) instance.
	 *
	 * @param id An `id` for the source control. Something short, e.g.: `git`.
	 * @param label A human-readable string for the source control. E.g.: `Git`.
	 * @param rootUri An optional Uri of the root of the source control. E.g.: `Uri.parse(workspaceRoot)`.
	 * @return An instance of [source control](#SourceControl).</haxe_doc>
		</createSourceControl>
	</class>
	<class path="VscodeLanguages" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<getLanguages public="1" set="method">
			<f a=""><x path="js.lib.Thenable"><c path="Array"><c path="String"/></c></x></f>
			<haxe_doc>* Return the identifiers of all known languages.
	 * @return Promise resolving to an array of identifier strings.</haxe_doc>
		</getLanguages>
		<setTextDocumentLanguage public="1" set="method">
			<f a="document:languageId">
				<t path="vscode.TextDocument"/>
				<c path="String"/>
				<x path="js.lib.Thenable"><t path="vscode.TextDocument"/></x>
			</f>
			<haxe_doc>* Set (and change) the [language](#TextDocument.languageId) that is associated
	 * with the given document.
	 *
	 * *Note* that calling this function will trigger the [`onDidCloseTextDocument`](#workspace.onDidCloseTextDocument) event
	 * followed by the [`onDidOpenTextDocument`](#workspace.onDidOpenTextDocument) event.
	 *
	 * @param document The document which language is to be changed
	 * @param languageId The new language identifier.
	 * @returns A thenable that resolves with the updated document.</haxe_doc>
		</setTextDocumentLanguage>
		<match public="1" set="method">
			<f a="selector:document">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.TextDocument"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* Compute the match between a document [selector](#DocumentSelector) and a document. Values
	 * greater than zero mean the selector matches the document.
	 *
	 * A match is computed according to these rules:
	 * 1. When [`DocumentSelector`](#DocumentSelector) is an array, compute the match for each contained `DocumentFilter` or language identifier and take the maximum value.
	 * 2. A string will be desugared to become the `language`-part of a [`DocumentFilter`](#DocumentFilter), so `"fooLang"` is like `{ language: "fooLang" }`.
	 * 3. A [`DocumentFilter`](#DocumentFilter) will be matched against the document by comparing its parts with the document. The following rules apply:
	 *  1. When the `DocumentFilter` is empty (`{}`) the result is `0`
	 *  2. When `scheme`, `language`, or `pattern` are defined but one doesn't match, the result is `0`
	 *  3. Matching against `*` gives a score of `5`, matching via equality or via a glob-pattern gives a score of `10`
	 *  4. The result is the maximum value of each match
	 *
	 * Samples:
	 * ```js
	 * // default document from disk (file-scheme)
	 * doc.uri; //'file:///my/file.js'
	 * doc.languageId; // 'javascript'
	 * match('javascript', doc); // 10;
	 * match({language: 'javascript'}, doc); // 10;
	 * match({language: 'javascript', scheme: 'file'}, doc); // 10;
	 * match('*', doc); // 5
	 * match('fooLang', doc); // 0
	 * match(['fooLang', '*'], doc); // 5
	 *
	 * // virtual document, e.g. from git-index
	 * doc.uri; // 'git:/my/file.js'
	 * doc.languageId; // 'javascript'
	 * match('javascript', doc); // 10;
	 * match({language: 'javascript', scheme: 'git'}, doc); // 10;
	 * match('*', doc); // 5
	 * ```
	 *
	 * @param selector A document selector.
	 * @param document A text document.
	 * @return A number `>0` when the selector matches and `0` when the selector does not match.]]></haxe_doc>
		</match>
		<onDidChangeDiagnostics public="1" set="null">
			<t path="vscode.Event"><t path="vscode.DiagnosticChangeEvent"/></t>
			<haxe_doc>* An [event](#Event) which fires when the global set of diagnostics changes. This is
	 * newly added and removed diagnostics.</haxe_doc>
		</onDidChangeDiagnostics>
		<getDiagnostics public="1" set="method">
			<f a=""><c path="Array"><x path="VscodeLanguagesGetDiagnosticsReturn"/></c></f>
			<haxe_doc>* Get all diagnostics for a given resource.
	 *
	 * @param resource A resource
	 * @returns An array of [diagnostics](#Diagnostic) objects or an empty array.
	 *
	 * OR
	 *
	 * Get all diagnostics.
	 *
	 * @returns An array of uri-diagnostics tuples or an empty array.</haxe_doc>
			<overloads><getDiagnostics public="1" set="method">
	<f a="resource">
		<c path="vscode.Uri"/>
		<c path="Array"><c path="vscode.Diagnostic"/></c>
	</f>
	<haxe_doc>* Get all diagnostics for a given resource.
	 *
	 * @param resource A resource
	 * @returns An array of [diagnostics](#Diagnostic) objects or an empty array.
	 *
	 * OR
	 *
	 * Get all diagnostics.
	 *
	 * @returns An array of uri-diagnostics tuples or an empty array.</haxe_doc>
</getDiagnostics></overloads>
		</getDiagnostics>
		<createDiagnosticCollection public="1" set="method">
			<f a="?name">
				<c path="String"/>
				<t path="vscode.DiagnosticCollection"/>
			</f>
			<haxe_doc>* Create a diagnostics collection.
	 *
	 * @param name The [name](#DiagnosticCollection.name) of the collection.
	 * @return A new diagnostic collection.</haxe_doc>
		</createDiagnosticCollection>
		<registerCompletionItemProvider public="1" params="T" set="method">
			<f a="selector:provider:triggerCharacters">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.CompletionItemProvider"><c path="registerCompletionItemProvider.T"/></t>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a completion provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and groups of equal score are sequentially asked for
	 * completion items. The process stops when one or many providers of a group return a
	 * result. A failing provider (rejected promise or exception) will not fail the whole
	 * operation.
	 *
	 * A completion item provider can be associated with a set of `triggerCharacters`. When trigger
	 * characters are being typed, completions are requested but only from providers that registered
	 * the typed character. Because of that trigger characters should be different than [word characters](#LanguageConfiguration.wordPattern),
	 * a common trigger character is `.` to trigger member completions.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A completion provider.
	 * @param triggerCharacters Trigger completion when the user types one of the characters.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerCompletionItemProvider>
		<registerCodeActionsProvider public="1" params="T" set="method">
			<f a="selector:provider:?metadata">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.CodeActionProvider"><c path="registerCodeActionsProvider.T"/></t>
				<t path="vscode.CodeActionProviderMetadata"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a code action provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A code action provider.
	 * @param metadata Metadata about the kind of code actions the provider provides.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerCodeActionsProvider>
		<registerCodeLensProvider public="1" params="T" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.CodeLensProvider"><c path="registerCodeLensProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a code lens provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A code lens provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerCodeLensProvider>
		<registerDefinitionProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DefinitionProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a definition provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A definition provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDefinitionProvider>
		<registerImplementationProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.ImplementationProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register an implementation provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An implementation provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerImplementationProvider>
		<registerTypeDefinitionProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.TypeDefinitionProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a type definition provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A type definition provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerTypeDefinitionProvider>
		<registerDeclarationProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DeclarationProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a declaration provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A declaration provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDeclarationProvider>
		<registerHoverProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.HoverProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a hover provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A hover provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerHoverProvider>
		<registerEvaluatableExpressionProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.EvaluatableExpressionProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a provider that locates evaluatable expressions in text documents.
	 * VS Code will evaluate the expression in the active debug session and will show the result in the debug hover.
	 *
	 * If multiple providers are registered for a language an arbitrary provider will be used.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An evaluatable expression provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerEvaluatableExpressionProvider>
		<registerInlineValuesProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.InlineValuesProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a provider that returns data for the debugger's 'inline value' feature.
	 * Whenever the generic VS Code debugger has stopped in a source file, providers registered for the language of the file
	 * are called to return textual data that will be shown in the editor at the end of lines.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An inline values provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerInlineValuesProvider>
		<registerDocumentHighlightProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentHighlightProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a document highlight provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and groups sequentially asked for document highlights.
	 * The process stops when a provider returns a `non-falsy` or `non-failure` result.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document highlight provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentHighlightProvider>
		<registerDocumentSymbolProvider public="1" set="method">
			<f a="selector:provider:?metaData">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentSymbolProvider"/>
				<t path="vscode.DocumentSymbolProviderMetadata"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a document symbol provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document symbol provider.
	 * @param metaData metadata about the provider
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentSymbolProvider>
		<registerWorkspaceSymbolProvider public="1" params="T" set="method">
			<f a="provider">
				<t path="vscode.WorkspaceSymbolProvider"><c path="registerWorkspaceSymbolProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a workspace symbol provider.
	 *
	 * Multiple providers can be registered. In that case providers are asked in parallel and
	 * the results are merged. A failing provider (rejected promise or exception) will not cause
	 * a failure of the whole operation.
	 *
	 * @param provider A workspace symbol provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerWorkspaceSymbolProvider>
		<registerReferenceProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.ReferenceProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a reference provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A reference provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerReferenceProvider>
		<registerRenameProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.RenameProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a rename provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and asked in sequence. The first provider producing a result
	 * defines the result of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A rename provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerRenameProvider>
		<registerDocumentSemanticTokensProvider public="1" set="method">
			<f a="selector:provider:legend">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentSemanticTokensProvider"/>
				<c path="vscode.SemanticTokensLegend"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a semantic tokens provider for a whole document.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document semantic tokens provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentSemanticTokensProvider>
		<registerDocumentRangeSemanticTokensProvider public="1" set="method">
			<f a="selector:provider:legend">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentRangeSemanticTokensProvider"/>
				<c path="vscode.SemanticTokensLegend"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a semantic tokens provider for a document range.
	 *
	 * *Note:* If a document has both a `DocumentSemanticTokensProvider` and a `DocumentRangeSemanticTokensProvider`,
	 * the range provider will be invoked only initially, for the time in which the full document provider takes
	 * to resolve the first request. Once the full document provider resolves the first request, the semantic tokens
	 * provided via the range provider will be discarded and from that point forward, only the document provider
	 * will be used.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document range semantic tokens provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentRangeSemanticTokensProvider>
		<registerDocumentFormattingEditProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentFormattingEditProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a formatting provider for a document.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document formatting edit provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentFormattingEditProvider>
		<registerDocumentRangeFormattingEditProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentRangeFormattingEditProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a formatting provider for a document range.
	 *
	 * *Note:* A document range provider is also a [document formatter](#DocumentFormattingEditProvider)
	 * which means there is no need to [register](#languages.registerDocumentFormattingEditProvider) a document
	 * formatter when also registering a range provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document range formatting edit provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentRangeFormattingEditProvider>
		<registerOnTypeFormattingEditProvider public="1" set="method">
			<f a="selector:provider:firstTriggerCharacter:moreTriggerCharacter">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.OnTypeFormattingEditProvider"/>
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a formatting provider that works on type. The provider is active when the user enables the setting `editor.formatOnType`.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An on type formatting edit provider.
	 * @param firstTriggerCharacter A character on which formatting should be triggered, like `}`.
	 * @param moreTriggerCharacter More trigger characters.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerOnTypeFormattingEditProvider>
		<registerSignatureHelpProvider public="1" set="method">
			<f a="selector:provider:metadata">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.SignatureHelpProvider"/>
				<t path="vscode.SignatureHelpProviderMetadata"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a signature help provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and called sequentially until a provider returns a
	 * valid result.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A signature help provider.
	 * @param triggerCharacters Trigger signature help when the user types one of the characters, like `,` or `(`.
	 * @param metadata Information about the provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
			<overloads><registerSignatureHelpProvider public="1" set="method">
	<f a="selector:provider:triggerCharacters">
		<t path="vscode.DocumentSelector"/>
		<t path="vscode.SignatureHelpProvider"/>
		<x path="haxe.extern.Rest"><c path="String"/></x>
		<c path="vscode.Disposable"/>
	</f>
	<haxe_doc>* Register a signature help provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and called sequentially until a provider returns a
	 * valid result.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A signature help provider.
	 * @param triggerCharacters Trigger signature help when the user types one of the characters, like `,` or `(`.
	 * @param metadata Information about the provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
</registerSignatureHelpProvider></overloads>
		</registerSignatureHelpProvider>
		<registerDocumentLinkProvider public="1" params="T" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentLinkProvider"><c path="registerDocumentLinkProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a document link provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document link provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentLinkProvider>
		<registerColorProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentColorProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a color provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A color provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerColorProvider>
		<registerFoldingRangeProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.FoldingRangeProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a folding range provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged.
	 * If multiple folding ranges start at the same position, only the range of the first registered provider is used.
	 * If a folding range overlaps with an other range that has a smaller position, it is also ignored.
	 *
	 * A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A folding range provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerFoldingRangeProvider>
		<registerSelectionRangeProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.SelectionRangeProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a selection range provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A selection range provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerSelectionRangeProvider>
		<registerCallHierarchyProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.CallHierarchyProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a call hierarchy provider.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A call hierarchy provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerCallHierarchyProvider>
		<registerLinkedEditingRangeProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.LinkedEditingRangeProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a linked editing range provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their [score](#languages.match) and the best-matching provider that has a result is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A linked editing range provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerLinkedEditingRangeProvider>
		<setLanguageConfiguration public="1" set="method">
			<f a="language:configuration">
				<c path="String"/>
				<t path="vscode.LanguageConfiguration"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Set a [language configuration](#LanguageConfiguration) for a language.
	 *
	 * @param language A language identifier like `typescript`.
	 * @param configuration Language configuration.
	 * @return A [disposable](#Disposable) that unsets this configuration.</haxe_doc>
		</setLanguageConfiguration>
	</class>
	<class path="VscodeWorkspace" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<fs public="1" set="null">
			<t path="vscode.FileSystem"/>
			<haxe_doc>* A [file system](#FileSystem) instance that allows to interact with local and remote
	 * files, e.g. `vscode.workspace.fs.readDirectory(someUri)` allows to retrieve all entries
	 * of a directory or `vscode.workspace.fs.stat(anotherUri)` returns the meta data for a
	 * file.</haxe_doc>
		</fs>
		<rootPath public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<meta><m n=":deprecated"><e>"Use [`workspaceFolders`](#workspace.workspaceFolders) instead."</e></m></meta>
			<haxe_doc>* The workspace folder that is open in VS Code. `undefined` when no workspace
	 * has been opened.
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information
	 * on workspaces in VS Code.
	 *
	 * @deprecated Use [`workspaceFolders`](#workspace.workspaceFolders) instead.</haxe_doc>
		</rootPath>
		<workspaceFolders public="1" set="null">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.WorkspaceFolder"/></x></x>
			<haxe_doc>* List of workspace folders that are open in VS Code. `undefined when no workspace
	 * has been opened.
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information
	 * on workspaces in VS Code.
	 *
	 * *Note* that the first entry corresponds to the value of `rootPath`.</haxe_doc>
		</workspaceFolders>
		<name public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The name of the workspace. `undefined` when no workspace
	 * has been opened.
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information on
	 * the concept of workspaces in VS Code.</haxe_doc>
		</name>
		<workspaceFile public="1" set="null">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* The location of the workspace file, for example:
	 *
	 * `file:///Users/name/Development/myProject.code-workspace`
	 *
	 * or
	 *
	 * `untitled:1555503116870`
	 *
	 * for a workspace that is untitled and not yet saved.
	 *
	 * Depending on the workspace that is opened, the value will be:
	 *  * `undefined` when no workspace is opened
	 *  * the path of the workspace file as `Uri` otherwise. if the workspace
	 * is untitled, the returned URI will use the `untitled:` scheme
	 *
	 * The location can e.g. be used with the `vscode.openFolder` command to
	 * open the workspace again after it has been closed.
	 *
	 * **Example:**
	 * ```typescript
	 * vscode.commands.executeCommand('vscode.openFolder', uriOfWorkspace);
	 * ```
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information on
	 * the concept of workspaces in VS Code.
	 *
	 * **Note:** it is not advised to use `workspace.workspaceFile` to write
	 * configuration data into the file. You can use `workspace.getConfiguration().update()`
	 * for that purpose which will work both when a single folder is opened as
	 * well as an untitled or saved workspace.</haxe_doc>
		</workspaceFile>
		<onDidChangeWorkspaceFolders public="1" set="null">
			<t path="vscode.Event"><t path="vscode.WorkspaceFoldersChangeEvent"/></t>
			<haxe_doc>* An event that is emitted when a workspace folder is added or removed.</haxe_doc>
		</onDidChangeWorkspaceFolders>
		<getWorkspaceFolder public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
			</f>
			<haxe_doc>* Returns the [workspace folder](#WorkspaceFolder) that contains a given uri.
	 * * returns `undefined` when the given uri doesn't match any workspace folder
	 * * returns the *input* when the given uri is a workspace folder itself
	 *
	 * @param uri An uri.
	 * @return A workspace folder or `undefined`</haxe_doc>
		</getWorkspaceFolder>
		<asRelativePath public="1" set="method">
			<f a="pathOrUri:?includeWorkspaceFolder">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns a path that is relative to the workspace folder or folders.
	 *
	 * When there are no [workspace folders](#workspace.workspaceFolders) or when the path
	 * is not contained in them, the input is returned.
	 *
	 * @param pathOrUri A path or uri. When a uri is given its [fsPath](#Uri.fsPath) is used.
	 * @param includeWorkspaceFolder When `true` and when the given path is contained inside a
	 * workspace folder the name of the workspace is prepended. Defaults to `true` when there are
	 * multiple workspace folders and `false` otherwise.
	 * @return A path relative to the root or the input.</haxe_doc>
		</asRelativePath>
		<updateWorkspaceFolders public="1" set="method">
			<f a="start:deleteCount:workspaceFoldersToAdd">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
				<x path="haxe.extern.Rest"><a>
	<uri><c path="vscode.Uri"/></uri>
	<name>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</name>
</a></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>* This method replaces `deleteCount` [workspace folders](#workspace.workspaceFolders) starting at index `start`
	 * by an optional set of `workspaceFoldersToAdd` on the `vscode.workspace.workspaceFolders` array. This "splice"
	 * behavior can be used to add, remove and change workspace folders in a single operation.
	 *
	 * If the first workspace folder is added, removed or changed, the currently executing extensions (including the
	 * one that called this method) will be terminated and restarted so that the (deprecated) `rootPath` property is
	 * updated to point to the first workspace folder.
	 *
	 * Use the [`onDidChangeWorkspaceFolders()`](#onDidChangeWorkspaceFolders) event to get notified when the
	 * workspace folders have been updated.
	 *
	 * **Example:** adding a new workspace folder at the end of workspace folders
	 * ```typescript
	 * workspace.updateWorkspaceFolders(workspace.workspaceFolders ? workspace.workspaceFolders.length : 0, null, { uri: ...});
	 * ```
	 *
	 * **Example:** removing the first workspace folder
	 * ```typescript
	 * workspace.updateWorkspaceFolders(0, 1);
	 * ```
	 *
	 * **Example:** replacing an existing workspace folder with a new one
	 * ```typescript
	 * workspace.updateWorkspaceFolders(0, 1, { uri: ...});
	 * ```
	 *
	 * It is valid to remove an existing workspace folder and add it again with a different name
	 * to rename that folder.
	 *
	 * **Note:** it is not valid to call [updateWorkspaceFolders()](#updateWorkspaceFolders) multiple times
	 * without waiting for the [`onDidChangeWorkspaceFolders()`](#onDidChangeWorkspaceFolders) to fire.
	 *
	 * @param start the zero-based location in the list of currently opened [workspace folders](#WorkspaceFolder)
	 * from which to start deleting workspace folders.
	 * @param deleteCount the optional number of workspace folders to remove.
	 * @param workspaceFoldersToAdd the optional variable set of workspace folders to add in place of the deleted ones.
	 * Each workspace is identified with a mandatory URI and an optional name.
	 * @return true if the operation was successfully started and false otherwise if arguments were used that would result
	 * in invalid workspace folder state (e.g. 2 folders with the same URI).</haxe_doc>
		</updateWorkspaceFolders>
		<createFileSystemWatcher public="1" set="method">
			<f a="globPattern:?ignoreCreateEvents:?ignoreChangeEvents:?ignoreDeleteEvents">
				<t path="vscode.GlobPattern"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="vscode.FileSystemWatcher"/>
			</f>
			<haxe_doc>* Creates a file system watcher.
	 *
	 * A glob pattern that filters the file events on their absolute path must be provided. Optionally,
	 * flags to ignore certain kinds of events can be provided. To stop listening to events the watcher must be disposed.
	 *
	 * *Note* that only files within the current [workspace folders](#workspace.workspaceFolders) can be watched.
	 * *Note* that when watching for file changes such as '**​/*.js', notifications will not be sent when a parent folder is
	 * moved or deleted (this is a known limitation of the current implementation and may change in the future).
	 *
	 * @param globPattern A [glob pattern](#GlobPattern) that is applied to the absolute paths of created, changed,
	 * and deleted files. Use a [relative pattern](#RelativePattern) to limit events to a certain [workspace folder](#WorkspaceFolder).
	 * @param ignoreCreateEvents Ignore when files have been created.
	 * @param ignoreChangeEvents Ignore when files have been changed.
	 * @param ignoreDeleteEvents Ignore when files have been deleted.
	 * @return A new file system watcher instance.</haxe_doc>
		</createFileSystemWatcher>
		<findFiles public="1" set="method">
			<f a="include:?exclude:?maxResults:?token">
				<t path="vscode.GlobPattern"/>
				<t path="vscode.GlobPattern"/>
				<x path="Int"/>
				<t path="vscode.CancellationToken"/>
				<x path="js.lib.Thenable"><c path="Array"><c path="vscode.Uri"/></c></x>
			</f>
			<haxe_doc>* Find files across all [workspace folders](#workspace.workspaceFolders) in the workspace.
	 *
	 * @example
	 * findFiles('**​/*.js', '**​/node_modules/**', 10)
	 *
	 * @param include A [glob pattern](#GlobPattern) that defines the files to search for. The glob pattern
	 * will be matched against the file paths of resulting matches relative to their workspace. Use a [relative pattern](#RelativePattern)
	 * to restrict the search results to a [workspace folder](#WorkspaceFolder).
	 * @param exclude  A [glob pattern](#GlobPattern) that defines files and folders to exclude. The glob pattern
	 * will be matched against the file paths of resulting matches relative to their workspace. When `undefined` only default excludes will
	 * apply, when `null` no excludes will apply.
	 * @param maxResults An upper-bound for the result.
	 * @param token A token that can be used to signal cancellation to the underlying search engine.
	 * @return A thenable that resolves to an array of resource identifiers. Will return no results if no
	 * [workspace folders](#workspace.workspaceFolders) are opened.</haxe_doc>
		</findFiles>
		<saveAll public="1" set="method">
			<f a="?includeUntitled">
				<x path="Bool"/>
				<x path="js.lib.Thenable"><x path="Bool"/></x>
			</f>
			<haxe_doc>* Save all dirty files.
	 *
	 * @param includeUntitled Also save files that have been created during this session.
	 * @return A thenable that resolves when the files have been saved.</haxe_doc>
		</saveAll>
		<applyEdit public="1" set="method">
			<f a="edit">
				<c path="vscode.WorkspaceEdit"/>
				<x path="js.lib.Thenable"><x path="Bool"/></x>
			</f>
			<haxe_doc><![CDATA[* Make changes to one or many resources or create, delete, and rename resources as defined by the given
	 * [workspace edit](#WorkspaceEdit).
	 *
	 * All changes of a workspace edit are applied in the same order in which they have been added. If
	 * multiple textual inserts are made at the same position, these strings appear in the resulting text
	 * in the order the 'inserts' were made, unless that are interleaved with resource edits. Invalid sequences
	 * like 'delete file a' -> 'insert text in file a' cause failure of the operation.
	 *
	 * When applying a workspace edit that consists only of text edits an 'all-or-nothing'-strategy is used.
	 * A workspace edit with resource creations or deletions aborts the operation, e.g. consecutive edits will
	 * not be attempted, when a single edit fails.
	 *
	 * @param edit A workspace edit.
	 * @return A thenable that resolves when the edit could be applied.]]></haxe_doc>
		</applyEdit>
		<textDocuments public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TextDocument"/></x>
			<haxe_doc>* All text documents currently known to the system.</haxe_doc>
		</textDocuments>
		<openTextDocument public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="js.lib.Thenable"><t path="vscode.TextDocument"/></x>
			</f>
			<haxe_doc>* Opens a document. Will return early if this document is already open. Otherwise
	 * the document is loaded and the [didOpen](#workspace.onDidOpenTextDocument)-event fires.
	 *
	 * The document is denoted by an [uri](#Uri). Depending on the [scheme](#Uri.scheme) the
	 * following rules apply:
	 * * `file`-scheme: Open a file on disk, will be rejected if the file does not exist or cannot be loaded.
	 * * `untitled`-scheme: A new file that should be saved on disk, e.g. `untitled:c:\frodo\new.js`. The language
	 * will be derived from the file name.
	 * * For all other schemes contributed [text document content providers](#TextDocumentContentProvider) and
	 * [file system providers](#FileSystemProvider) are consulted.
	 *
	 * *Note* that the lifecycle of the returned document is owned by the editor and not by the extension. That means an
	 * [`onDidClose`](#workspace.onDidCloseTextDocument)-event can occur at any time after opening it.
	 *
	 * ---
	 *
	 * A short-hand for `openTextDocument(Uri.file(fileName))`.
	 *
	 * ---
	 *
	 * Opens an untitled text document. The editor will prompt the user for a file
	 * path when the document is to be saved. The `options` parameter allows to
	 * specify the *language* and/or the *content* of the document.
	 *
	 * @param uri Identifies the resource to open.
	 * @param fileName A name of a file on disk.
	 * @param options Options to control how the document will be created.
	 * @return A promise that resolves to a [document](#TextDocument).</haxe_doc>
			<overloads>
				<openTextDocument public="1" set="method">
					<f a="?options">
						<a>
							<language>
								<x path="Null"><c path="String"/></x>
								<meta><m n=":optional"/></meta>
							</language>
							<content>
								<x path="Null"><c path="String"/></x>
								<meta><m n=":optional"/></meta>
							</content>
						</a>
						<x path="js.lib.Thenable"><t path="vscode.TextDocument"/></x>
					</f>
					<haxe_doc>* Opens a document. Will return early if this document is already open. Otherwise
	 * the document is loaded and the [didOpen](#workspace.onDidOpenTextDocument)-event fires.
	 *
	 * The document is denoted by an [uri](#Uri). Depending on the [scheme](#Uri.scheme) the
	 * following rules apply:
	 * * `file`-scheme: Open a file on disk, will be rejected if the file does not exist or cannot be loaded.
	 * * `untitled`-scheme: A new file that should be saved on disk, e.g. `untitled:c:\frodo\new.js`. The language
	 * will be derived from the file name.
	 * * For all other schemes contributed [text document content providers](#TextDocumentContentProvider) and
	 * [file system providers](#FileSystemProvider) are consulted.
	 *
	 * *Note* that the lifecycle of the returned document is owned by the editor and not by the extension. That means an
	 * [`onDidClose`](#workspace.onDidCloseTextDocument)-event can occur at any time after opening it.
	 *
	 * ---
	 *
	 * A short-hand for `openTextDocument(Uri.file(fileName))`.
	 *
	 * ---
	 *
	 * Opens an untitled text document. The editor will prompt the user for a file
	 * path when the document is to be saved. The `options` parameter allows to
	 * specify the *language* and/or the *content* of the document.
	 *
	 * @param uri Identifies the resource to open.
	 * @param fileName A name of a file on disk.
	 * @param options Options to control how the document will be created.
	 * @return A promise that resolves to a [document](#TextDocument).</haxe_doc>
				</openTextDocument>
				<openTextDocument public="1" set="method">
					<f a="fileName">
						<c path="String"/>
						<x path="js.lib.Thenable"><t path="vscode.TextDocument"/></x>
					</f>
					<haxe_doc>* Opens a document. Will return early if this document is already open. Otherwise
	 * the document is loaded and the [didOpen](#workspace.onDidOpenTextDocument)-event fires.
	 *
	 * The document is denoted by an [uri](#Uri). Depending on the [scheme](#Uri.scheme) the
	 * following rules apply:
	 * * `file`-scheme: Open a file on disk, will be rejected if the file does not exist or cannot be loaded.
	 * * `untitled`-scheme: A new file that should be saved on disk, e.g. `untitled:c:\frodo\new.js`. The language
	 * will be derived from the file name.
	 * * For all other schemes contributed [text document content providers](#TextDocumentContentProvider) and
	 * [file system providers](#FileSystemProvider) are consulted.
	 *
	 * *Note* that the lifecycle of the returned document is owned by the editor and not by the extension. That means an
	 * [`onDidClose`](#workspace.onDidCloseTextDocument)-event can occur at any time after opening it.
	 *
	 * ---
	 *
	 * A short-hand for `openTextDocument(Uri.file(fileName))`.
	 *
	 * ---
	 *
	 * Opens an untitled text document. The editor will prompt the user for a file
	 * path when the document is to be saved. The `options` parameter allows to
	 * specify the *language* and/or the *content* of the document.
	 *
	 * @param uri Identifies the resource to open.
	 * @param fileName A name of a file on disk.
	 * @param options Options to control how the document will be created.
	 * @return A promise that resolves to a [document](#TextDocument).</haxe_doc>
				</openTextDocument>
			</overloads>
		</openTextDocument>
		<registerTextDocumentContentProvider public="1" set="method">
			<f a="scheme:provider">
				<c path="String"/>
				<t path="vscode.TextDocumentContentProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a text document content provider.
	 *
	 * Only one provider can be registered per scheme.
	 *
	 * @param scheme The uri-scheme to register for.
	 * @param provider A content provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerTextDocumentContentProvider>
		<onDidOpenTextDocument public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextDocument"/></t>
			<haxe_doc>* An event that is emitted when a [text document](#TextDocument) is opened or when the  language id
	 * of a text document [has been changed](#languages.setTextDocumentLanguage).
	 *
	 * To add an event listener when a visible text document is opened, use the [TextEditor](#TextEditor) events in the
	 * [window](#window) namespace. Note that:
	 *
	 * - The event is emitted before the [document](#TextDocument) is updated in the
	 * [active text editor](#window.activeTextEditor)
	 * - When a [text document](#TextDocument) is already open (e.g.: open in another [visible text editor](#window.visibleTextEditors)) this event is not emitted
	 *</haxe_doc>
		</onDidOpenTextDocument>
		<onDidCloseTextDocument public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextDocument"/></t>
			<haxe_doc>* An event that is emitted when a [text document](#TextDocument) is disposed or when the language id
	 * of a text document [has been changed](#languages.setTextDocumentLanguage).
	 *
	 * *Note 1:* There is no guarantee that this event fires when an editor tab is closed, use the
	 * [`onDidChangeVisibleTextEditors`](#window.onDidChangeVisibleTextEditors)-event to know when editors change.
	 *
	 * *Note 2:* A document can be open but not shown in an editor which means this event can fire
	 * for a document that has not been shown in an editor.</haxe_doc>
		</onDidCloseTextDocument>
		<onDidChangeTextDocument public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextDocumentChangeEvent"/></t>
			<haxe_doc>* An event that is emitted when a [text document](#TextDocument) is changed. This usually happens
	 * when the [contents](#TextDocument.getText) changes but also when other things like the
	 * [dirty](#TextDocument.isDirty)-state changes.</haxe_doc>
		</onDidChangeTextDocument>
		<onWillSaveTextDocument public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextDocumentWillSaveEvent"/></t>
			<haxe_doc>* An event that is emitted when a [text document](#TextDocument) will be saved to disk.
	 *
	 * *Note 1:* Subscribers can delay saving by registering asynchronous work. For the sake of data integrity the editor
	 * might save without firing this event. For instance when shutting down with dirty files.
	 *
	 * *Note 2:* Subscribers are called sequentially and they can [delay](#TextDocumentWillSaveEvent.waitUntil) saving
	 * by registering asynchronous work. Protection against misbehaving listeners is implemented as such:
	 *  * there is an overall time budget that all listeners share and if that is exhausted no further listener is called
	 *  * listeners that take a long time or produce errors frequently will not be called anymore
	 *
	 * The current thresholds are 1.5 seconds as overall time budget and a listener can misbehave 3 times before being ignored.</haxe_doc>
		</onWillSaveTextDocument>
		<onDidSaveTextDocument public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextDocument"/></t>
			<haxe_doc>* An event that is emitted when a [text document](#TextDocument) is saved to disk.</haxe_doc>
		</onDidSaveTextDocument>
		<onWillCreateFiles public="1" set="null">
			<t path="vscode.Event"><t path="vscode.FileWillCreateEvent"/></t>
			<haxe_doc>* An event that is emitted when files are being created.
	 *
	 * *Note 1:* This event is triggered by user gestures, like creating a file from the
	 * explorer, or from the [`workspace.applyEdit`](#workspace.applyEdit)-api. This event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * [`workspace.fs`](#FileSystem)-api.
	 *
	 * *Note 2:* When this event is fired, edits to files that are are being created cannot be applied.</haxe_doc>
		</onWillCreateFiles>
		<onDidCreateFiles public="1" set="null">
			<t path="vscode.Event"><t path="vscode.FileCreateEvent"/></t>
			<haxe_doc>* An event that is emitted when files have been created.
	 *
	 * *Note:* This event is triggered by user gestures, like creating a file from the
	 * explorer, or from the [`workspace.applyEdit`](#workspace.applyEdit)-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * [`workspace.fs`](#FileSystem)-api.</haxe_doc>
		</onDidCreateFiles>
		<onWillDeleteFiles public="1" set="null">
			<t path="vscode.Event"><t path="vscode.FileWillDeleteEvent"/></t>
			<haxe_doc>* An event that is emitted when files are being deleted.
	 *
	 * *Note 1:* This event is triggered by user gestures, like deleting a file from the
	 * explorer, or from the [`workspace.applyEdit`](#workspace.applyEdit)-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * [`workspace.fs`](#FileSystem)-api.
	 *
	 * *Note 2:* When deleting a folder with children only one event is fired.</haxe_doc>
		</onWillDeleteFiles>
		<onDidDeleteFiles public="1" set="null">
			<t path="vscode.Event"><t path="vscode.FileDeleteEvent"/></t>
			<haxe_doc>* An event that is emitted when files have been deleted.
	 *
	 * *Note 1:* This event is triggered by user gestures, like deleting a file from the
	 * explorer, or from the [`workspace.applyEdit`](#workspace.applyEdit)-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * [`workspace.fs`](#FileSystem)-api.
	 *
	 * *Note 2:* When deleting a folder with children only one event is fired.</haxe_doc>
		</onDidDeleteFiles>
		<onWillRenameFiles public="1" set="null">
			<t path="vscode.Event"><t path="vscode.FileWillRenameEvent"/></t>
			<haxe_doc>* An event that is emitted when files are being renamed.
	 *
	 * *Note 1:* This event is triggered by user gestures, like renaming a file from the
	 * explorer, and from the [`workspace.applyEdit`](#workspace.applyEdit)-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * [`workspace.fs`](#FileSystem)-api.
	 *
	 * *Note 2:* When renaming a folder with children only one event is fired.</haxe_doc>
		</onWillRenameFiles>
		<onDidRenameFiles public="1" set="null">
			<t path="vscode.Event"><t path="vscode.FileRenameEvent"/></t>
			<haxe_doc>* An event that is emitted when files have been renamed.
	 *
	 * *Note 1:* This event is triggered by user gestures, like renaming a file from the
	 * explorer, and from the [`workspace.applyEdit`](#workspace.applyEdit)-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * [`workspace.fs`](#FileSystem)-api.
	 *
	 * *Note 2:* When renaming a folder with children only one event is fired.</haxe_doc>
		</onDidRenameFiles>
		<getConfiguration public="1" set="method">
			<f a="?section:?scope">
				<c path="String"/>
				<t path="vscode.ConfigurationScope"/>
				<t path="vscode.WorkspaceConfiguration"/>
			</f>
			<haxe_doc>* Get a workspace configuration object.
	 *
	 * When a section-identifier is provided only that part of the configuration
	 * is returned. Dots in the section-identifier are interpreted as child-access,
	 * like `{ myExt: { setting: { doIt: true }}}` and `getConfiguration('myExt.setting').get('doIt') === true`.
	 *
	 * When a scope is provided configuration confined to that scope is returned. Scope can be a resource or a language identifier or both.
	 *
	 * @param section A dot-separated identifier.
	 * @param scope A scope for which the configuration is asked for.
	 * @return The full configuration or a subset.</haxe_doc>
		</getConfiguration>
		<onDidChangeConfiguration public="1" set="null">
			<t path="vscode.Event"><t path="vscode.ConfigurationChangeEvent"/></t>
			<haxe_doc>* An event that is emitted when the [configuration](#WorkspaceConfiguration) changed.</haxe_doc>
		</onDidChangeConfiguration>
		<registerTaskProvider public="1" params="T" set="method">
			<f a="type:provider">
				<c path="String"/>
				<t path="vscode.TaskProvider"><c path="registerTaskProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<meta><m n=":deprecated"><e>"Use the corresponding function on the `tasks` namespace instead"</e></m></meta>
			<haxe_doc>* Register a task provider.
	 *
	 * @deprecated Use the corresponding function on the `tasks` namespace instead
	 *
	 * @param type The task kind type this provider is registered for.
	 * @param provider A task provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerTaskProvider>
		<registerFileSystemProvider public="1" set="method">
			<f a="scheme:provider:options">
				<c path="String"/>
				<t path="vscode.FileSystemProvider"/>
				<a>
					<isReadonly set="null">
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</isReadonly>
					<isCaseSensitive set="null">
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</isCaseSensitive>
				</a>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a filesystem provider for a given scheme, e.g. `ftp`.
	 *
	 * There can only be one provider per scheme and an error is being thrown when a scheme
	 * has been claimed by another provider or when it is reserved.
	 *
	 * @param scheme The uri-[scheme](#Uri.scheme) the provider registers for.
	 * @param provider The filesystem provider.
	 * @param options Immutable metadata about the provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerFileSystemProvider>
	</class>
	<class path="VscodeDebug" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<activeDebugSession public="1">
			<x path="Null"><t path="vscode.DebugSession"/></x>
			<haxe_doc>* The currently active [debug session](#DebugSession) or `undefined`. The active debug session is the one
	 * represented by the debug action floating window or the one currently shown in the drop down menu of the debug action floating window.
	 * If no debug session is active, the value is `undefined`.</haxe_doc>
		</activeDebugSession>
		<activeDebugConsole public="1">
			<t path="vscode.DebugConsole"/>
			<haxe_doc>* The currently active [debug console](#DebugConsole).
	 * If no debug session is active, output sent to the debug console is not shown.</haxe_doc>
		</activeDebugConsole>
		<breakpoints public="1">
			<c path="Array"><c path="vscode.Breakpoint"/></c>
			<haxe_doc>* List of breakpoints.</haxe_doc>
		</breakpoints>
		<onDidChangeActiveDebugSession public="1" set="null">
			<t path="vscode.Event"><x path="Null"><t path="vscode.DebugSession"/></x></t>
			<haxe_doc>* An [event](#Event) which fires when the [active debug session](#debug.activeDebugSession)
	 * has changed. *Note* that the event also fires when the active debug session changes
	 * to `undefined`.</haxe_doc>
		</onDidChangeActiveDebugSession>
		<onDidStartDebugSession public="1" set="null">
			<t path="vscode.Event"><t path="vscode.DebugSession"/></t>
			<haxe_doc>* An [event](#Event) which fires when a new [debug session](#DebugSession) has been started.</haxe_doc>
		</onDidStartDebugSession>
		<onDidReceiveDebugSessionCustomEvent public="1" set="null">
			<t path="vscode.Event"><t path="vscode.DebugSessionCustomEvent"/></t>
			<haxe_doc>* An [event](#Event) which fires when a custom DAP event is received from the [debug session](#DebugSession).</haxe_doc>
		</onDidReceiveDebugSessionCustomEvent>
		<onDidTerminateDebugSession public="1" set="null">
			<t path="vscode.Event"><t path="vscode.DebugSession"/></t>
			<haxe_doc>* An [event](#Event) which fires when a [debug session](#DebugSession) has terminated.</haxe_doc>
		</onDidTerminateDebugSession>
		<onDidChangeBreakpoints public="1" set="null">
			<t path="vscode.Event"><t path="vscode.BreakpointsChangeEvent"/></t>
			<haxe_doc>* An [event](#Event) that is emitted when the set of breakpoints is added, removed, or changed.</haxe_doc>
		</onDidChangeBreakpoints>
		<registerDebugConfigurationProvider public="1" set="method">
			<f a="debugType:provider:?triggerKind">
				<c path="String"/>
				<t path="vscode.DebugConfigurationProvider"/>
				<x path="vscode.DebugConfigurationProviderTriggerKind"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a [debug configuration provider](#DebugConfigurationProvider) for a specific debug type.
	 * The optional [triggerKind](#DebugConfigurationProviderTriggerKind) can be used to specify when the `provideDebugConfigurations` method of the provider is triggered.
	 * Currently two trigger kinds are possible: with the value `Initial` (or if no trigger kind argument is given) the `provideDebugConfigurations` method is used to provide the initial debug configurations to be copied into a newly created launch.json.
	 * With the trigger kind `Dynamic` the `provideDebugConfigurations` method is used to dynamically determine debug configurations to be presented to the user (in addition to the static configurations from the launch.json).
	 * Please note that the `triggerKind` argument only applies to the `provideDebugConfigurations` method: so the `resolveDebugConfiguration` methods are not affected at all.
	 * Registering a single provider with resolve methods for different trigger kinds, results in the same resolve methods called multiple times.
	 * More than one provider can be registered for the same type.
	 *
	 * @param type The debug type for which the provider is registered.
	 * @param provider The [debug configuration provider](#DebugConfigurationProvider) to register.
	 * @param triggerKind The [trigger](#DebugConfigurationProviderTrigger) for which the 'provideDebugConfiguration' method of the provider is registered. If `triggerKind` is missing, the value `DebugConfigurationProviderTriggerKind.Initial` is assumed.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerDebugConfigurationProvider>
		<registerDebugAdapterDescriptorFactory public="1" set="method">
			<f a="debugType:factory">
				<c path="String"/>
				<t path="vscode.DebugAdapterDescriptorFactory"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a [debug adapter descriptor factory](#DebugAdapterDescriptorFactory) for a specific debug type.
	 * An extension is only allowed to register a DebugAdapterDescriptorFactory for the debug type(s) defined by the extension. Otherwise an error is thrown.
	 * Registering more than one DebugAdapterDescriptorFactory for a debug type results in an error.
	 *
	 * @param debugType The debug type for which the factory is registered.
	 * @param factory The [debug adapter descriptor factory](#DebugAdapterDescriptorFactory) to register.
	 * @return A [disposable](#Disposable) that unregisters this factory when being disposed.</haxe_doc>
		</registerDebugAdapterDescriptorFactory>
		<registerDebugAdapterTrackerFactory public="1" set="method">
			<f a="debugType:factory">
				<c path="String"/>
				<t path="vscode.DebugAdapterTrackerFactory"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a debug adapter tracker factory for the given debug type.
	 *
	 * @param debugType The debug type for which the factory is registered or '*' for matching all debug types.
	 * @param factory The [debug adapter tracker factory](#DebugAdapterTrackerFactory) to register.
	 * @return A [disposable](#Disposable) that unregisters this factory when being disposed.</haxe_doc>
		</registerDebugAdapterTrackerFactory>
		<startDebugging public="1" set="method">
			<f a="folder:nameOrConfiguration:?parentSessionOrOptions">
				<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="vscode.DebugConfiguration"/>
				</x>
				<x path="haxe.extern.EitherType">
					<t path="vscode.DebugSession"/>
					<t path="vscode.DebugSessionOptions"/>
				</x>
				<x path="js.lib.Thenable"><x path="Bool"/></x>
			</f>
			<haxe_doc>* Start debugging by using either a named launch or named compound configuration,
	 * or by directly passing a [DebugConfiguration](#DebugConfiguration).
	 * The named configurations are looked up in '.vscode/launch.json' found in the given folder.
	 * Before debugging starts, all unsaved files are saved and the launch configurations are brought up-to-date.
	 * Folder specific variables used in the configuration (e.g. '${workspaceFolder}') are resolved against the given folder.
	 * @param folder The [workspace folder](#WorkspaceFolder) for looking up named configurations and resolving variables or `undefined` for a non-folder setup.
	 * @param nameOrConfiguration Either the name of a debug or compound configuration or a [DebugConfiguration](#DebugConfiguration) object.
	 * @param parentSessionOrOptions Debug session options. When passed a parent [debug session](#DebugSession), assumes options with just this parent session.
	 * @return A thenable that resolves when debugging could be successfully started.</haxe_doc>
		</startDebugging>
		<stopDebugging public="1" set="method">
			<f a="?session">
				<t path="vscode.DebugSession"/>
				<x path="js.lib.Thenable"><x path="Void"/></x>
			</f>
			<haxe_doc>* Stop the given debug session or stop all debug sessions if session is omitted.
	 * @param session The [debug session](#DebugSession) to stop; if omitted all sessions are stopped.</haxe_doc>
		</stopDebugging>
		<addBreakpoints public="1" set="method">
			<f a="breakpoints">
				<c path="Array"><c path="vscode.Breakpoint"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add breakpoints.
	 * @param breakpoints The breakpoints to add.</haxe_doc>
		</addBreakpoints>
		<removeBreakpoints public="1" set="method">
			<f a="breakpoints">
				<c path="Array"><c path="vscode.Breakpoint"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Remove breakpoints.
	 * @param breakpoints The breakpoints to remove.</haxe_doc>
		</removeBreakpoints>
		<asDebugSourceUri public="1" set="method">
			<f a="source:?session">
				<t path="vscode.DebugProtocolSource"/>
				<t path="vscode.DebugSession"/>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Converts a "Source" descriptor object received via the Debug Adapter Protocol into a Uri that can be used to load its contents.
	 * If the source descriptor is based on a path, a file Uri is returned.
	 * If the source descriptor uses a reference number, a specific debug Uri (scheme 'debug') is constructed that requires a corresponding VS Code ContentProvider and a running debug session
	 *
	 * If the "Source" descriptor has insufficient information for creating the Uri, an error is thrown.
	 *
	 * @param source An object conforming to the [Source](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Source) type defined in the Debug Adapter Protocol.
	 * @param session An optional debug session that will be used when the source descriptor uses a reference number to load the contents from an active debug session.
	 * @return A uri that can be used to load the contents of the source.</haxe_doc>
		</asDebugSourceUri>
	</class>
	<abstract path="VscodeLanguagesGetDiagnosticsReturn" params="" file="src/Vscode.hx" module="Vscode">
		<this><c path="Array"><d/></c></this>
		<haxe_doc>Return value type for `VscodeLanguages.getDiagnostics`.</haxe_doc>
		<meta><m n=":dce"/></meta>
		<impl><class path="_Vscode.VscodeLanguagesGetDiagnosticsReturn_Impl_" params="" file="src/Vscode.hx" private="1" module="Vscode">
	<uri public="1" get="accessor" set="null" static="1">
		<c path="vscode.Uri"/>
		<meta><m n=":impl"/></meta>
	</uri>
	<diagnostics public="1" get="accessor" set="null" static="1">
		<c path="Array"><c path="vscode.Diagnostic"/></c>
		<meta><m n=":impl"/></meta>
	</diagnostics>
	<meta>
		<m n=":keep"/>
		<m n=":dce"/>
		<m n=":dce"/>
	</meta>
</class></impl>
	</abstract>
	<class path="VscodeTasks" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<registerTaskProvider public="1" params="T" set="method">
			<f a="type:provider">
				<c path="String"/>
				<t path="vscode.TaskProvider"><c path="registerTaskProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a task provider.
	 *
	 * @param type The task kind type this provider is registered for.
	 * @param provider A task provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerTaskProvider>
		<fetchTasks public="1" set="method">
			<f a="?filter">
				<t path="vscode.TaskFilter"/>
				<x path="js.lib.Thenable"><c path="Array"><c path="vscode.Task"/></c></x>
			</f>
			<haxe_doc>* Fetches all tasks available in the systems. This includes tasks
	 * from `tasks.json` files as well as tasks from task providers
	 * contributed through extensions.
	 *
	 * @param filter Optional filter to select tasks of a certain type or version.</haxe_doc>
		</fetchTasks>
		<executeTask public="1" set="method">
			<f a="task">
				<c path="vscode.Task"/>
				<x path="js.lib.Thenable"><t path="vscode.TaskExecution"/></x>
			</f>
			<haxe_doc>* Executes a task that is managed by VS Code. The returned
	 * task execution can be used to terminate the task.
	 *
	 * @throws When running a ShellExecution or a ProcessExecution
	 * task in an environment where a new process cannot be started.
	 * In such an environment, only CustomExecution tasks can be run.
	 *
	 * @param task the task to execute</haxe_doc>
		</executeTask>
		<taskExecutions public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TaskExecution"/></x>
			<haxe_doc>* The currently active task executions or an empty array.</haxe_doc>
		</taskExecutions>
		<onDidStartTask public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TaskStartEvent"/></t>
			<haxe_doc>* Fires when a task starts.</haxe_doc>
		</onDidStartTask>
		<onDidEndTask public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TaskEndEvent"/></t>
			<haxe_doc>* Fires when a task ends.</haxe_doc>
		</onDidEndTask>
		<onDidStartTaskProcess public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TaskProcessStartEvent"/></t>
			<haxe_doc>* Fires when the underlying process has been started.
	 * This event will not fire for tasks that don't
	 * execute an underlying process.</haxe_doc>
		</onDidStartTaskProcess>
		<onDidEndTaskProcess public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TaskProcessEndEvent"/></t>
			<haxe_doc>* Fires when the underlying process has ended.
	 * This event will not fire for tasks that don't
	 * execute an underlying process.</haxe_doc>
		</onDidEndTaskProcess>
	</class>
	<class path="VscodeComments" params="" file="src/Vscode.hx" module="Vscode" extern="1"><createCommentController public="1" set="method">
	<f a="id:label">
		<c path="String"/>
		<c path="String"/>
		<t path="vscode.CommentController"/>
	</f>
	<haxe_doc>* Creates a new [comment controller](#CommentController) instance.
	 *
	 * @param id An `id` for the comment controller.
	 * @param label A human-readable string for the comment controller.
	 * @return An instance of [comment controller](#CommentController).</haxe_doc>
</createCommentController></class>
	<class path="VscodeAuthentication" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<getSession public="1" set="method">
			<f a="providerId:scopes:options">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<a>
					<createIfNone>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>* Whether login should be performed if there is no matching session.
	 *
	 * If true, a modal dialog will be shown asking the user to sign in. If false, a numbered badge will be shown
	 * on the accounts activity bar icon. An entry for the extension will be added under the menu to sign in. This
	 * allows quietly prompting the user to sign in.
	 *
	 * If there is a matching session but the extension has not been granted access to it, setting this to true
	 * will also result in an immediate modal dialog, and false will add a numbered badge to the accounts icon.
	 *
	 * Defaults to false.</haxe_doc>
					</createIfNone>
					<clearSessionPreference>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>* Whether the existing user session preference should be cleared.
	 *
	 * For authentication providers that support being signed into multiple accounts at once, the user will be
	 * prompted to select an account to use when [getSession](#authentication.getSession) is called. This preference
	 * is remembered until [getSession](#authentication.getSession) is called with this flag.
	 *
	 * Defaults to false.</haxe_doc>
					</clearSessionPreference>
				</a>
				<x path="js.lib.Thenable"><t path="vscode.AuthenticationSession"/></x>
			</f>
			<haxe_doc>* Get an authentication session matching the desired scopes. Rejects if a provider with providerId is not
	 * registered, or if the user does not consent to sharing authentication information with
	 * the extension. If there are multiple sessions with the same scopes, the user will be shown a
	 * quickpick to select which account they would like to use.
	 *
	 * Currently, there are only two authentication providers that are contributed from built in extensions
	 * to VS Code that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.
	 * @param providerId The id of the provider to use
	 * @param scopes A list of scopes representing the permissions requested. These are dependent on the authentication provider
	 * @param options The [getSessionOptions](#GetSessionOptions) to use
	 * @returns A thenable that resolves to an authentication session</haxe_doc>
			<overloads><getSession public="1" set="method">
	<f a="providerId:scopes:?options">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<t path="vscode.AuthenticationGetSessionOptions"/>
		<x path="js.lib.Thenable"><x path="Null"><t path="vscode.AuthenticationSession"/></x></x>
	</f>
	<haxe_doc>* Get an authentication session matching the desired scopes. Rejects if a provider with providerId is not
	 * registered, or if the user does not consent to sharing authentication information with
	 * the extension. If there are multiple sessions with the same scopes, the user will be shown a
	 * quickpick to select which account they would like to use.
	 *
	 * Currently, there are only two authentication providers that are contributed from built in extensions
	 * to VS Code that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.
	 * @param providerId The id of the provider to use
	 * @param scopes A list of scopes representing the permissions requested. These are dependent on the authentication provider
	 * @param options The [getSessionOptions](#GetSessionOptions) to use
	 * @returns A thenable that resolves to an authentication session</haxe_doc>
</getSession></overloads>
		</getSession>
		<onDidChangeSessions public="1" set="null">
			<t path="vscode.Event"><t path="vscode.AuthenticationSessionsChangeEvent"/></t>
			<haxe_doc>* An [event](#Event) which fires when the authentication sessions of an authentication provider have
	 * been added, removed, or changed.</haxe_doc>
		</onDidChangeSessions>
		<registerAuthenticationProvider public="1" set="method">
			<f a="id:label:provider:?options">
				<c path="String"/>
				<c path="String"/>
				<t path="vscode.AuthenticationProvider"/>
				<t path="vscode.AuthenticationProviderOptions"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register an authentication provider.
	 *
	 * There can only be one provider per id and an error is being thrown when an id
	 * has already been used by another provider. Ids are case-sensitive.
	 *
	 * @param id The unique identifier of the provider.
	 * @param label The human-readable name of the provider.
	 * @param provider The authentication provider provider.
	 * @params options Additional options for the provider.
	 * @return A [disposable](#Disposable) that unregisters this provider when being disposed.</haxe_doc>
		</registerAuthenticationProvider>
	</class>
	<class path="VscodeProposed" params="" file="src/VscodeProposed.hx" extern="1"><meta><m n=":jsRequire"><e>"vscode"</e></m></meta></class>
	<abstract path="haxe.Function" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.Rest" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Error" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<class path="js.lib.Object" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<x path="haxe.extern.Rest"><a/></x>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Object"</e></m></meta>
	</class>
	<class path="js.lib.ArrayBuffer" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.lib.ArrayBufferView" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8Array"</e></m></meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float32Array"</e></m></meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Int16Array" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Object.hx" private="1" module="js.lib.Object">
	<key public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
	</key>
	<value public="1" get="accessor" set="null" static="1">
		<x path="Any"/>
		<meta><m n=":impl"/></meta>
	</value>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="js.lib.Promise" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><c path="Array"><d/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
		</all>
		<race public="1" set="method" static="1">
			<f a="iterable">
				<c path="Array"><d/></c>
				<c path="js.lib.Promise"><d/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" params="TOut" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="catchError.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="catchError.TOut"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
		</catchError>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Promise.hx" private="1" module="js.lib.Promise"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="js.lib.Thenable" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta><m n=":forward"/></meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Promise.hx" private="1" module="js.lib.Promise"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="js.lib.ThenableStruct" params="T" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<class path="js.lib.RegExpMatch" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1"><x path="Int"/></index>
		<input public="1"><c path="String"/></input>
	</class>
	<class path="js.lib.Symbol" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="61">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint16Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint32Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.intl.NumberFormat" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<t path="js.lib.intl.NumberFormatOptions"/>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<t path="js.lib.intl.NumberFormatOptions"/>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/opt/hostedtoolcache/haxe/4.0.5/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<typedef path="vscode.AccessibilityInformation" params="" file="src/vscode/AccessibilityInformation.hx">
		<a>
			<role>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Role of the widget which defines how a screen reader interacts with it.
	 * The role should be set in special cases when for example a tree-like element behaves like a checkbox.
	 * If role is not specified VS Code will pick the appropriate role automatically.
	 * More about aria roles can be found here https://w3c.github.io/aria/#widget_roles</haxe_doc>
			</role>
			<label>
				<c path="String"/>
				<haxe_doc>* Label to be read out by a screen reader once the item has focus.</haxe_doc>
			</label>
		</a>
		<haxe_doc>* Accessibility information which controls screen reader behavior.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationGetSessionOptions" params="" file="src/vscode/AuthenticationGetSessionOptions.hx">
		<a>
			<createIfNone>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether login should be performed if there is no matching session.
	 *
	 * If true, a modal dialog will be shown asking the user to sign in. If false, a numbered badge will be shown
	 * on the accounts activity bar icon. An entry for the extension will be added under the menu to sign in. This
	 * allows quietly prompting the user to sign in.
	 *
	 * If there is a matching session but the extension has not been granted access to it, setting this to true
	 * will also result in an immediate modal dialog, and false will add a numbered badge to the accounts icon.
	 *
	 * Defaults to false.</haxe_doc>
			</createIfNone>
			<clearSessionPreference>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the existing user session preference should be cleared.
	 *
	 * For authentication providers that support being signed into multiple accounts at once, the user will be
	 * prompted to select an account to use when [getSession](#authentication.getSession) is called. This preference
	 * is remembered until [getSession](#authentication.getSession) is called with this flag.
	 *
	 * Defaults to false.</haxe_doc>
			</clearSessionPreference>
		</a>
		<haxe_doc>* Options to be used when getting an [AuthenticationSession](#AuthenticationSession) from an [AuthenticationProvider](#AuthenticationProvider).</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationProvider" params="" file="src/vscode/AuthenticationProvider.hx">
		<a>
			<removeSession set="method">
				<f a="sessionId">
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Removes the session corresponding to session id.
	 *
	 * If the removal is successful, the onDidChangeSessions event should be fired.
	 *
	 * If a session cannot be removed, the provider should reject with an error message.
	 * @param sessionId The id of the session to remove.</haxe_doc>
			</removeSession>
			<onDidChangeSessions set="null">
				<t path="vscode.Event"><t path="vscode.AuthenticationProviderAuthenticationSessionsChangeEvent"/></t>
				<haxe_doc>* An [event](#Event) which fires when the array of sessions has changed, or data
	 * within a session has changed.</haxe_doc>
			</onDidChangeSessions>
			<getSessions set="method">
				<f a="?scopes">
					<c path="Array"><c path="String"/></c>
					<x path="js.lib.Thenable"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.AuthenticationSession"/></x></x>
				</f>
				<haxe_doc>* Get a list of sessions.
	 * @param scopes An optional list of scopes. If provided, the sessions returned should match
	 * these permissions, otherwise all sessions should be returned.
	 * @returns A promise that resolves to an array of authentication sessions.</haxe_doc>
			</getSessions>
			<createSession set="method">
				<f a="scopes">
					<c path="Array"><c path="String"/></c>
					<x path="js.lib.Thenable"><t path="vscode.AuthenticationSession"/></x>
				</f>
				<haxe_doc>* Prompts a user to login.
	 *
	 * If login is successful, the onDidChangeSessions event should be fired.
	 *
	 * If login fails, a rejected promise should be returned.
	 *
	 * If the provider has specified that it does not support multiple accounts,
	 * then this should never be called if there is already an existing session matching these
	 * scopes.
	 * @param scopes A list of scopes, permissions, that the new session should be created with.
	 * @returns A promise that resolves to an authentication session.</haxe_doc>
			</createSession>
		</a>
		<haxe_doc>* A provider for performing authentication to a service.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationProviderAuthenticationSessionsChangeEvent" params="" file="src/vscode/AuthenticationProviderAuthenticationSessionsChangeEvent.hx">
		<a>
			<removed>
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.AuthenticationSession"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The [AuthenticationSession](#AuthenticationSession)s of the [AuthenticationProvider](#AuthentiationProvider) that have been removed.</haxe_doc>
			</removed>
			<changed>
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.AuthenticationSession"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The [AuthenticationSession](#AuthenticationSession)s of the [AuthenticationProvider](#AuthentiationProvider) that have been changed.
	 * A session changes when its data excluding the id are updated. An example of this is a session refresh that results in a new
	 * access token being set for the session.</haxe_doc>
			</changed>
			<added>
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.AuthenticationSession"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The [AuthenticationSession](#AuthenticationSession)s of the [AuthenticationProvider](#AuthentiationProvider) that have been added.</haxe_doc>
			</added>
		</a>
		<haxe_doc>* An [event](#Event) which fires when an [AuthenticationSession](#AuthenticationSession) is added, removed, or changed.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationProviderInformation" params="" file="src/vscode/AuthenticationProviderInformation.hx">
		<a>
			<label final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable name of the authentication provider.</haxe_doc>
			</label>
			<id final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The unique identifier of the authentication provider.</haxe_doc>
			</id>
		</a>
		<haxe_doc>* Basic information about an [authenticationProvider](#AuthenticationProvider)</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationProviderOptions" params="" file="src/vscode/AuthenticationProviderOptions.hx">
		<a><supportsMultipleAccounts set="null">
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Whether it is possible to be signed into multiple accounts at once with this provider.
	 * If not specified, will default to false.</haxe_doc>
</supportsMultipleAccounts></a>
		<haxe_doc>* Options for creating an [AuthenticationProvider](#AuthenticationProvider).</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationSession" params="" file="src/vscode/AuthenticationSession.hx">
		<a>
			<scopes final="1" set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<haxe_doc>* The permissions granted by the session's access token. Available scopes
	 * are defined by the [AuthenticationProvider](#AuthenticationProvider).</haxe_doc>
			</scopes>
			<id final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The identifier of the authentication session.</haxe_doc>
			</id>
			<account final="1" set="null">
				<t path="vscode.AuthenticationSessionAccountInformation"/>
				<haxe_doc>* The account associated with the session.</haxe_doc>
			</account>
			<accessToken final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The access token.</haxe_doc>
			</accessToken>
		</a>
		<haxe_doc>* Represents a session of a currently logged in user.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationSessionAccountInformation" params="" file="src/vscode/AuthenticationSessionAccountInformation.hx">
		<a>
			<label final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable name of the account.</haxe_doc>
			</label>
			<id final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The unique identifier of the account.</haxe_doc>
			</id>
		</a>
		<haxe_doc>* The information of an account associated with an [AuthenticationSession](#AuthenticationSession).</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationSessionsChangeEvent" params="" file="src/vscode/AuthenticationSessionsChangeEvent.hx">
		<a><provider final="1" set="null">
	<t path="vscode.AuthenticationProviderInformation"/>
	<haxe_doc>* The [authenticationProvider](#AuthenticationProvider) that has had its sessions change.</haxe_doc>
</provider></a>
		<haxe_doc>* An [event](#Event) which fires when an [AuthenticationSession](#AuthenticationSession) is added, removed, or changed.</haxe_doc>
	</typedef>
	<class path="vscode.Breakpoint" params="" file="src/vscode/Breakpoint.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The unique ID of the breakpoint.</haxe_doc>
		</id>
		<enabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Is breakpoint enabled.</haxe_doc>
		</enabled>
		<condition public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* An optional expression for conditional breakpoints.</haxe_doc>
		</condition>
		<hitCondition public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* An optional expression that controls how many hits of the breakpoint are ignored.</haxe_doc>
		</hitCondition>
		<logMessage public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* An optional message that gets logged when this breakpoint is hit. Embedded expressions within {} are interpolated by the debug adapter.</haxe_doc>
		</logMessage>
		<new set="method"><f a="?enabled:?condition:?hitCondition:?logMessage">
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* The base class of all breakpoint types.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Breakpoint"</e>
</m></meta>
	</class>
	<typedef path="vscode.BreakpointsChangeEvent" params="" file="src/vscode/BreakpointsChangeEvent.hx">
		<a>
			<removed set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Breakpoint"/></x>
				<haxe_doc>* Removed breakpoints.</haxe_doc>
			</removed>
			<changed set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Breakpoint"/></x>
				<haxe_doc>* Changed breakpoints.</haxe_doc>
			</changed>
			<added set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Breakpoint"/></x>
				<haxe_doc>* Added breakpoints.</haxe_doc>
			</added>
		</a>
		<haxe_doc>* An event describing the changes to the set of [breakpoints](#Breakpoint).</haxe_doc>
	</typedef>
	<class path="vscode.CallHierarchyIncomingCall" params="" file="src/vscode/CallHierarchyIncomingCall.hx" extern="1">
		<from public="1">
			<c path="vscode.CallHierarchyItem"/>
			<haxe_doc>* The item that makes the call.</haxe_doc>
		</from>
		<fromRanges public="1">
			<c path="Array"><c path="vscode.Range"/></c>
			<haxe_doc>* The range at which at which the calls appears. This is relative to the caller
	 * denoted by [`this.from`](#CallHierarchyIncomingCall.from).</haxe_doc>
		</fromRanges>
		<new public="1" set="method">
			<f a="item:fromRanges">
				<c path="vscode.CallHierarchyItem"/>
				<c path="Array"><c path="vscode.Range"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new call object.
	 *
	 * @param item The item making the call.
	 * @param fromRanges The ranges at which the calls appear.</haxe_doc>
		</new>
		<haxe_doc>* Represents an incoming call, e.g. a caller of a method or constructor.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CallHierarchyIncomingCall"</e>
</m></meta>
	</class>
	<class path="vscode.CallHierarchyItem" params="" file="src/vscode/CallHierarchyItem.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The name of this item.</haxe_doc>
		</name>
		<kind public="1">
			<x path="vscode.SymbolKind"/>
			<haxe_doc>* The kind of this item.</haxe_doc>
		</kind>
		<tags public="1">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><x path="vscode.SymbolTag"/></x></x>
			<haxe_doc>* Tags for this item.</haxe_doc>
		</tags>
		<detail public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* More detail for this item, e.g. the signature of a function.</haxe_doc>
		</detail>
		<uri public="1">
			<c path="vscode.Uri"/>
			<haxe_doc>* The resource identifier of this item.</haxe_doc>
		</uri>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.</haxe_doc>
		</range>
		<selectionRange public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range that should be selected and revealed when this symbol is being picked, e.g. the name of a function.
	 * Must be contained by the [`range`](#CallHierarchyItem.range).</haxe_doc>
		</selectionRange>
		<new public="1" set="method">
			<f a="kind:name:detail:uri:range:selectionRange">
				<x path="vscode.SymbolKind"/>
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.Uri"/>
				<c path="vscode.Range"/>
				<c path="vscode.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new call hierarchy item.</haxe_doc>
		</new>
		<haxe_doc>* Represents programming constructs like functions or constructors in the context
 * of call hierarchy.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CallHierarchyItem"</e>
</m></meta>
	</class>
	<class path="vscode.CallHierarchyOutgoingCall" params="" file="src/vscode/CallHierarchyOutgoingCall.hx" extern="1">
		<to public="1">
			<c path="vscode.CallHierarchyItem"/>
			<haxe_doc>* The item that is called.</haxe_doc>
		</to>
		<fromRanges public="1">
			<c path="Array"><c path="vscode.Range"/></c>
			<haxe_doc>* The range at which this item is called. This is the range relative to the caller, e.g the item
	 * passed to [`provideCallHierarchyOutgoingCalls`](#CallHierarchyProvider.provideCallHierarchyOutgoingCalls)
	 * and not [`this.to`](#CallHierarchyOutgoingCall.to).</haxe_doc>
		</fromRanges>
		<new public="1" set="method">
			<f a="item:fromRanges">
				<c path="vscode.CallHierarchyItem"/>
				<c path="Array"><c path="vscode.Range"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new call object.
	 *
	 * @param item The item being called
	 * @param fromRanges The ranges at which the calls appear.</haxe_doc>
		</new>
		<haxe_doc>* Represents an outgoing call, e.g. calling a getter from a method or a method from a constructor etc.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CallHierarchyOutgoingCall"</e>
</m></meta>
	</class>
	<typedef path="vscode.CallHierarchyProvider" params="" file="src/vscode/CallHierarchyProvider.hx">
		<a>
			<provideCallHierarchyOutgoingCalls set="method">
				<f a="item:token">
					<c path="vscode.CallHierarchyItem"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><x path="Null"><c path="Array"><c path="vscode.CallHierarchyOutgoingCall"/></c></x></t>
				</f>
				<haxe_doc>* Provide all outgoing calls for an item, e.g call calls to functions, methods, or constructors from the given item. In
	 * graph terms this describes directed and annotated edges inside the call graph, e.g the given item is the starting
	 * node and the result is the nodes that can be reached.
	 *
	 * @param item The hierarchy item for which outgoing calls should be computed.
	 * @param token A cancellation token.
	 * @returns A set of outgoing calls or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideCallHierarchyOutgoingCalls>
			<provideCallHierarchyIncomingCalls set="method">
				<f a="item:token">
					<c path="vscode.CallHierarchyItem"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><x path="Null"><c path="Array"><c path="vscode.CallHierarchyIncomingCall"/></c></x></t>
				</f>
				<haxe_doc>* Provide all incoming calls for an item, e.g all callers for a method. In graph terms this describes directed
	 * and annotated edges inside the call graph, e.g the given item is the starting node and the result is the nodes
	 * that can be reached.
	 *
	 * @param item The hierarchy item for which incoming calls should be computed.
	 * @param token A cancellation token.
	 * @returns A set of incoming calls or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideCallHierarchyIncomingCalls>
			<prepareCallHierarchy set="method">
				<f a="document:position:token">
					<t path="vscode.TextDocument"/>
					<c path="vscode.Position"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.CallHierarchyItem"/>
	<c path="Array"><c path="vscode.CallHierarchyItem"/></c>
</x></x></t>
				</f>
				<haxe_doc>* Bootstraps call hierarchy by returning the item that is denoted by the given document
	 * and position. This item will be used as entry into the call graph. Providers should
	 * return `undefined` or `null` when there is no item at the given location.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns A call hierarchy item or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</prepareCallHierarchy>
		</a>
		<haxe_doc>* The call hierarchy provider interface describes the contract between extensions
 * and the call hierarchy feature which allows to browse calls and caller of function,
 * methods, constructor etc.</haxe_doc>
	</typedef>
	<class path="vscode.CancellationError" params="" file="src/vscode/CancellationError.hx" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a new cancellation error.</haxe_doc>
		</new>
		<haxe_doc>* An error type that should be used to signal cancellation of an operation.
 *
 * This type can be used in response to a [cancellation token](#CancellationToken)
 * being cancelled or when an operation is being cancelled by the
 * executor of that operation.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CancellationError"</e>
</m></meta>
	</class>
	<typedef path="vscode.CancellationToken" params="" file="src/vscode/CancellationToken.hx">
		<a>
			<onCancellationRequested>
				<t path="vscode.Event"><x path="Any"/></t>
				<haxe_doc>* An [event](#Event) which fires upon cancellation.</haxe_doc>
			</onCancellationRequested>
			<isCancellationRequested>
				<x path="Bool"/>
				<haxe_doc>* Is `true` when the token has been cancelled, `false` otherwise.</haxe_doc>
			</isCancellationRequested>
		</a>
		<haxe_doc>* A cancellation token is passed to an asynchronous or long running
 * operation to request cancellation, like cancelling a request
 * for completion items because the user continued to type.
 *
 * To get an instance of a `CancellationToken` use a
 * [CancellationTokenSource](#CancellationTokenSource).</haxe_doc>
	</typedef>
	<class path="vscode.CancellationTokenSource" params="" file="src/vscode/CancellationTokenSource.hx" extern="1">
		<token public="1">
			<t path="vscode.CancellationToken"/>
			<haxe_doc>* The cancellation token of this source.</haxe_doc>
		</token>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Signal cancellation on the token.</haxe_doc>
		</cancel>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Dispose object and free resources.</haxe_doc>
		</dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* A cancellation source creates and controls a [cancellation token](#CancellationToken).</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CancellationTokenSource"</e>
</m></meta>
	</class>
	<typedef path="vscode.CharacterPair" params="" file="src/vscode/CharacterPair.hx">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* A tuple of two characters, like a pair of
 * opening and closing brackets.</haxe_doc>
	</typedef>
	<typedef path="vscode.Clipboard" params="" file="src/vscode/Clipboard.hx">
		<a>
			<writeText set="method">
				<f a="value">
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Writes text into the clipboard.
	 * @returns A thenable that resolves when writing happened.</haxe_doc>
			</writeText>
			<readText set="method">
				<f a=""><x path="js.lib.Thenable"><c path="String"/></x></f>
				<haxe_doc>* Read the current clipboard contents as text.
	 * @returns A thenable that resolves to a string.</haxe_doc>
			</readText>
		</a>
		<haxe_doc>* The clipboard provides read and write access to the system's clipboard.</haxe_doc>
	</typedef>
	<class path="vscode.CodeAction" params="" file="src/vscode/CodeAction.hx" extern="1">
		<title public="1">
			<c path="String"/>
			<haxe_doc>* A short, human-readable, title for this code action.</haxe_doc>
		</title>
		<edit public="1">
			<x path="Null"><c path="vscode.WorkspaceEdit"/></x>
			<haxe_doc>* A [workspace edit](#WorkspaceEdit) this code action performs.</haxe_doc>
		</edit>
		<diagnostics public="1">
			<x path="Null"><c path="Array"><c path="vscode.Diagnostic"/></c></x>
			<haxe_doc>* [Diagnostics](#Diagnostic) that this code action resolves.</haxe_doc>
		</diagnostics>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* A [command](#Command) this code action executes.</haxe_doc>
		</command>
		<kind public="1">
			<x path="Null"><c path="vscode.CodeActionKind"/></x>
			<haxe_doc>* [Kind](#CodeActionKind) of the code action.
	 *
	 * Used to filter code actions.</haxe_doc>
		</kind>
		<isPreferred public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Marks this as a preferred action. Preferred actions are used by the `auto fix` command and can be targeted
	 * by keybindings.
	 *
	 * A quick fix should be marked preferred if it properly addresses the underlying error.
	 * A refactoring should be marked preferred if it is the most reasonable choice of actions to take.</haxe_doc>
		</isPreferred>
		<disabled public="1">
			<x path="Null"><a><reason set="null">
	<c path="String"/>
	<haxe_doc>* Human readable description of why the code action is currently disabled.
		 *
		 * This is displayed in the code actions UI.</haxe_doc>
</reason></a></x>
			<haxe_doc>* Marks that the code action cannot currently be applied.
	 *
	 * - Disabled code actions are not shown in automatic [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action)
	 * code action menu.
	 *
	 * - Disabled actions are shown as faded out in the code action menu when the user request a more specific type
	 * of code action, such as refactorings.
	 *
	 * - If the user has a [keybinding](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions)
	 * that auto applies a code action and only a disabled code actions are returned, VS Code will show the user a
	 * message with `reason` in the editor.</haxe_doc>
		</disabled>
		<new public="1" set="method">
			<f a="title:?kind">
				<c path="String"/>
				<c path="vscode.CodeActionKind"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new code action.
	 *
	 * A code action must have at least a [title](#CodeAction.title) and [edits](#CodeAction.edit)
	 * and/or a [command](#CodeAction.command).
	 *
	 * @param title The title of the code action.
	 * @param kind The kind of the code action.</haxe_doc>
		</new>
		<haxe_doc>* A code action represents a change that can be performed in code, e.g. to fix a problem or
 * to refactor code.
 *
 * A CodeAction must set either [`edit`](#CodeAction.edit) and/or a [`command`](#CodeAction.command). If both are supplied, the `edit` is applied first, then the command is executed.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CodeAction"</e>
</m></meta>
	</class>
	<typedef path="vscode.CodeActionContext" params="" file="src/vscode/CodeActionContext.hx">
		<a>
			<only set="null">
				<x path="Null"><c path="vscode.CodeActionKind"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Requested kind of actions to return.
	 *
	 * Actions not of this kind are filtered out before being shown by the [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action).</haxe_doc>
			</only>
			<diagnostics set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Diagnostic"/></x>
				<haxe_doc>* An array of diagnostics.</haxe_doc>
			</diagnostics>
		</a>
		<haxe_doc>* Contains additional diagnostic information about the context in which
 * a [code action](#CodeActionProvider.provideCodeActions) is run.</haxe_doc>
	</typedef>
	<class path="vscode.CodeActionKind" params="" file="src/vscode/CodeActionKind.hx" extern="1">
		<Empty public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Empty kind.</haxe_doc>
		</Empty>
		<QuickFix public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for quickfix actions: `quickfix`.
	 *
	 * Quick fix actions address a problem in the code and are shown in the normal code action context menu.</haxe_doc>
		</QuickFix>
		<Refactor public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for refactoring actions: `refactor`
	 *
	 * Refactoring actions are shown in the refactoring context menu.</haxe_doc>
		</Refactor>
		<RefactorExtract public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for refactoring extraction actions: `refactor.extract`
	 *
	 * Example extract actions:
	 *
	 * - Extract method
	 * - Extract function
	 * - Extract variable
	 * - Extract interface from class
	 * - ...</haxe_doc>
		</RefactorExtract>
		<RefactorInline public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for refactoring inline actions: `refactor.inline`
	 *
	 * Example inline actions:
	 *
	 * - Inline function
	 * - Inline variable
	 * - Inline constant
	 * - ...</haxe_doc>
		</RefactorInline>
		<RefactorRewrite public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for refactoring rewrite actions: `refactor.rewrite`
	 *
	 * Example rewrite actions:
	 *
	 * - Convert JavaScript function to class
	 * - Add or remove parameter
	 * - Encapsulate field
	 * - Make method static
	 * - Move method to base class
	 * - ...</haxe_doc>
		</RefactorRewrite>
		<Source public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for source actions: `source`
	 *
	 * Source code actions apply to the entire file. They must be explicitly requested and will not show in the
	 * normal [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) menu. Source actions
	 * can be run on save using `editor.codeActionsOnSave` and are also shown in the `source` context menu.</haxe_doc>
		</Source>
		<SourceOrganizeImports public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for an organize imports source action: `source.organizeImports`.</haxe_doc>
		</SourceOrganizeImports>
		<SourceFixAll public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for auto-fix source actions: `source.fixAll`.
	 *
	 * Fix all actions automatically fix errors that have a clear fix that do not require user input.
	 * They should not suppress errors or perform unsafe fixes such as generating new types or classes.</haxe_doc>
		</SourceFixAll>
		<value public="1" set="null">
			<c path="String"/>
			<haxe_doc>* String value of the kind, e.g. `"refactor.extract.function"`.</haxe_doc>
		</value>
		<append public="1" set="method">
			<f a="parts">
				<c path="String"/>
				<c path="vscode.CodeActionKind"/>
			</f>
			<haxe_doc>* Create a new kind by appending a more specific selector to the current kind.
	 *
	 * Does not modify the current kind.</haxe_doc>
		</append>
		<intersects public="1" set="method">
			<f a="other">
				<c path="vscode.CodeActionKind"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if this code action kind intersects `other`.
	 *
	 * The kind `"refactor.extract"` for example intersects `refactor`, `"refactor.extract"` and ``"refactor.extract.function"`,
	 * but not `"unicorn.refactor.extract"`, or `"refactor.extractAll"`.
	 *
	 * @param other Kind to check.</haxe_doc>
		</intersects>
		<contains public="1" set="method">
			<f a="other">
				<c path="vscode.CodeActionKind"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if `other` is a sub-kind of this `CodeActionKind`.
	 *
	 * The kind `"refactor.extract"` for example contains `"refactor.extract"` and ``"refactor.extract.function"`,
	 * but not `"unicorn.refactor.extract"`, or `"refactor.extractAll"` or `refactor`.
	 *
	 * @param other Kind to check.</haxe_doc>
		</contains>
		<new set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Kind of a code action.
 *
 * Kinds are a hierarchical list of identifiers separated by `.`, e.g. `"refactor.extract.function"`.
 *
 * Code action kinds are used by VS Code for UI elements such as the refactoring context menu. Users
 * can also trigger code actions with a specific kind with the `editor.action.codeAction` command.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CodeActionKind"</e>
</m></meta>
	</class>
	<typedef path="vscode.CodeActionProvider" params="T" file="src/vscode/CodeActionProvider.hx">
		<a>
			<resolveCodeAction set="method">
				<x path="Null"><f a="codeAction:token">
	<c path="vscode.CodeActionProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.CodeActionProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Given a code action fill in its [`edit`](#CodeAction.edit)-property. Changes to
	 * all other properties, like title, are ignored. A code action that has an edit
	 * will not be resolved.
	 *
	 * *Note* that a code action provider that returns commands, not code actions, cannot successfully
	 * implement this function. Returning commands is deprecated and instead code actions should be
	 * returned.
	 *
	 * @param codeAction A code action.
	 * @param token A cancellation token.
	 * @return The resolved code action or a thenable that resolves to such. It is OK to return the given
	 * `item`. When no result is returned, the given `item` will be used.</haxe_doc>
			</resolveCodeAction>
			<provideCodeActions set="method">
				<f a="document:range:context:token">
					<t path="vscode.TextDocument"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.Range"/>
						<c path="vscode.Selection"/>
					</x>
					<t path="vscode.CodeActionContext"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><x path="haxe.extern.EitherType">
	<t path="vscode.Command"/>
	<c path="vscode.CodeActionProvider.T"/>
</x></c></t>
				</f>
				<haxe_doc>* Provide commands for the given document and range.
	 *
	 * @param document The document in which the command was invoked.
	 * @param range The selector or range for which the command was invoked. This will always be a selection if
	 * there is a currently active editor.
	 * @param context Context carrying additional information.
	 * @param token A cancellation token.
	 *
	 * @return An array of code actions, such as quick fixes or refactorings. The lack of a result can be signaled
	 * by returning `undefined`, `null`, or an empty array.
	 *
	 * We also support returning `Command` for legacy reasons, however all new extensions should return
	 * `CodeAction` object instead.</haxe_doc>
			</provideCodeActions>
		</a>
		<haxe_doc>* The code action interface defines the contract between extensions and
 * the [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.
 *
 * A code action can be any command that is [known](#commands.getCommands) to the system.</haxe_doc>
	</typedef>
	<typedef path="vscode.CodeActionProviderMetadata" params="" file="src/vscode/CodeActionProviderMetadata.hx">
		<a>
			<providedCodeActionKinds final="1" set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.CodeActionKind"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* List of [CodeActionKinds](#CodeActionKind) that a [CodeActionProvider](#CodeActionProvider) may return.
	 *
	 * This list is used to determine if a given `CodeActionProvider` should be invoked or not.
	 * To avoid unnecessary computation, every `CodeActionProvider` should list use `providedCodeActionKinds`. The
	 * list of kinds may either be generic, such as `[CodeActionKind.Refactor]`, or list out every kind provided,
	 * such as `[CodeActionKind.Refactor.Extract.append('function'), CodeActionKind.Refactor.Extract.append('constant'), ...]`.</haxe_doc>
			</providedCodeActionKinds>
			<documentation final="1" set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><a>
	<kind final="1" set="null">
		<c path="vscode.CodeActionKind"/>
		<haxe_doc>* The kind of the code action being documented.
		 *
		 * If the kind is generic, such as `CodeActionKind.Refactor`, the documentation will be shown whenever any
		 * refactorings are returned. If the kind if more specific, such as `CodeActionKind.RefactorExtract`, the
		 * documentation will only be shown when extract refactoring code actions are returned.</haxe_doc>
	</kind>
	<command final="1" set="null">
		<t path="vscode.Command"/>
		<haxe_doc>* Command that displays the documentation to the user.
		 *
		 * This can display the documentation directly in VS Code or open a website using [`env.openExternal`](#env.openExternal);
		 *
		 * The title of this documentation code action is taken from [`Command.title`](#Command.title)</haxe_doc>
	</command>
</a></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Static documentation for a class of code actions.
	 *
	 * Documentation from the provider is shown in the code actions menu if either:
	 *
	 * - Code actions of `kind` are requested by VS Code. In this case, VS Code will show the documentation that
	 *   most closely matches the requested code action kind. For example, if a provider has documentation for
	 *   both `Refactor` and `RefactorExtract`, when the user requests code actions for `RefactorExtract`,
	 *   VS Code will use the documentation for `RefactorExtract` instead of the documentation for `Refactor`.
	 *
	 * - Any code actions of `kind` are returned by the provider.
	 *
	 * At most one documentation entry will be shown per provider.</haxe_doc>
			</documentation>
		</a>
		<haxe_doc>* Metadata about the type of code actions that a [CodeActionProvider](#CodeActionProvider) provides.</haxe_doc>
	</typedef>
	<class path="vscode.CodeLens" params="" file="src/vscode/CodeLens.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range in which this code lens is valid. Should only span a single line.</haxe_doc>
		</range>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* The command this code lens represents.</haxe_doc>
		</command>
		<isResolved public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* `true` when there is a command associated.</haxe_doc>
		</isResolved>
		<new public="1" set="method">
			<f a="range:?command">
				<c path="vscode.Range"/>
				<t path="vscode.Command"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new code lens object.
	 *
	 * @param range The range to which this code lens applies.
	 * @param command The command associated to this code lens.</haxe_doc>
		</new>
		<haxe_doc>* A code lens represents a [command](#Command) that should be shown along with
 * source text, like the number of references, a way to run tests, etc.
 *
 * A code lens is _unresolved_ when no command is associated to it. For performance
 * reasons the creation of a code lens and resolving should be done to two stages.
 *
 * @see [CodeLensProvider.provideCodeLenses](#CodeLensProvider.provideCodeLenses)
 * @see [CodeLensProvider.resolveCodeLens](#CodeLensProvider.resolveCodeLens)</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CodeLens"</e>
</m></meta>
	</class>
	<typedef path="vscode.CodeLensProvider" params="T" file="src/vscode/CodeLensProvider.hx">
		<a>
			<resolveCodeLens set="method">
				<x path="Null"><f a="codeLens:token">
	<c path="vscode.CodeLensProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.CodeLensProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* This function will be called for each visible code lens, usually when scrolling and after
	 * calls to [compute](#CodeLensProvider.provideCodeLenses)-lenses.
	 *
	 * @param codeLens Code lens that must be resolved.
	 * @param token A cancellation token.
	 * @return The given, resolved code lens or thenable that resolves to such.</haxe_doc>
			</resolveCodeLens>
			<provideCodeLenses set="method">
				<f a="document:token">
					<t path="vscode.TextDocument"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.CodeLensProvider.T"/></c></t>
				</f>
				<haxe_doc>* Compute a list of [lenses](#CodeLens). This call should return as fast as possible and if
	 * computing the commands is expensive implementors should only return code lens objects with the
	 * range set and implement [resolve](#CodeLensProvider.resolveCodeLens).
	 *
	 * @param document The document in which the command was invoked.
	 * @param token A cancellation token.
	 * @return An array of code lenses or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideCodeLenses>
			<onDidChangeCodeLenses>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that the code lenses from this provider have changed.</haxe_doc>
			</onDidChangeCodeLenses>
		</a>
		<haxe_doc>* A code lens provider adds [commands](#Command) to source text. The commands will be shown
 * as dedicated horizontal lines in between the source text.</haxe_doc>
	</typedef>
	<class path="vscode.Color" params="" file="src/vscode/Color.hx" extern="1">
		<red public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The red component of this color in the range [0-1].</haxe_doc>
		</red>
		<green public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The green component of this color in the range [0-1].</haxe_doc>
		</green>
		<blue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The blue component of this color in the range [0-1].</haxe_doc>
		</blue>
		<alpha public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The alpha component of this color in the range [0-1].</haxe_doc>
		</alpha>
		<new public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new color instance.
	 *
	 * @param red The red component.
	 * @param green The green component.
	 * @param blue The blue component.
	 * @param alpha The alpha component.</haxe_doc>
		</new>
		<haxe_doc>* Represents a color in RGBA space.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Color"</e>
</m></meta>
	</class>
	<class path="vscode.ColorInformation" params="" file="src/vscode/ColorInformation.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range in the document where this color appears.</haxe_doc>
		</range>
		<color public="1">
			<c path="vscode.Color"/>
			<haxe_doc>* The actual color value for this color range.</haxe_doc>
		</color>
		<new public="1" set="method">
			<f a="range:color">
				<c path="vscode.Range"/>
				<c path="vscode.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new color range.
	 *
	 * @param range The range the color appears in. Must not be empty.
	 * @param color The value of the color.
	 * @param format The format in which this color is currently formatted.</haxe_doc>
		</new>
		<haxe_doc>* Represents a color range from a document.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ColorInformation"</e>
</m></meta>
	</class>
	<class path="vscode.ColorPresentation" params="" file="src/vscode/ColorPresentation.hx" extern="1">
		<label public="1">
			<c path="String"/>
			<haxe_doc>* The label of this color presentation. It will be shown on the color
	 * picker header. By default this is also the text that is inserted when selecting
	 * this color presentation.</haxe_doc>
		</label>
		<textEdit public="1">
			<x path="Null"><c path="vscode.TextEdit"/></x>
			<haxe_doc>* An [edit](#TextEdit) which is applied to a document when selecting
	 * this presentation for the color.  When `falsy` the [label](#ColorPresentation.label)
	 * is used.</haxe_doc>
		</textEdit>
		<additionalTextEdits public="1">
			<x path="Null"><c path="Array"><c path="vscode.TextEdit"/></c></x>
			<haxe_doc>* An optional array of additional [text edits](#TextEdit) that are applied when
	 * selecting this color presentation. Edits must not overlap with the main [edit](#ColorPresentation.textEdit) nor with themselves.</haxe_doc>
		</additionalTextEdits>
		<new public="1" set="method">
			<f a="label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new color presentation.
	 *
	 * @param label The label of this color presentation.</haxe_doc>
		</new>
		<haxe_doc>* A color presentation object describes how a [`color`](#Color) should be represented as text and what
 * edits are required to refer to it from source code.
 *
 * For some languages one color can have multiple presentations, e.g. css can represent the color red with
 * the constant `Red`, the hex-value `#ff0000`, or in rgba and hsla forms. In csharp other representations
 * apply, e.g. `System.Drawing.Color.Red`.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ColorPresentation"</e>
</m></meta>
	</class>
	<typedef path="vscode.ColorTheme" params="" file="src/vscode/ColorTheme.hx">
		<a><kind set="null">
	<x path="vscode.ColorThemeKind"/>
	<haxe_doc>* The kind of this color theme: light, dark or high contrast.</haxe_doc>
</kind></a>
		<haxe_doc>* Represents a color theme.</haxe_doc>
	</typedef>
	<abstract path="vscode.ColorThemeKind" params="" file="src/vscode/ColorThemeKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents a color theme kind.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ColorThemeKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._ColorThemeKind.ColorThemeKind_Impl_" params="" file="src/vscode/ColorThemeKind.hx" private="1" module="vscode.ColorThemeKind" extern="1">
	<Light public="1" set="null" static="1">
		<x path="vscode.ColorThemeKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Light>
	<Dark public="1" set="null" static="1">
		<x path="vscode.ColorThemeKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Dark>
	<HighContrast public="1" set="null" static="1">
		<x path="vscode.ColorThemeKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</HighContrast>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ColorThemeKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ColorThemeKind.ColorThemeKind_Impl_" params="" file="src/vscode/ColorThemeKind.hx" private="1" module="vscode.ColorThemeKind" extern="1">
		<Light public="1" set="null" static="1">
			<x path="vscode.ColorThemeKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Light>
		<Dark public="1" set="null" static="1">
			<x path="vscode.ColorThemeKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Dark>
		<HighContrast public="1" set="null" static="1">
			<x path="vscode.ColorThemeKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</HighContrast>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ColorThemeKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.Command" params="" file="src/vscode/Command.hx">
		<a>
			<tooltip>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A tooltip for the command, when represented in the UI.</haxe_doc>
			</tooltip>
			<title>
				<c path="String"/>
				<haxe_doc>* Title of the command, like `save`.</haxe_doc>
			</title>
			<command>
				<c path="String"/>
				<haxe_doc>* The identifier of the actual command handler.
	 * @see [commands.registerCommand](#commands.registerCommand).</haxe_doc>
			</command>
			<arguments>
				<x path="Null"><c path="Array"><x path="Any"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Arguments that the command handler should be
	 * invoked with.</haxe_doc>
			</arguments>
		</a>
		<haxe_doc>* Represents a reference to a command. Provides a title which
 * will be used to represent a command in the UI and, optionally,
 * an array of arguments which will be passed to the command handler
 * function when invoked.</haxe_doc>
	</typedef>
	<typedef path="vscode.Comment" params="" file="src/vscode/Comment.hx">
		<a>
			<reactions>
				<x path="Null"><c path="Array"><t path="vscode.CommentReaction"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional reactions of the [comment](#Comment)</haxe_doc>
			</reactions>
			<mode>
				<x path="vscode.CommentMode"/>
				<haxe_doc>* [Comment mode](#CommentMode) of the comment</haxe_doc>
			</mode>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional label describing the [Comment](#Comment)
	 * Label will be rendered next to authorName if exists.</haxe_doc>
			</label>
			<contextValue>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Context value of the comment. This can be used to contribute comment specific actions.
	 * For example, a comment is given a context value as `editable`. When contributing actions to `comments/comment/title`
	 * using `menus` extension point, you can specify context value for key `comment` in `when` expression like `comment == editable`.
	 * ```json
	 *	"contributes": {
	 *		"menus": {
	 *			"comments/comment/title": [
	 *				{
	 *					"command": "extension.deleteComment",
	 *					"when": "comment == editable"
	 *				}
	 *			]
	 *		}
	 *	}
	 * ```
	 * This will show action `extension.deleteComment` only for comments with `contextValue` is `editable`.</haxe_doc>
			</contextValue>
			<body>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<haxe_doc>* The human-readable comment body</haxe_doc>
			</body>
			<author>
				<t path="vscode.CommentAuthorInformation"/>
				<haxe_doc>* The [author information](#CommentAuthorInformation) of the comment</haxe_doc>
			</author>
		</a>
		<haxe_doc>* A comment is displayed within the editor or the Comments Panel, depending on how it is provided.</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentAuthorInformation" params="" file="src/vscode/CommentAuthorInformation.hx">
		<a>
			<name>
				<c path="String"/>
				<haxe_doc>* The display name of the author of the comment</haxe_doc>
			</name>
			<iconPath>
				<x path="Null"><c path="vscode.Uri"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The optional icon path for the author</haxe_doc>
			</iconPath>
		</a>
		<haxe_doc>* Author information of a [comment](#Comment)</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentController" params="" file="src/vscode/CommentController.hx">
		<a>
			<reactionHandler>
				<x path="Null"><f a="comment:reaction">
	<t path="vscode.Comment"/>
	<t path="vscode.CommentReaction"/>
	<x path="js.lib.Thenable"><x path="Void"/></x>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional reaction handler for creating and deleting reactions on a [comment](#Comment).</haxe_doc>
			</reactionHandler>
			<options>
				<x path="Null"><t path="vscode.CommentOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Comment controller options</haxe_doc>
			</options>
			<label set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable label of this comment controller.</haxe_doc>
			</label>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The id of this comment controller.</haxe_doc>
			</id>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this comment controller.
	 *
	 * Once disposed, all [comment threads](#CommentThread) created by this comment controller will also be removed from the editor
	 * and Comments Panel.</haxe_doc>
			</dispose>
			<createCommentThread set="method">
				<f a="uri:range:comments">
					<c path="vscode.Uri"/>
					<c path="vscode.Range"/>
					<c path="Array"><t path="vscode.Comment"/></c>
					<t path="vscode.CommentThread"/>
				</f>
				<haxe_doc>* Create a [comment thread](#CommentThread). The comment thread will be displayed in visible text editors (if the resource matches)
	 * and Comments Panel once created.
	 *
	 * @param uri The uri of the document the thread has been created on.
	 * @param range The range the comment thread is located within the document.
	 * @param comments The ordered comments of the thread.</haxe_doc>
			</createCommentThread>
			<commentingRangeProvider>
				<x path="Null"><t path="vscode.CommentingRangeProvider"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional commenting range provider. Provide a list [ranges](#Range) which support commenting to any given resource uri.
	 *
	 * If not provided, users can leave comments in any document opened in the editor.</haxe_doc>
			</commentingRangeProvider>
		</a>
		<haxe_doc>* A comment controller is able to provide [comments](#CommentThread) support to the editor and
 * provide users various ways to interact with comments.</haxe_doc>
	</typedef>
	<abstract path="vscode.CommentMode" params="" file="src/vscode/CommentMode.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Comment mode of a [comment](#Comment)</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentMode"</e>
			</m>
		</meta>
		<impl><class path="vscode._CommentMode.CommentMode_Impl_" params="" file="src/vscode/CommentMode.hx" private="1" module="vscode.CommentMode" extern="1">
	<Editing public="1" set="null" static="1">
		<x path="vscode.CommentMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Displays the comment editor</haxe_doc>
	</Editing>
	<Preview public="1" set="null" static="1">
		<x path="vscode.CommentMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Displays the preview of the comment</haxe_doc>
	</Preview>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CommentMode"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CommentMode.CommentMode_Impl_" params="" file="src/vscode/CommentMode.hx" private="1" module="vscode.CommentMode" extern="1">
		<Editing public="1" set="null" static="1">
			<x path="vscode.CommentMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Displays the comment editor</haxe_doc>
		</Editing>
		<Preview public="1" set="null" static="1">
			<x path="vscode.CommentMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Displays the preview of the comment</haxe_doc>
		</Preview>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentMode"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.CommentOptions" params="" file="src/vscode/CommentOptions.hx">
		<a>
			<prompt>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show on the comment input box when it's collapsed.</haxe_doc>
			</prompt>
			<placeHolder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show as placeholder in the comment input box when it's focused.</haxe_doc>
			</placeHolder>
		</a>
		<haxe_doc>* Represents a [comment controller](#CommentController)'s [options](#CommentController.options).</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentReaction" params="" file="src/vscode/CommentReaction.hx">
		<a>
			<label set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable label for the reaction</haxe_doc>
			</label>
			<iconPath set="null">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<haxe_doc>* Icon for the reaction shown in UI.</haxe_doc>
			</iconPath>
			<count set="null">
				<x path="Int"/>
				<haxe_doc>* The number of users who have reacted to this reaction</haxe_doc>
			</count>
			<authorHasReacted set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the [author](CommentAuthorInformation) of the comment has reacted to this reaction</haxe_doc>
			</authorHasReacted>
		</a>
		<haxe_doc>* Reactions of a [comment](#Comment)</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentReply" params="" file="src/vscode/CommentReply.hx">
		<a>
			<thread>
				<t path="vscode.CommentThread"/>
				<haxe_doc>* The active [comment thread](#CommentThread)</haxe_doc>
			</thread>
			<text>
				<c path="String"/>
				<haxe_doc>* The value in the comment editor</haxe_doc>
			</text>
		</a>
		<haxe_doc>* Command argument for actions registered in `comments/commentThread/context`.</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentRule" params="" file="src/vscode/CommentRule.hx">
		<a>
			<lineComment>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The line comment token, like `// this is a comment`</haxe_doc>
			</lineComment>
			<blockComment>
				<x path="Null"><t path="vscode.CharacterPair"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* The block comment character pair, like `/* block comment *&#47;`]]></haxe_doc>
			</blockComment>
		</a>
		<haxe_doc>* Describes how comments for a language work.</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentThread" params="" file="src/vscode/CommentThread.hx">
		<a>
			<uri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The uri of the document the thread has been created on.</haxe_doc>
			</uri>
			<range>
				<c path="vscode.Range"/>
				<haxe_doc>* The range the comment thread is located within the document. The thread icon will be shown
	 * at the first line of the range.</haxe_doc>
			</range>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The optional human-readable label describing the [Comment Thread](#CommentThread)</haxe_doc>
			</label>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this comment thread.
	 *
	 * Once disposed, this comment thread will be removed from visible editors and Comment Panel when appropriate.</haxe_doc>
			</dispose>
			<contextValue>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Context value of the comment thread. This can be used to contribute thread specific actions.
	 * For example, a comment thread is given a context value as `editable`. When contributing actions to `comments/commentThread/title`
	 * using `menus` extension point, you can specify context value for key `commentThread` in `when` expression like `commentThread == editable`.
	 * ```
	 *	"contributes": {
	 *		"menus": {
	 *			"comments/commentThread/title": [
	 *				{
	 *					"command": "extension.deleteCommentThread",
	 *					"when": "commentThread == editable"
	 *				}
	 *			]
	 *		}
	 *	}
	 * ```
	 * This will show action `extension.deleteCommentThread` only for comment threads with `contextValue` is `editable`.</haxe_doc>
			</contextValue>
			<comments>
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Comment"/></x>
				<haxe_doc>* The ordered comments of the thread.</haxe_doc>
			</comments>
			<collapsibleState>
				<x path="vscode.CommentThreadCollapsibleState"/>
				<haxe_doc>* Whether the thread should be collapsed or expanded when opening the document.
	 * Defaults to Collapsed.</haxe_doc>
			</collapsibleState>
			<canReply>
				<x path="Bool"/>
				<haxe_doc>* Whether the thread supports reply.
	 * Defaults to true.</haxe_doc>
			</canReply>
		</a>
		<haxe_doc>* A collection of [comments](#Comment) representing a conversation at a particular range in a document.</haxe_doc>
	</typedef>
	<abstract path="vscode.CommentThreadCollapsibleState" params="" file="src/vscode/CommentThreadCollapsibleState.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Collapsible state of a [comment thread](#CommentThread)</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentThreadCollapsibleState"</e>
			</m>
		</meta>
		<impl><class path="vscode._CommentThreadCollapsibleState.CommentThreadCollapsibleState_Impl_" params="" file="src/vscode/CommentThreadCollapsibleState.hx" private="1" module="vscode.CommentThreadCollapsibleState" extern="1">
	<Collapsed public="1" set="null" static="1">
		<x path="vscode.CommentThreadCollapsibleState"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Determines an item is collapsed</haxe_doc>
	</Collapsed>
	<Expanded public="1" set="null" static="1">
		<x path="vscode.CommentThreadCollapsibleState"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Determines an item is expanded</haxe_doc>
	</Expanded>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CommentThreadCollapsibleState"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CommentThreadCollapsibleState.CommentThreadCollapsibleState_Impl_" params="" file="src/vscode/CommentThreadCollapsibleState.hx" private="1" module="vscode.CommentThreadCollapsibleState" extern="1">
		<Collapsed public="1" set="null" static="1">
			<x path="vscode.CommentThreadCollapsibleState"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Determines an item is collapsed</haxe_doc>
		</Collapsed>
		<Expanded public="1" set="null" static="1">
			<x path="vscode.CommentThreadCollapsibleState"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Determines an item is expanded</haxe_doc>
		</Expanded>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentThreadCollapsibleState"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.CommentingRangeProvider" params="" file="src/vscode/CommentingRangeProvider.hx">
		<a><provideCommentingRanges set="method">
	<f a="document:token">
		<t path="vscode.TextDocument"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.Range"/></c></t>
	</f>
	<haxe_doc>* Provide a list of ranges which allow new comment threads creation or null for a given document</haxe_doc>
</provideCommentingRanges></a>
		<haxe_doc>* Commenting range provider for a [comment controller](#CommentController).</haxe_doc>
	</typedef>
	<typedef path="vscode.CompletionContext" params="" file="src/vscode/CompletionContext.hx">
		<a>
			<triggerKind set="null">
				<x path="vscode.CompletionTriggerKind"/>
				<haxe_doc>* How the completion was triggered.</haxe_doc>
			</triggerKind>
			<triggerCharacter set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Character that triggered the completion item provider.
	 *
	 * `undefined` if provider was not triggered by a character.
	 *
	 * The trigger character is already in the document when the completion provider is triggered.</haxe_doc>
			</triggerCharacter>
		</a>
		<haxe_doc>* Contains additional information about the context in which
 * [completion provider](#CompletionItemProvider.provideCompletionItems) is triggered.</haxe_doc>
	</typedef>
	<class path="vscode.CompletionItem" params="" file="src/vscode/CompletionItem.hx" extern="1">
		<label public="1">
			<c path="String"/>
			<haxe_doc>* The label of this completion item. By default
	 * this is also the text that is inserted when selecting
	 * this completion.</haxe_doc>
		</label>
		<kind public="1">
			<x path="Null"><x path="vscode.CompletionItemKind"/></x>
			<haxe_doc>* The kind of this completion item. Based on the kind
	 * an icon is chosen by the editor.</haxe_doc>
		</kind>
		<tags public="1">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><x path="vscode.CompletionItemTag"/></x></x>
			<haxe_doc>* Tags for this completion item.</haxe_doc>
		</tags>
		<detail public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A human-readable string with additional information
	 * about this item, like type or symbol information.</haxe_doc>
		</detail>
		<documentation public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* A human-readable string that represents a doc-comment.</haxe_doc>
		</documentation>
		<sortText public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A string that should be used when comparing this item
	 * with other items. When `falsy` the [label](#CompletionItem.label)
	 * is used.
	 *
	 * Note that `sortText` is only used for the initial ordering of completion
	 * items. When having a leading word (prefix) ordering is based on how
	 * well completions match that prefix and the initial ordering is only used
	 * when completions match equally well. The prefix is defined by the
	 * [`range`](#CompletionItem.range)-property and can therefore be different
	 * for each completion.</haxe_doc>
		</sortText>
		<filterText public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A string that should be used when filtering a set of
	 * completion items. When `falsy` the [label](#CompletionItem.label)
	 * is used.
	 *
	 * Note that the filter text is matched against the leading word (prefix) which is defined
	 * by the [`range`](#CompletionItem.range)-property.</haxe_doc>
		</filterText>
		<preselect public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Select this item when showing. *Note* that only one completion item can be selected and
	 * that the editor decides which item that is. The rule is that the *first* item of those
	 * that match best is selected.</haxe_doc>
		</preselect>
		<insertText public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.SnippetString"/>
</x></x>
			<haxe_doc>* A string or snippet that should be inserted in a document when selecting
	 * this completion. When `falsy` the [label](#CompletionItem.label)
	 * is used.</haxe_doc>
		</insertText>
		<range public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.Range"/>
	<a>
		<replacing><c path="vscode.Range"/></replacing>
		<inserting><c path="vscode.Range"/></inserting>
	</a>
</x></x>
			<haxe_doc>* A range or a insert and replace range selecting the text that should be replaced by this completion item.
	 *
	 * When omitted, the range of the [current word](#TextDocument.getWordRangeAtPosition) is used as replace-range
	 * and as insert-range the start of the [current word](#TextDocument.getWordRangeAtPosition) to the
	 * current position is used.
	 *
	 * *Note 1:* A range must be a [single line](#Range.isSingleLine) and it must
	 * [contain](#Range.contains) the position at which completion has been [requested](#CompletionItemProvider.provideCompletionItems).
	 * *Note 2:* A insert range must be a prefix of a replace range, that means it must be contained and starting at the same position.</haxe_doc>
		</range>
		<commitCharacters public="1">
			<x path="Null"><c path="Array"><c path="String"/></c></x>
			<haxe_doc>* An optional set of characters that when pressed while this completion is active will accept it first and
	 * then type that character. *Note* that all commit characters should have `length=1` and that superfluous
	 * characters will be ignored.</haxe_doc>
		</commitCharacters>
		<keepWhitespace public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Keep whitespace of the [insertText](#CompletionItem.insertText) as is. By default, the editor adjusts leading
	 * whitespace of new lines so that they match the indentation of the line for which the item is accepted - setting
	 * this to `true` will prevent that.</haxe_doc>
		</keepWhitespace>
		<textEdit public="1">
			<x path="Null"><c path="vscode.TextEdit"/></x>
			<meta><m n=":deprecated"><e>"Use `CompletionItem.insertText` and `CompletionItem.range` instead."</e></m></meta>
			<haxe_doc>* @deprecated Use `CompletionItem.insertText` and `CompletionItem.range` instead.
	 *
	 * An [edit](#TextEdit) which is applied to a document when selecting
	 * this completion. When an edit is provided the value of
	 * [insertText](#CompletionItem.insertText) is ignored.
	 *
	 * The [range](#Range) of the edit must be single-line and on the same
	 * line completions were [requested](#CompletionItemProvider.provideCompletionItems) at.</haxe_doc>
		</textEdit>
		<additionalTextEdits public="1">
			<x path="Null"><c path="Array"><c path="vscode.TextEdit"/></c></x>
			<haxe_doc>* An optional array of additional [text edits](#TextEdit) that are applied when
	 * selecting this completion. Edits must not overlap with the main [edit](#CompletionItem.textEdit)
	 * nor with themselves.</haxe_doc>
		</additionalTextEdits>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* An optional [command](#Command) that is executed *after* inserting this completion. *Note* that
	 * additional modifications to the current document should be described with the
	 * [additionalTextEdits](#CompletionItem.additionalTextEdits)-property.</haxe_doc>
		</command>
		<new public="1" set="method">
			<f a="label:?kind">
				<c path="String"/>
				<x path="vscode.CompletionItemKind"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new completion item.
	 *
	 * Completion items must have at least a [label](#CompletionItem.label) which then
	 * will be used as insert text as well as for sorting and filtering.
	 *
	 * @param label The label of the completion.
	 * @param kind The [kind](#CompletionItemKind) of the completion.</haxe_doc>
		</new>
		<haxe_doc>* A completion item represents a text snippet that is proposed to complete text that is being typed.
 *
 * It is sufficient to create a completion item from just a [label](#CompletionItem.label). In that
 * case the completion item will replace the [word](#TextDocument.getWordRangeAtPosition)
 * until the cursor with the given label or [insertText](#CompletionItem.insertText). Otherwise the
 * given [edit](#CompletionItem.textEdit) is used.
 *
 * When selecting a completion item in the editor its defined or synthesized text edit will be applied
 * to *all* cursors/selections whereas [additionalTextEdits](#CompletionItem.additionalTextEdits) will be
 * applied as provided.
 *
 * @see [CompletionItemProvider.provideCompletionItems](#CompletionItemProvider.provideCompletionItems)
 * @see [CompletionItemProvider.resolveCompletionItem](#CompletionItemProvider.resolveCompletionItem)</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CompletionItem"</e>
</m></meta>
	</class>
	<abstract path="vscode.CompletionItemKind" params="" file="src/vscode/CompletionItemKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Completion item kinds.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionItemKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._CompletionItemKind.CompletionItemKind_Impl_" params="" file="src/vscode/CompletionItemKind.hx" private="1" module="vscode.CompletionItemKind" extern="1">
	<Text public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Text>
	<Method public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Method>
	<Function public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Function>
	<Constructor public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Constructor>
	<Field public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Field>
	<Variable public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Variable>
	<Class public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<Interface public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Interface>
	<Module public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Module>
	<Property public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Property>
	<Unit public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unit>
	<Value public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Value>
	<Enum public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Keyword public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Keyword>
	<Snippet public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Snippet>
	<Color public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Color>
	<Reference public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Reference>
	<File public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</File>
	<Folder public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Folder>
	<EnumMember public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EnumMember>
	<Constant public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Constant>
	<Struct public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Struct>
	<Event public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Event>
	<Operator public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Operator>
	<TypeParameter public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeParameter>
	<User public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</User>
	<Issue public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Issue>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CompletionItemKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CompletionItemKind.CompletionItemKind_Impl_" params="" file="src/vscode/CompletionItemKind.hx" private="1" module="vscode.CompletionItemKind" extern="1">
		<Text public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Text>
		<Method public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Method>
		<Function public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Function>
		<Constructor public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Constructor>
		<Field public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Field>
		<Variable public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Variable>
		<Class public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<Interface public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Interface>
		<Module public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Module>
		<Property public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Property>
		<Unit public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unit>
		<Value public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Value>
		<Enum public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Keyword public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Keyword>
		<Snippet public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Snippet>
		<Color public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Color>
		<Reference public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Reference>
		<File public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</File>
		<Folder public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Folder>
		<EnumMember public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EnumMember>
		<Constant public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Constant>
		<Struct public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Struct>
		<Event public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Event>
		<Operator public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Operator>
		<TypeParameter public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeParameter>
		<User public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</User>
		<Issue public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Issue>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionItemKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.CompletionItemProvider" params="T" file="src/vscode/CompletionItemProvider.hx">
		<a>
			<resolveCompletionItem set="method">
				<x path="Null"><f a="item:token">
	<c path="vscode.CompletionItemProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.CompletionItemProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Given a completion item fill in more data, like [doc-comment](#CompletionItem.documentation)
	 * or [details](#CompletionItem.detail).
	 *
	 * The editor will only resolve a completion item once.
	 *
	 * *Note* that this function is called when completion items are already showing in the UI or when an item has been
	 * selected for insertion. Because of that, no property that changes the presentation (label, sorting, filtering etc)
	 * or the (primary) insert behaviour ([insertText](#CompletionItem.insertText)) can be changed.
	 *
	 * This function may fill in [additionalTextEdits](#CompletionItem.additionalTextEdits). However, that means an item might be
	 * inserted *before* resolving is done and in that case the editor will do a best effort to still apply those additional
	 * text edits.
	 *
	 * @param item A completion item currently active in the UI.
	 * @param token A cancellation token.
	 * @return The resolved completion item or a thenable that resolves to of such. It is OK to return the given
	 * `item`. When no result is returned, the given `item` will be used.</haxe_doc>
			</resolveCompletionItem>
			<provideCompletionItems set="method">
				<f a="document:position:token:context">
					<t path="vscode.TextDocument"/>
					<c path="vscode.Position"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.CompletionContext"/>
					<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="vscode.CompletionItemProvider.T"/></c>
	<c path="vscode.CompletionList"><c path="vscode.CompletionItemProvider.T"/></c>
</x></t>
				</f>
				<haxe_doc>* Provide completion items for the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @param context How the completion was triggered.
	 * @return An array of completions, a [completion list](#CompletionList), or a thenable that resolves to either.
	 * The lack of a result can be signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideCompletionItems>
		</a>
		<haxe_doc>* The completion item provider interface defines the contract between extensions and
 * [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense).
 *
 * Providers can delay the computation of the [`detail`](#CompletionItem.detail)
 * and [`documentation`](#CompletionItem.documentation) properties by implementing the
 * [`resolveCompletionItem`](#CompletionItemProvider.resolveCompletionItem)-function. However, properties that
 * are needed for the initial sorting and filtering, like `sortText`, `filterText`, `insertText`, and `range`, must
 * not be changed during resolve.
 *
 * Providers are asked for completions either explicitly by a user gesture or -depending on the configuration-
 * implicitly when typing words or trigger characters.</haxe_doc>
	</typedef>
	<abstract path="vscode.CompletionItemTag" params="" file="src/vscode/CompletionItemTag.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Completion item tags are extra annotations that tweak the rendering of a completion
 * item.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionItemTag"</e>
			</m>
		</meta>
		<impl><class path="vscode._CompletionItemTag.CompletionItemTag_Impl_" params="" file="src/vscode/CompletionItemTag.hx" private="1" module="vscode.CompletionItemTag" extern="1">
	<Deprecated public="1" set="null" static="1">
		<x path="vscode.CompletionItemTag"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render a completion as obsolete, usually using a strike-out.</haxe_doc>
	</Deprecated>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CompletionItemTag"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CompletionItemTag.CompletionItemTag_Impl_" params="" file="src/vscode/CompletionItemTag.hx" private="1" module="vscode.CompletionItemTag" extern="1">
		<Deprecated public="1" set="null" static="1">
			<x path="vscode.CompletionItemTag"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render a completion as obsolete, usually using a strike-out.</haxe_doc>
		</Deprecated>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionItemTag"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.CompletionList" params="T" file="src/vscode/CompletionList.hx" extern="1">
		<isIncomplete public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* This list is not complete. Further typing should result in recomputing
	 * this list.</haxe_doc>
		</isIncomplete>
		<items public="1">
			<c path="Array"><c path="vscode.CompletionList.T"/></c>
			<haxe_doc>* The completion items.</haxe_doc>
		</items>
		<new public="1" set="method">
			<f a="?items:?isIncomplete">
				<c path="Array"><c path="vscode.CompletionList.T"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new completion list.
	 *
	 * @param items The completion items.
	 * @param isIncomplete The list is not complete.</haxe_doc>
		</new>
		<haxe_doc>* Represents a collection of [completion items](#CompletionItem) to be presented
 * in the editor.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CompletionList"</e>
</m></meta>
	</class>
	<abstract path="vscode.CompletionTriggerKind" params="" file="src/vscode/CompletionTriggerKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* How a [completion provider](#CompletionItemProvider) was triggered</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionTriggerKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._CompletionTriggerKind.CompletionTriggerKind_Impl_" params="" file="src/vscode/CompletionTriggerKind.hx" private="1" module="vscode.CompletionTriggerKind" extern="1">
	<Invoke public="1" set="null" static="1">
		<x path="vscode.CompletionTriggerKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Completion was triggered normally.</haxe_doc>
	</Invoke>
	<TriggerCharacter public="1" set="null" static="1">
		<x path="vscode.CompletionTriggerKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Completion was triggered by a trigger character.</haxe_doc>
	</TriggerCharacter>
	<TriggerForIncompleteCompletions public="1" set="null" static="1">
		<x path="vscode.CompletionTriggerKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Completion was re-triggered as current completion list is incomplete</haxe_doc>
	</TriggerForIncompleteCompletions>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CompletionTriggerKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CompletionTriggerKind.CompletionTriggerKind_Impl_" params="" file="src/vscode/CompletionTriggerKind.hx" private="1" module="vscode.CompletionTriggerKind" extern="1">
		<Invoke public="1" set="null" static="1">
			<x path="vscode.CompletionTriggerKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Completion was triggered normally.</haxe_doc>
		</Invoke>
		<TriggerCharacter public="1" set="null" static="1">
			<x path="vscode.CompletionTriggerKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Completion was triggered by a trigger character.</haxe_doc>
		</TriggerCharacter>
		<TriggerForIncompleteCompletions public="1" set="null" static="1">
			<x path="vscode.CompletionTriggerKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Completion was re-triggered as current completion list is incomplete</haxe_doc>
		</TriggerForIncompleteCompletions>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionTriggerKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.ConfigurationChangeEvent" params="" file="src/vscode/ConfigurationChangeEvent.hx">
		<a><affectsConfiguration set="method">
	<f a="section:?scope">
		<c path="String"/>
		<t path="vscode.ConfigurationScope"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>* Checks if the given section has changed.
	 * If scope is provided, checks if the section has changed for resources under the given scope.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @param scope A scope in which to check.
	 * @return `true` if the given section has changed.</haxe_doc>
</affectsConfiguration></a>
		<haxe_doc>* An event describing the change in Configuration</haxe_doc>
	</typedef>
	<typedef path="vscode.ConfigurationScope" params="" file="src/vscode/ConfigurationScope.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.Uri"/>
			<x path="haxe.extern.EitherType">
				<t path="vscode.TextDocument"/>
				<x path="haxe.extern.EitherType">
					<t path="vscode.WorkspaceFolder"/>
					<a>
						<uri>
							<x path="Null"><c path="vscode.Uri"/></x>
							<meta><m n=":optional"/></meta>
						</uri>
						<languageId><c path="String"/></languageId>
					</a>
				</x>
			</x>
		</x>
		<haxe_doc>* The configuration scope which can be a
 * a 'resource' or a languageId or both or
 * a '[TextDocument](#TextDocument)' or
 * a '[WorkspaceFolder](#WorkspaceFolder)'</haxe_doc>
	</typedef>
	<abstract path="vscode.ConfigurationTarget" params="" file="src/vscode/ConfigurationTarget.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The configuration target</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ConfigurationTarget"</e>
			</m>
		</meta>
		<impl><class path="vscode._ConfigurationTarget.ConfigurationTarget_Impl_" params="" file="src/vscode/ConfigurationTarget.hx" private="1" module="vscode.ConfigurationTarget" extern="1">
	<Global public="1" set="null" static="1">
		<x path="vscode.ConfigurationTarget"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Global configuration</haxe_doc>
	</Global>
	<Workspace public="1" set="null" static="1">
		<x path="vscode.ConfigurationTarget"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Workspace configuration</haxe_doc>
	</Workspace>
	<WorkspaceFolder public="1" set="null" static="1">
		<x path="vscode.ConfigurationTarget"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Workspace folder configuration</haxe_doc>
	</WorkspaceFolder>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ConfigurationTarget"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ConfigurationTarget.ConfigurationTarget_Impl_" params="" file="src/vscode/ConfigurationTarget.hx" private="1" module="vscode.ConfigurationTarget" extern="1">
		<Global public="1" set="null" static="1">
			<x path="vscode.ConfigurationTarget"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Global configuration</haxe_doc>
		</Global>
		<Workspace public="1" set="null" static="1">
			<x path="vscode.ConfigurationTarget"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Workspace configuration</haxe_doc>
		</Workspace>
		<WorkspaceFolder public="1" set="null" static="1">
			<x path="vscode.ConfigurationTarget"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Workspace folder configuration</haxe_doc>
		</WorkspaceFolder>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ConfigurationTarget"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.CustomDocument" params="" file="src/vscode/CustomDocument.hx">
		<a>
			<uri final="1" set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The associated uri for this document.</haxe_doc>
			</uri>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose of the custom document.
	 *
	 * This is invoked by VS Code when there are no more references to a given `CustomDocument` (for example when
	 * all editors associated with the document have been closed.)</haxe_doc>
			</dispose>
		</a>
		<haxe_doc>* Represents a custom document used by a [`CustomEditorProvider`](#CustomEditorProvider).
 *
 * Custom documents are only used within a given `CustomEditorProvider`. The lifecycle of a `CustomDocument` is
 * managed by VS Code. When no more references remain to a `CustomDocument`, it is disposed of.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentBackup" params="" file="src/vscode/CustomDocumentBackup.hx">
		<a>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* Unique identifier for the backup.
	 *
	 * This id is passed back to your extension in `openCustomDocument` when opening a custom editor from a backup.</haxe_doc>
			</id>
			<delete set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Delete the current backup.
	 *
	 * This is called by VS Code when it is clear the current backup is no longer needed, such as when a new backup
	 * is made or when the file is saved.</haxe_doc>
			</delete>
		</a>
		<haxe_doc>* A backup for an [`CustomDocument`](#CustomDocument).</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentBackupContext" params="" file="src/vscode/CustomDocumentBackupContext.hx">
		<a><destination final="1" set="null">
	<c path="vscode.Uri"/>
	<haxe_doc>* Suggested file location to write the new backup.
	 *
	 * Note that your extension is free to ignore this and use its own strategy for backup.
	 *
	 * If the editor is for a resource from the current workspace, `destination` will point to a file inside
	 * `ExtensionContext.storagePath`. The parent folder of `destination` may not exist, so make sure to created it
	 * before writing the backup to this location.</haxe_doc>
</destination></a>
		<haxe_doc>* Additional information used to implement [`CustomEditableDocument.backup`](#CustomEditableDocument.backup).</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentContentChangeEvent" params="T" file="src/vscode/CustomDocumentContentChangeEvent.hx">
		<a><document final="1" set="null">
	<c path="vscode.CustomDocumentContentChangeEvent.T"/>
	<haxe_doc>* The document that the change is for.</haxe_doc>
</document></a>
		<haxe_doc>* Event triggered by extensions to signal to VS Code that the content of a [`CustomDocument`](#CustomDocument)
 * has changed.
 *
 * @see [`CustomDocumentProvider.onDidChangeCustomDocument`](#CustomDocumentProvider.onDidChangeCustomDocument).</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentEditEvent" params="T" file="src/vscode/CustomDocumentEditEvent.hx">
		<a>
			<undo set="method">
				<f a=""><x path="haxe.extern.EitherType">
	<x path="js.lib.Thenable"><x path="Void"/></x>
	<x path="Void"/>
</x></f>
				<haxe_doc>* Undo the edit operation.
	 *
	 * This is invoked by VS Code when the user undoes this edit. To implement `undo`, your
	 * extension should restore the document and editor to the state they were in just before this
	 * edit was added to VS Code's internal edit stack by `onDidChangeCustomDocument`.</haxe_doc>
			</undo>
			<redo set="method">
				<f a=""><x path="haxe.extern.EitherType">
	<x path="js.lib.Thenable"><x path="Void"/></x>
	<x path="Void"/>
</x></f>
				<haxe_doc>* Redo the edit operation.
	 *
	 * This is invoked by VS Code when the user redoes this edit. To implement `redo`, your
	 * extension should restore the document and editor to the state they were in just after this
	 * edit was added to VS Code's internal edit stack by `onDidChangeCustomDocument`.</haxe_doc>
			</redo>
			<label final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Display name describing the edit.
	 *
	 * This will be shown to users in the UI for undo/redo operations.</haxe_doc>
			</label>
			<document final="1" set="null">
				<c path="vscode.CustomDocumentEditEvent.T"/>
				<haxe_doc>* The document that the edit is for.</haxe_doc>
			</document>
		</a>
		<haxe_doc>* Event triggered by extensions to signal to VS Code that an edit has occurred on an [`CustomDocument`](#CustomDocument).
 *
 * @see [`CustomDocumentProvider.onDidChangeCustomDocument`](#CustomDocumentProvider.onDidChangeCustomDocument).</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentOpenContext" params="" file="src/vscode/CustomDocumentOpenContext.hx">
		<a>
			<untitledDocumentData set="null">
				<x path="Null"><c path="js.lib.Uint8Array"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* If the URI is an untitled file, this will be populated with the byte data of that file
	 *
	 * If this is provided, your extension should utilize this byte data rather than executing fs APIs on the URI passed in</haxe_doc>
			</untitledDocumentData>
			<backupId final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The id of the backup to restore the document from or `undefined` if there is no backup.
	 *
	 * If this is provided, your extension should restore the editor from the backup instead of reading the file
	 * from the user's workspace.</haxe_doc>
			</backupId>
		</a>
		<haxe_doc>* Additional information about the opening custom document.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomEditorProvider" params="T" file="src/vscode/CustomEditorProvider.hx">
		<a>
			<saveCustomDocumentAs set="method">
				<f a="document:destination:cancellation">
					<c path="vscode.CustomEditorProvider.T"/>
					<c path="vscode.Uri"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Save a custom document to a different location.
	 *
	 * This method is invoked by VS Code when the user triggers 'save as' on a custom editor. The implementer must
	 * persist the custom editor to `destination`.
	 *
	 * When the user accepts save as, the current editor is be replaced by an non-dirty editor for the newly saved file.
	 *
	 * @param document Document to save.
	 * @param destination Location to save to.
	 * @param cancellation Token that signals the save is no longer required.
	 *
	 * @return Thenable signaling that saving has completed.</haxe_doc>
			</saveCustomDocumentAs>
			<saveCustomDocument set="method">
				<f a="document:cancellation">
					<c path="vscode.CustomEditorProvider.T"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Save a custom document.
	 *
	 * This method is invoked by VS Code when the user saves a custom editor. This can happen when the user
	 * triggers save while the custom editor is active, by commands such as `save all`, or by auto save if enabled.
	 *
	 * To implement `save`, the implementer must persist the custom editor. This usually means writing the
	 * file data for the custom document to disk. After `save` completes, any associated editor instances will
	 * no longer be marked as dirty.
	 *
	 * @param document Document to save.
	 * @param cancellation Token that signals the save is no longer required (for example, if another save was triggered).
	 *
	 * @return Thenable signaling that saving has completed.</haxe_doc>
			</saveCustomDocument>
			<revertCustomDocument set="method">
				<f a="document:cancellation">
					<c path="vscode.CustomEditorProvider.T"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Revert a custom document to its last saved state.
	 *
	 * This method is invoked by VS Code when the user triggers `File: Revert File` in a custom editor. (Note that
	 * this is only used using VS Code's `File: Revert File` command and not on a `git revert` of the file).
	 *
	 * To implement `revert`, the implementer must make sure all editor instances (webviews) for `document`
	 * are displaying the document in the same state is saved in. This usually means reloading the file from the
	 * workspace.
	 *
	 * @param document Document to revert.
	 * @param cancellation Token that signals the revert is no longer required.
	 *
	 * @return Thenable signaling that the change has completed.</haxe_doc>
			</revertCustomDocument>
			<resolveCustomEditor set="method">
				<f a="document:webviewPanel:token">
					<c path="vscode.CustomEditorProvider.T"/>
					<t path="vscode.WebviewPanel"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<x path="js.lib.Thenable"><x path="Void"/></x>
						<x path="Void"/>
					</x>
				</f>
				<haxe_doc>* Resolve a custom editor for a given resource.
	 *
	 * This is called whenever the user opens a new editor for this `CustomEditorProvider`.
	 *
	 * @param document Document for the resource being resolved.
	 *
	 * @param webviewPanel The webview panel used to display the editor UI for this resource.
	 *
	 * During resolve, the provider must fill in the initial html for the content webview panel and hook up all
	 * the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to
	 * use later for example in a command. See [`WebviewPanel`](#WebviewPanel) for additional details.
	 *
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @return Optional thenable indicating that the custom editor has been resolved.</haxe_doc>
			</resolveCustomEditor>
			<openCustomDocument set="method">
				<f a="uri:openContext:token">
					<c path="vscode.Uri"/>
					<t path="vscode.CustomDocumentOpenContext"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<x path="js.lib.Thenable"><c path="vscode.CustomEditorProvider.T"/></x>
						<c path="vscode.CustomEditorProvider.T"/>
					</x>
				</f>
				<haxe_doc>* Create a new document for a given resource.
	 *
	 * `openCustomDocument` is called when the first time an editor for a given resource is opened. The opened
	 * document is then passed to `resolveCustomEditor` so that the editor can be shown to the user.
	 *
	 * Already opened `CustomDocument` are re-used if the user opened additional editors. When all editors for a
	 * given resource are closed, the `CustomDocument` is disposed of. Opening an editor at this point will
	 * trigger another call to `openCustomDocument`.
	 *
	 * @param uri Uri of the document to open.
	 * @param openContext Additional information about the opening custom document.
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @return The custom document.</haxe_doc>
			</openCustomDocument>
			<onDidChangeCustomDocument final="1" set="null">
				<x path="haxe.extern.EitherType">
					<t path="vscode.Event"><t path="vscode.CustomDocumentEditEvent"><c path="vscode.CustomEditorProvider.T"/></t></t>
					<t path="vscode.Event"><t path="vscode.CustomDocumentContentChangeEvent"><c path="vscode.CustomEditorProvider.T"/></t></t>
				</x>
				<haxe_doc>* Signal that an edit has occurred inside a custom editor.
	 *
	 * This event must be fired by your extension whenever an edit happens in a custom editor. An edit can be
	 * anything from changing some text, to cropping an image, to reordering a list. Your extension is free to
	 * define what an edit is and what data is stored on each edit.
	 *
	 * Firing `onDidChange` causes VS Code to mark the editors as being dirty. This is cleared when the user either
	 * saves or reverts the file.
	 *
	 * Editors that support undo/redo must fire a `CustomDocumentEditEvent` whenever an edit happens. This allows
	 * users to undo and redo the edit using VS Code's standard VS Code keyboard shortcuts. VS Code will also mark
	 * the editor as no longer being dirty if the user undoes all edits to the last saved state.
	 *
	 * Editors that support editing but cannot use VS Code's standard undo/redo mechanism must fire a `CustomDocumentContentChangeEvent`.
	 * The only way for a user to clear the dirty state of an editor that does not support undo/redo is to either
	 * `save` or `revert` the file.
	 *
	 * An editor should only ever fire `CustomDocumentEditEvent` events, or only ever fire `CustomDocumentContentChangeEvent` events.</haxe_doc>
			</onDidChangeCustomDocument>
			<backupCustomDocument set="method">
				<f a="document:context:cancellation">
					<c path="vscode.CustomEditorProvider.T"/>
					<t path="vscode.CustomDocumentBackupContext"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><t path="vscode.CustomDocumentBackup"/></x>
				</f>
				<haxe_doc>* Back up a dirty custom document.
	 *
	 * Backups are used for hot exit and to prevent data loss. Your `backup` method should persist the resource in
	 * its current state, i.e. with the edits applied. Most commonly this means saving the resource to disk in
	 * the `ExtensionContext.storagePath`. When VS Code reloads and your custom editor is opened for a resource,
	 * your extension should first check to see if any backups exist for the resource. If there is a backup, your
	 * extension should load the file contents from there instead of from the resource in the workspace.
	 *
	 * `backup` is triggered approximately one second after the user stops editing the document. If the user
	 * rapidly edits the document, `backup` will not be invoked until the editing stops.
	 *
	 * `backup` is not invoked when `auto save` is enabled (since auto save already persists the resource).
	 *
	 * @param document Document to backup.
	 * @param context Information that can be used to backup the document.
	 * @param cancellation Token that signals the current backup since a new backup is coming in. It is up to your
	 * extension to decided how to respond to cancellation. If for example your extension is backing up a large file
	 * in an operation that takes time to complete, your extension may decide to finish the ongoing backup rather
	 * than cancelling it to ensure that VS Code has some valid backup.</haxe_doc>
			</backupCustomDocument>
		</a>
		<haxe_doc>* Provider for editable custom editors that use a custom document model.
 *
 * Custom editors use [`CustomDocument`](#CustomDocument) as their document model instead of a [`TextDocument`](#TextDocument).
 * This gives extensions full control over actions such as edit, save, and backup.
 *
 * You should use this type of custom editor when dealing with binary files or more complex scenarios. For simple
 * text based documents, use [`CustomTextEditorProvider`](#CustomTextEditorProvider) instead.
 *
 * @param T Type of the custom document returned by this provider.</haxe_doc>
	</typedef>
	<class path="vscode.CustomExecution" params="" file="src/vscode/CustomExecution.hx" extern="1">
		<new public="1" set="method">
			<f a="callback">
				<f a="resolvedDefinition">
					<t path="vscode.TaskDefinition"/>
					<x path="js.lib.Thenable"><t path="vscode.Pseudoterminal"/></x>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructs a CustomExecution task object. The callback will be executed when the task is run, at which point the
	 * extension should return the Pseudoterminal it will "run in". The task should wait to do further execution until
	 * [Pseudoterminal.open](#Pseudoterminal.open) is called. Task cancellation should be handled using
	 * [Pseudoterminal.close](#Pseudoterminal.close). When the task is complete fire
	 * [Pseudoterminal.onDidClose](#Pseudoterminal.onDidClose).
	 * @param callback The callback that will be called when the task is started by a user. Any ${} style variables that
	 * were in the task definition will be resolved and passed into the callback as `resolvedDefinition`.</haxe_doc>
		</new>
		<haxe_doc>* Class used to execute an extension callback as a task.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CustomExecution"</e>
</m></meta>
	</class>
	<typedef path="vscode.CustomReadonlyEditorProvider" params="T" file="src/vscode/CustomReadonlyEditorProvider.hx">
		<a>
			<resolveCustomEditor set="method">
				<f a="document:webviewPanel:token">
					<c path="vscode.CustomReadonlyEditorProvider.T"/>
					<t path="vscode.WebviewPanel"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<x path="js.lib.Thenable"><x path="Void"/></x>
						<x path="Void"/>
					</x>
				</f>
				<haxe_doc>* Resolve a custom editor for a given resource.
	 *
	 * This is called whenever the user opens a new editor for this `CustomEditorProvider`.
	 *
	 * @param document Document for the resource being resolved.
	 *
	 * @param webviewPanel The webview panel used to display the editor UI for this resource.
	 *
	 * During resolve, the provider must fill in the initial html for the content webview panel and hook up all
	 * the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to
	 * use later for example in a command. See [`WebviewPanel`](#WebviewPanel) for additional details.
	 *
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @return Optional thenable indicating that the custom editor has been resolved.</haxe_doc>
			</resolveCustomEditor>
			<openCustomDocument set="method">
				<f a="uri:openContext:token">
					<c path="vscode.Uri"/>
					<t path="vscode.CustomDocumentOpenContext"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<x path="js.lib.Thenable"><c path="vscode.CustomReadonlyEditorProvider.T"/></x>
						<c path="vscode.CustomReadonlyEditorProvider.T"/>
					</x>
				</f>
				<haxe_doc>* Create a new document for a given resource.
	 *
	 * `openCustomDocument` is called when the first time an editor for a given resource is opened. The opened
	 * document is then passed to `resolveCustomEditor` so that the editor can be shown to the user.
	 *
	 * Already opened `CustomDocument` are re-used if the user opened additional editors. When all editors for a
	 * given resource are closed, the `CustomDocument` is disposed of. Opening an editor at this point will
	 * trigger another call to `openCustomDocument`.
	 *
	 * @param uri Uri of the document to open.
	 * @param openContext Additional information about the opening custom document.
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @return The custom document.</haxe_doc>
			</openCustomDocument>
		</a>
		<haxe_doc>* Provider for readonly custom editors that use a custom document model.
 *
 * Custom editors use [`CustomDocument`](#CustomDocument) as their document model instead of a [`TextDocument`](#TextDocument).
 *
 * You should use this type of custom editor when dealing with binary files or more complex scenarios. For simple
 * text based documents, use [`CustomTextEditorProvider`](#CustomTextEditorProvider) instead.
 *
 * @param T Type of the custom document returned by this provider.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomTextEditorProvider" params="" file="src/vscode/CustomTextEditorProvider.hx">
		<a><resolveCustomTextEditor set="method">
	<f a="document:webviewPanel:token">
		<t path="vscode.TextDocument"/>
		<t path="vscode.WebviewPanel"/>
		<t path="vscode.CancellationToken"/>
		<x path="haxe.extern.EitherType">
			<x path="js.lib.Thenable"><x path="Void"/></x>
			<x path="Void"/>
		</x>
	</f>
	<haxe_doc>* Resolve a custom editor for a given text resource.
	 *
	 * This is called when a user first opens a resource for a `CustomTextEditorProvider`, or if they reopen an
	 * existing editor using this `CustomTextEditorProvider`.
	 *
	 * @param document Document for the resource to resolve.
	 * @param webviewPanel The webview panel used to display the editor UI for this resource.
	 *
	 * During resolve, the provider must fill in the initial html for the content webview panel and hook up all
	 * the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to
	 * use later for example in a command. See [`WebviewPanel`](#WebviewPanel) for additional details.
	 * 
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @return Thenable indicating that the custom editor has been resolved.</haxe_doc>
</resolveCustomTextEditor></a>
		<haxe_doc>* Provider for text based custom editors.
 *
 * Text based custom editors use a [`TextDocument`](#TextDocument) as their data model. This considerably simplifies
 * implementing a custom editor as it allows VS Code to handle many common operations such as
 * undo and backup. The provider is responsible for synchronizing text changes between the webview and the `TextDocument`.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugAdapter" params="" file="src/vscode/DebugAdapter.hx">
		<a>
			<onDidSendMessage set="null">
				<t path="vscode.Event"><t path="vscode.DebugProtocolMessage"/></t>
				<haxe_doc>* An event which fires after the debug adapter has sent a Debug Adapter Protocol message to VS Code.
	 * Messages can be requests, responses, or events.</haxe_doc>
			</onDidSendMessage>
			<handleMessage set="method">
				<f a="message">
					<t path="vscode.DebugProtocolMessage"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Handle a Debug Adapter Protocol message.
	 * Messages can be requests, responses, or events.
	 * Results or errors are returned via onSendMessage events.
	 * @param message A Debug Adapter Protocol message</haxe_doc>
			</handleMessage>
		</a>
		<haxe_doc>* A debug adapter that implements the Debug Adapter Protocol can be registered with VS Code if it implements the DebugAdapter interface.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugAdapterDescriptor" params="" file="src/vscode/DebugAdapterDescriptor.hx"><x path="haxe.extern.EitherType">
	<c path="vscode.DebugAdapterExecutable"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.DebugAdapterServer"/>
		<x path="haxe.extern.EitherType">
			<c path="vscode.DebugAdapterNamedPipeServer"/>
			<c path="vscode.DebugAdapterInlineImplementation"/>
		</x>
	</x>
</x></typedef>
	<typedef path="vscode.DebugAdapterDescriptorFactory" params="" file="src/vscode/DebugAdapterDescriptorFactory.hx"><a><createDebugAdapterDescriptor set="method">
	<f a="session:?executable">
		<t path="vscode.DebugSession"/>
		<c path="vscode.DebugAdapterExecutable"/>
		<t path="vscode.ProviderResult"><t path="vscode.DebugAdapterDescriptor"/></t>
	</f>
	<haxe_doc>* 'createDebugAdapterDescriptor' is called at the start of a debug session to provide details about the debug adapter to use.
	 * These details must be returned as objects of type [DebugAdapterDescriptor](#DebugAdapterDescriptor).
	 * Currently two types of debug adapters are supported:
	 * - a debug adapter executable is specified as a command path and arguments (see [DebugAdapterExecutable](#DebugAdapterExecutable)),
	 * - a debug adapter server reachable via a communication port (see [DebugAdapterServer](#DebugAdapterServer)).
	 * If the method is not implemented the default behavior is this:
	 *   createDebugAdapter(session: DebugSession, executable: DebugAdapterExecutable) {
	 *      if (typeof session.configuration.debugServer === 'number') {
	 *         return new DebugAdapterServer(session.configuration.debugServer);
	 *      }
	 *      return executable;
	 *   }
	 * @param session The [debug session](#DebugSession) for which the debug adapter will be used.
	 * @param executable The debug adapter's executable information as specified in the package.json (or undefined if no such information exists).
	 * @return a [debug adapter descriptor](#DebugAdapterDescriptor) or undefined.</haxe_doc>
</createDebugAdapterDescriptor></a></typedef>
	<class path="vscode.DebugAdapterExecutable" params="" file="src/vscode/DebugAdapterExecutable.hx" extern="1">
		<command public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The command or path of the debug adapter executable.
	 * A command must be either an absolute path of an executable or the name of an command to be looked up via the PATH environment variable.
	 * The special value 'node' will be mapped to VS Code's built-in Node.js runtime.</haxe_doc>
		</command>
		<args public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The arguments passed to the debug adapter executable. Defaults to an empty array.</haxe_doc>
		</args>
		<options public="1" set="null">
			<x path="Null"><t path="vscode.DebugAdapterExecutableOptions"/></x>
			<haxe_doc>* Optional options to be used when the debug adapter is started.
	 * Defaults to undefined.</haxe_doc>
		</options>
		<new public="1" set="method">
			<f a="command:?args:?options">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<t path="vscode.DebugAdapterExecutableOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a description for a debug adapter based on an executable program.
	 *
	 * @param command The command or executable path that implements the debug adapter.
	 * @param args Optional arguments to be passed to the command or executable.
	 * @param options Optional options to be used when starting the command or executable.</haxe_doc>
		</new>
		<haxe_doc>* Represents a debug adapter executable and optional arguments and runtime options passed to it.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugAdapterExecutable"</e>
</m></meta>
	</class>
	<typedef path="vscode.DebugAdapterExecutableOptions" params="" file="src/vscode/DebugAdapterExecutableOptions.hx">
		<a>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The additional environment of the executed program or shell. If omitted
	 * the parent process' environment is used. If provided it is merged with
	 * the parent process' environment.</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The current working directory for the executed debug adapter.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>* Options for a debug adapter executable.</haxe_doc>
	</typedef>
	<class path="vscode.DebugAdapterInlineImplementation" params="" file="src/vscode/DebugAdapterInlineImplementation.hx" extern="1">
		<new public="1" set="method">
			<f a="implementation">
				<t path="vscode.DebugAdapter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a descriptor for an inline implementation of a debug adapter.</haxe_doc>
		</new>
		<haxe_doc>* A debug adapter descriptor for an inline implementation.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugAdapterInlineImplementation"</e>
</m></meta>
	</class>
	<class path="vscode.DebugAdapterNamedPipeServer" params="" file="src/vscode/DebugAdapterNamedPipeServer.hx" extern="1">
		<path public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The path to the NamedPipe/UNIX Domain Socket.</haxe_doc>
		</path>
		<new public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a description for a debug adapter running as a Named Pipe (on Windows)/UNIX Domain Socket (on non-Windows) based server.</haxe_doc>
		</new>
		<haxe_doc>* Represents a debug adapter running as a Named Pipe (on Windows)/UNIX Domain Socket (on non-Windows) based server.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugAdapterNamedPipeServer"</e>
</m></meta>
	</class>
	<class path="vscode.DebugAdapterServer" params="" file="src/vscode/DebugAdapterServer.hx" extern="1">
		<port public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The port.</haxe_doc>
		</port>
		<host public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The host.</haxe_doc>
		</host>
		<new public="1" set="method">
			<f a="port:?host">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a description for a debug adapter running as a socket based server.</haxe_doc>
		</new>
		<haxe_doc>* Represents a debug adapter running as a socket based server.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugAdapterServer"</e>
</m></meta>
	</class>
	<typedef path="vscode.DebugAdapterTracker" params="" file="src/vscode/DebugAdapterTracker.hx">
		<a>
			<onWillStopSession set="method">
				<x path="Null"><f a=""><x path="Void"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The debug adapter session is about to be stopped.</haxe_doc>
			</onWillStopSession>
			<onWillStartSession set="method">
				<x path="Null"><f a=""><x path="Void"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A session with the debug adapter is about to be started.</haxe_doc>
			</onWillStartSession>
			<onWillReceiveMessage set="method">
				<x path="Null"><f a="message">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The debug adapter is about to receive a Debug Adapter Protocol message from VS Code.</haxe_doc>
			</onWillReceiveMessage>
			<onExit set="method">
				<x path="Null"><f a="?code:?signal">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The debug adapter has exited with the given exit code or signal.</haxe_doc>
			</onExit>
			<onError set="method">
				<x path="Null"><f a="error">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An error with the debug adapter has occurred.</haxe_doc>
			</onError>
			<onDidSendMessage set="method">
				<x path="Null"><f a="message">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The debug adapter has sent a Debug Adapter Protocol message to VS Code.</haxe_doc>
			</onDidSendMessage>
		</a>
		<haxe_doc>* A Debug Adapter Tracker is a means to track the communication between VS Code and a Debug Adapter.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugAdapterTrackerFactory" params="" file="src/vscode/DebugAdapterTrackerFactory.hx"><a><createDebugAdapterTracker set="method">
	<f a="session">
		<t path="vscode.DebugSession"/>
		<t path="vscode.ProviderResult"><t path="vscode.DebugAdapterTracker"/></t>
	</f>
	<haxe_doc>* The method 'createDebugAdapterTracker' is called at the start of a debug session in order
	 * to return a "tracker" object that provides read-access to the communication between VS Code and a debug adapter.
	 *
	 * @param session The [debug session](#DebugSession) for which the debug adapter tracker will be used.
	 * @return A [debug adapter tracker](#DebugAdapterTracker) or undefined.</haxe_doc>
</createDebugAdapterTracker></a></typedef>
	<typedef path="vscode.DebugConfiguration" params="" file="src/vscode/DebugConfiguration.hx">
		<a>
			<type>
				<c path="String"/>
				<haxe_doc>* The type of the debug session.</haxe_doc>
			</type>
			<request>
				<c path="String"/>
				<haxe_doc>* The request type of the debug session.</haxe_doc>
			</request>
			<name>
				<c path="String"/>
				<haxe_doc>* The name of the debug session.</haxe_doc>
			</name>
		</a>
		<haxe_doc>* Configuration for a debug session.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugConfigurationProvider" params="" file="src/vscode/DebugConfigurationProvider.hx">
		<a>
			<resolveDebugConfigurationWithSubstitutedVariables set="method">
				<x path="Null"><f a="folder:debugConfiguration:?token">
	<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
	<t path="vscode.DebugConfiguration"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><t path="vscode.DebugConfiguration"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* This hook is directly called after 'resolveDebugConfiguration' but with all variables substituted.
	 * It can be used to resolve or verify a [debug configuration](#DebugConfiguration) by filling in missing values or by adding/changing/removing attributes.
	 * If more than one debug configuration provider is registered for the same type, the 'resolveDebugConfigurationWithSubstitutedVariables' calls are chained
	 * in arbitrary order and the initial debug configuration is piped through the chain.
	 * Returning the value 'undefined' prevents the debug session from starting.
	 * Returning the value 'null' prevents the debug session from starting and opens the underlying debug configuration instead.
	 *
	 * @param folder The workspace folder from which the configuration originates from or `undefined` for a folderless setup.
	 * @param debugConfiguration The [debug configuration](#DebugConfiguration) to resolve.
	 * @param token A cancellation token.
	 * @return The resolved debug configuration or undefined or null.</haxe_doc>
			</resolveDebugConfigurationWithSubstitutedVariables>
			<resolveDebugConfiguration set="method">
				<x path="Null"><f a="folder:debugConfiguration:?token">
	<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
	<t path="vscode.DebugConfiguration"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><t path="vscode.DebugConfiguration"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Resolves a [debug configuration](#DebugConfiguration) by filling in missing values or by adding/changing/removing attributes.
	 * If more than one debug configuration provider is registered for the same type, the resolveDebugConfiguration calls are chained
	 * in arbitrary order and the initial debug configuration is piped through the chain.
	 * Returning the value 'undefined' prevents the debug session from starting.
	 * Returning the value 'null' prevents the debug session from starting and opens the underlying debug configuration instead.
	 *
	 * @param folder The workspace folder from which the configuration originates from or `undefined` for a folderless setup.
	 * @param debugConfiguration The [debug configuration](#DebugConfiguration) to resolve.
	 * @param token A cancellation token.
	 * @return The resolved debug configuration or undefined or null.</haxe_doc>
			</resolveDebugConfiguration>
			<provideDebugConfigurations set="method">
				<x path="Null"><f a="folder:?token">
	<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="Array"><t path="vscode.DebugConfiguration"/></c></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Provides [debug configuration](#DebugConfiguration) to the debug service. If more than one debug configuration provider is
	 * registered for the same type, debug configurations are concatenated in arbitrary order.
	 *
	 * @param folder The workspace folder for which the configurations are used or `undefined` for a folderless setup.
	 * @param token A cancellation token.
	 * @return An array of [debug configurations](#DebugConfiguration).</haxe_doc>
			</provideDebugConfigurations>
		</a>
		<haxe_doc>* A debug configuration provider allows to add debug configurations to the debug service
 * and to resolve launch configurations before they are used to start a debug session.
 * A debug configuration provider is registered via #debug.registerDebugConfigurationProvider.</haxe_doc>
	</typedef>
	<abstract path="vscode.DebugConfigurationProviderTriggerKind" params="" file="src/vscode/DebugConfigurationProviderTriggerKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A DebugConfigurationProviderTriggerKind specifies when the `provideDebugConfigurations` method of a `DebugConfigurationProvider` is triggered.
 * Currently there are two situations: to provide the initial debug configurations for a newly created launch.json or
 * to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the "Select and Start Debugging" command).
 * A trigger kind is used when registering a `DebugConfigurationProvider` with #debug.registerDebugConfigurationProvider.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DebugConfigurationProviderTriggerKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._DebugConfigurationProviderTriggerKind.DebugConfigurationProviderTriggerKind_Impl_" params="" file="src/vscode/DebugConfigurationProviderTriggerKind.hx" private="1" module="vscode.DebugConfigurationProviderTriggerKind" extern="1">
	<Initial public="1" set="null" static="1">
		<x path="vscode.DebugConfigurationProviderTriggerKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>*	`DebugConfigurationProvider.provideDebugConfigurations` is called to provide the initial debug configurations for a newly created launch.json.</haxe_doc>
	</Initial>
	<Dynamic public="1" set="null" static="1">
		<x path="vscode.DebugConfigurationProviderTriggerKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* `DebugConfigurationProvider.provideDebugConfigurations` is called to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the "Select and Start Debugging" command).</haxe_doc>
	</Dynamic>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DebugConfigurationProviderTriggerKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DebugConfigurationProviderTriggerKind.DebugConfigurationProviderTriggerKind_Impl_" params="" file="src/vscode/DebugConfigurationProviderTriggerKind.hx" private="1" module="vscode.DebugConfigurationProviderTriggerKind" extern="1">
		<Initial public="1" set="null" static="1">
			<x path="vscode.DebugConfigurationProviderTriggerKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>*	`DebugConfigurationProvider.provideDebugConfigurations` is called to provide the initial debug configurations for a newly created launch.json.</haxe_doc>
		</Initial>
		<Dynamic public="1" set="null" static="1">
			<x path="vscode.DebugConfigurationProviderTriggerKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* `DebugConfigurationProvider.provideDebugConfigurations` is called to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the "Select and Start Debugging" command).</haxe_doc>
		</Dynamic>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DebugConfigurationProviderTriggerKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.DebugConsole" params="" file="src/vscode/DebugConsole.hx">
		<a>
			<appendLine set="method">
				<f a="value">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Append the given value and a line feed character
	 * to the debug console.
	 *
	 * @param value A string, falsy values will be printed.</haxe_doc>
			</appendLine>
			<append set="method">
				<f a="value">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Append the given value to the debug console.
	 *
	 * @param value A string, falsy values will not be printed.</haxe_doc>
			</append>
		</a>
		<haxe_doc>* Represents the debug console.</haxe_doc>
	</typedef>
	<abstract path="vscode.DebugConsoleMode" params="" file="src/vscode/DebugConsoleMode.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Debug console mode used by debug session, see [options](#DebugSessionOptions).</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DebugConsoleMode"</e>
			</m>
		</meta>
		<impl><class path="vscode._DebugConsoleMode.DebugConsoleMode_Impl_" params="" file="src/vscode/DebugConsoleMode.hx" private="1" module="vscode.DebugConsoleMode" extern="1">
	<Separate public="1" set="null" static="1">
		<x path="vscode.DebugConsoleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Debug session should have a separate debug console.</haxe_doc>
	</Separate>
	<MergeWithParent public="1" set="null" static="1">
		<x path="vscode.DebugConsoleMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Debug session should share debug console with its parent session.
	 * This value has no effect for sessions which do not have a parent session.</haxe_doc>
	</MergeWithParent>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DebugConsoleMode"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DebugConsoleMode.DebugConsoleMode_Impl_" params="" file="src/vscode/DebugConsoleMode.hx" private="1" module="vscode.DebugConsoleMode" extern="1">
		<Separate public="1" set="null" static="1">
			<x path="vscode.DebugConsoleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Debug session should have a separate debug console.</haxe_doc>
		</Separate>
		<MergeWithParent public="1" set="null" static="1">
			<x path="vscode.DebugConsoleMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Debug session should share debug console with its parent session.
	 * This value has no effect for sessions which do not have a parent session.</haxe_doc>
		</MergeWithParent>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DebugConsoleMode"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.DebugProtocolBreakpoint" params="" file="src/vscode/DebugProtocolBreakpoint.hx">
		<a/>
		<haxe_doc>* A DebugProtocolBreakpoint is an opaque stand-in type for the [Breakpoint](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Breakpoint) type defined in the Debug Adapter Protocol.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugProtocolMessage" params="" file="src/vscode/DebugProtocolMessage.hx">
		<a/>
		<haxe_doc>* A DebugProtocolMessage is an opaque stand-in type for the [ProtocolMessage](https://microsoft.github.io/debug-adapter-protocol/specification#Base_Protocol_ProtocolMessage) type defined in the Debug Adapter Protocol.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugProtocolSource" params="" file="src/vscode/DebugProtocolSource.hx">
		<a/>
		<haxe_doc>* A DebugProtocolSource is an opaque stand-in type for the [Source](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Source) type defined in the Debug Adapter Protocol.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugSession" params="" file="src/vscode/DebugSession.hx">
		<a>
			<workspaceFolder set="null">
				<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The workspace folder of this session or `undefined` for a folderless setup.</haxe_doc>
			</workspaceFolder>
			<type set="null">
				<c path="String"/>
				<haxe_doc>* The debug session's name is initially taken from the [debug configuration](#DebugConfiguration).
	 * Any changes will be properly reflected in the UI.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>* The debug session's name from the [debug configuration](#DebugConfiguration).</haxe_doc>
			</name>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The unique ID of this debug session.</haxe_doc>
			</id>
			<getDebugProtocolBreakpoint set="method">
				<f a="breakpoint">
					<c path="vscode.Breakpoint"/>
					<x path="js.lib.Thenable"><x path="Null"><t path="vscode.DebugProtocolBreakpoint"/></x></x>
				</f>
				<haxe_doc>* Maps a VS Code breakpoint to the corresponding Debug Adapter Protocol (DAP) breakpoint that is managed by the debug adapter of the debug session.
	 * If no DAP breakpoint exists (either because the VS Code breakpoint was not yet registered or because the debug adapter is not interested in the breakpoint), the value `undefined` is returned.
	 *
	 * @param breakpoint A VS Code [breakpoint](#Breakpoint).
	 * @return A promise that resolves to the Debug Adapter Protocol breakpoint or `undefined`.</haxe_doc>
			</getDebugProtocolBreakpoint>
			<customRequest set="method">
				<f a="command:?args">
					<c path="String"/>
					<x path="Any"/>
					<x path="js.lib.Thenable"><x path="Any"/></x>
				</f>
				<haxe_doc>* Send a custom request to the debug adapter.</haxe_doc>
			</customRequest>
			<configuration set="null">
				<t path="vscode.DebugConfiguration"/>
				<haxe_doc>* The "resolved" [debug configuration](#DebugConfiguration) of this session.
	 * "Resolved" means that
	 * - all variables have been substituted and
	 * - platform specific attribute sections have been "flattened" for the matching platform and removed for non-matching platforms.</haxe_doc>
			</configuration>
		</a>
		<haxe_doc>* A debug session.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugSessionCustomEvent" params="" file="src/vscode/DebugSessionCustomEvent.hx">
		<a>
			<session set="null">
				<t path="vscode.DebugSession"/>
				<haxe_doc>* The [debug session](#DebugSession) for which the custom event was received.</haxe_doc>
			</session>
			<event set="null">
				<c path="String"/>
				<haxe_doc>* Type of event.</haxe_doc>
			</event>
			<body set="null">
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Event specific information.</haxe_doc>
			</body>
		</a>
		<haxe_doc>* A custom Debug Adapter Protocol event received from a [debug session](#DebugSession).</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugSessionOptions" params="" file="src/vscode/DebugSessionOptions.hx">
		<a>
			<parentSession>
				<x path="Null"><t path="vscode.DebugSession"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When specified the newly created debug session is registered as a "child" session of this
	 * "parent" debug session.</haxe_doc>
			</parentSession>
			<noDebug>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether this session should run without debugging, thus ignoring breakpoints.
	 * When this property is not specified, the value from the parent session (if there is one) is used.</haxe_doc>
			</noDebug>
			<consoleMode>
				<x path="Null"><x path="vscode.DebugConsoleMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether this session should have a separate debug console or share it
	 * with the parent session. Has no effect for sessions which do not have a parent session.
	 * Defaults to Separate.</haxe_doc>
			</consoleMode>
			<compact>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if the debug session's parent session is shown in the CALL STACK view even if it has only a single child.
	 * By default, the debug session will never hide its parent.
	 * If compact is true, debug sessions with a single child are hidden in the CALL STACK view to make the tree more compact.</haxe_doc>
			</compact>
		</a>
		<haxe_doc>* Options for [starting a debug session](#debug.startDebugging).</haxe_doc>
	</typedef>
	<typedef path="vscode.Declaration" params="" file="src/vscode/Declaration.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.Location"/>
			<x path="haxe.extern.EitherType">
				<c path="Array"><c path="vscode.Location"/></c>
				<c path="Array"><t path="vscode.LocationLink"/></c>
			</x>
		</x>
		<haxe_doc>* The declaration of a symbol representation as one or many [locations](#Location)
 * or [location links](#LocationLink).</haxe_doc>
	</typedef>
	<typedef path="vscode.DeclarationProvider" params="" file="src/vscode/DeclarationProvider.hx">
		<a><provideDeclaration set="method">
	<f a="document:position:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><t path="vscode.Declaration"/></t>
	</f>
	<haxe_doc>* Provide the declaration of the symbol at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @return A declaration or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideDeclaration></a>
		<haxe_doc>* The declaration provider interface defines the contract between extensions and
 * the go to declaration feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.DecorationInstanceRenderOptions" params="" file="src/vscode/DecorationInstanceRenderOptions.hx"><a>
	<light>
		<x path="Null"><t path="vscode.ThemableDecorationInstanceRenderOptions"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Overwrite options for light themes.</haxe_doc>
	</light>
	<dark>
		<x path="Null"><t path="vscode.ThemableDecorationInstanceRenderOptions"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Overwrite options for dark themes.</haxe_doc>
	</dark>
	<before>
		<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Defines the rendering options of the attachment that is inserted before the decorated text.</haxe_doc>
	</before>
	<after>
		<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Defines the rendering options of the attachment that is inserted after the decorated text.</haxe_doc>
	</after>
</a></typedef>
	<typedef path="vscode.DecorationOptions" params="" file="src/vscode/DecorationOptions.hx">
		<a>
			<renderOptions>
				<x path="Null"><t path="vscode.DecorationInstanceRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Render options applied to the current decoration. For performance reasons, keep the
	 * number of decoration specific options small, and use decoration types wherever possible.</haxe_doc>
			</renderOptions>
			<range>
				<c path="vscode.Range"/>
				<haxe_doc>* Range to which this decoration is applied. The range must not be empty.</haxe_doc>
			</range>
			<hoverMessage>
				<x path="haxe.extern.EitherType">
					<t path="vscode.MarkedString"/>
					<c path="Array"><t path="vscode.MarkedString"/></c>
				</x>
				<haxe_doc>* A message that should be rendered when hovering over the decoration.</haxe_doc>
			</hoverMessage>
		</a>
		<haxe_doc>* Represents options for a specific decoration in a [decoration set](#TextEditorDecorationType).</haxe_doc>
	</typedef>
	<abstract path="vscode.DecorationRangeBehavior" params="" file="src/vscode/DecorationRangeBehavior.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Describes the behavior of decorations when typing/editing at their edges.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DecorationRangeBehavior"</e>
			</m>
		</meta>
		<impl><class path="vscode._DecorationRangeBehavior.DecorationRangeBehavior_Impl_" params="" file="src/vscode/DecorationRangeBehavior.hx" private="1" module="vscode.DecorationRangeBehavior" extern="1">
	<OpenOpen public="1" set="null" static="1">
		<x path="vscode.DecorationRangeBehavior"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The decoration's range will widen when edits occur at the start or end.</haxe_doc>
	</OpenOpen>
	<ClosedClosed public="1" set="null" static="1">
		<x path="vscode.DecorationRangeBehavior"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The decoration's range will not widen when edits occur at the start of end.</haxe_doc>
	</ClosedClosed>
	<OpenClosed public="1" set="null" static="1">
		<x path="vscode.DecorationRangeBehavior"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The decoration's range will widen when edits occur at the start, but not at the end.</haxe_doc>
	</OpenClosed>
	<ClosedOpen public="1" set="null" static="1">
		<x path="vscode.DecorationRangeBehavior"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The decoration's range will widen when edits occur at the end, but not at the start.</haxe_doc>
	</ClosedOpen>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DecorationRangeBehavior"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DecorationRangeBehavior.DecorationRangeBehavior_Impl_" params="" file="src/vscode/DecorationRangeBehavior.hx" private="1" module="vscode.DecorationRangeBehavior" extern="1">
		<OpenOpen public="1" set="null" static="1">
			<x path="vscode.DecorationRangeBehavior"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The decoration's range will widen when edits occur at the start or end.</haxe_doc>
		</OpenOpen>
		<ClosedClosed public="1" set="null" static="1">
			<x path="vscode.DecorationRangeBehavior"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The decoration's range will not widen when edits occur at the start of end.</haxe_doc>
		</ClosedClosed>
		<OpenClosed public="1" set="null" static="1">
			<x path="vscode.DecorationRangeBehavior"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The decoration's range will widen when edits occur at the start, but not at the end.</haxe_doc>
		</OpenClosed>
		<ClosedOpen public="1" set="null" static="1">
			<x path="vscode.DecorationRangeBehavior"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The decoration's range will widen when edits occur at the end, but not at the start.</haxe_doc>
		</ClosedOpen>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DecorationRangeBehavior"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.DecorationRenderOptions" params="" file="src/vscode/DecorationRenderOptions.hx">
		<a>
			<textDecoration>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</textDecoration>
			<rangeBehavior>
				<x path="Null"><x path="vscode.DecorationRangeBehavior"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Customize the growing behavior of the decoration when edits occur at the edges of the decoration's range.
	 * Defaults to `DecorationRangeBehavior.OpenOpen`.</haxe_doc>
			</rangeBehavior>
			<overviewRulerLane>
				<x path="Null"><x path="vscode.OverviewRulerLane"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The position in the overview ruler where the decoration should be rendered.</haxe_doc>
			</overviewRulerLane>
			<overviewRulerColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations.</haxe_doc>
			</overviewRulerColor>
			<outlineWidth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineWidth>
			<outlineStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineStyle>
			<outlineColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineColor>
			<outline>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</outline>
			<opacity>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</opacity>
			<light>
				<x path="Null"><t path="vscode.ThemableDecorationRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Overwrite options for light themes.</haxe_doc>
			</light>
			<letterSpacing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</letterSpacing>
			<isWholeLine>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Should the decoration be rendered also on the whitespace after the line text.
	 * Defaults to `false`.</haxe_doc>
			</isWholeLine>
			<gutterIconSize>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Specifies the size of the gutter icon.
	 * Available values are 'auto', 'contain', 'cover' and any percentage value.
	 * For further information: https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx</haxe_doc>
			</gutterIconSize>
			<gutterIconPath>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An **absolute path** or an URI to an image to be rendered in the gutter.</haxe_doc>
			</gutterIconPath>
			<fontWeight>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</fontWeight>
			<fontStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</fontStyle>
			<dark>
				<x path="Null"><t path="vscode.ThemableDecorationRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Overwrite options for dark themes.</haxe_doc>
			</dark>
			<cursor>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</cursor>
			<color>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</color>
			<borderWidth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderWidth>
			<borderStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderStyle>
			<borderSpacing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderSpacing>
			<borderRadius>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderRadius>
			<borderColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderColor>
			<border>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</border>
			<before>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted before the decorated text.</haxe_doc>
			</before>
			<backgroundColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations.
	 * Alternatively a color from the color registry can be [referenced](#ThemeColor).</haxe_doc>
			</backgroundColor>
			<after>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted after the decorated text.</haxe_doc>
			</after>
		</a>
		<haxe_doc>* Represents rendering styles for a [text editor decoration](#TextEditorDecorationType).</haxe_doc>
	</typedef>
	<typedef path="vscode.Definition" params="" file="src/vscode/Definition.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.Location"/>
			<c path="Array"><c path="vscode.Location"/></c>
		</x>
		<haxe_doc>* The definition of a symbol represented as one or many [locations](#Location).
 * For most programming languages there is only one location at which a symbol is
 * defined.</haxe_doc>
	</typedef>
	<typedef path="vscode.DefinitionLink" params="" file="src/vscode/DefinitionLink.hx">
		<t path="vscode.LocationLink"/>
		<haxe_doc>* Information about where a symbol is defined.
 *
 * Provides additional metadata over normal [location](#Location) definitions, including the range of
 * the defining symbol</haxe_doc>
	</typedef>
	<typedef path="vscode.DefinitionProvider" params="" file="src/vscode/DefinitionProvider.hx">
		<a><provideDefinition set="method">
	<f a="document:position:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<t path="vscode.Definition"/>
	<c path="Array"><t path="vscode.DefinitionLink"/></c>
</x></t>
	</f>
	<haxe_doc>* Provide the definition of the symbol at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @return A definition or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideDefinition></a>
		<haxe_doc>* The definition provider interface defines the contract between extensions and
 * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)
 * and peek definition features.</haxe_doc>
	</typedef>
	<class path="vscode.Diagnostic" params="" file="src/vscode/Diagnostic.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range to which this diagnostic applies.</haxe_doc>
		</range>
		<message public="1">
			<c path="String"/>
			<haxe_doc>* The human-readable message.</haxe_doc>
		</message>
		<severity public="1">
			<x path="vscode.DiagnosticSeverity"/>
			<haxe_doc>* The severity, default is [error](#DiagnosticSeverity.Error).</haxe_doc>
		</severity>
		<source public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A human-readable string describing the source of this
	 * diagnostic, e.g. 'typescript' or 'super lint'.</haxe_doc>
		</source>
		<code public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<x path="Int"/>
		<a>
			<value>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="Int"/>
				</x>
				<haxe_doc>* A code or identifier for this diagnostic.
		 * Should be used for later processing, e.g. when providing [code actions](#CodeActionContext).</haxe_doc>
			</value>
			<target>
				<c path="vscode.Uri"/>
				<haxe_doc>* A target URI to open with more information about the diagnostic error.</haxe_doc>
			</target>
		</a>
	</x>
</x></x>
			<haxe_doc>* A code or identifier for this diagnostic.
	 * Should be used for later processing, e.g. when providing [code actions](#CodeActionContext).</haxe_doc>
		</code>
		<relatedInformation public="1">
			<x path="Null"><c path="Array"><c path="vscode.DiagnosticRelatedInformation"/></c></x>
			<haxe_doc>* An array of related diagnostic information, e.g. when symbol-names within
	 * a scope collide all definitions can be marked via this property.</haxe_doc>
		</relatedInformation>
		<tags public="1">
			<x path="Null"><c path="Array"><x path="vscode.DiagnosticTag"/></c></x>
			<haxe_doc>* Additional metadata about the diagnostic.</haxe_doc>
		</tags>
		<new public="1" set="method">
			<f a="range:message:?severity">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="vscode.DiagnosticSeverity"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new diagnostic object.
	 *
	 * @param range The range to which this diagnostic applies.
	 * @param message The human-readable message.
	 * @param severity The severity, default is [error](#DiagnosticSeverity.Error).</haxe_doc>
		</new>
		<haxe_doc>* Represents a diagnostic, such as a compiler error or warning. Diagnostic objects
 * are only valid in the scope of a file.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Diagnostic"</e>
</m></meta>
	</class>
	<typedef path="vscode.DiagnosticChangeEvent" params="" file="src/vscode/DiagnosticChangeEvent.hx">
		<a><uris set="null">
	<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
	<haxe_doc>* An array of resources for which diagnostics have changed.</haxe_doc>
</uris></a>
		<haxe_doc>* The event that is fired when diagnostics change.</haxe_doc>
	</typedef>
	<typedef path="vscode.DiagnosticCollection" params="" file="src/vscode/DiagnosticCollection.hx">
		<a>
			<set set="method">
				<f a="uri:diagnostics">
					<c path="vscode.Uri"/>
					<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.Diagnostic"/></x></x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Assign diagnostics for given resource. Will replace
	 * existing diagnostics for that resource.
	 *
	 * @param uri A resource identifier.
	 * @param diagnostics Array of diagnostics or `undefined`</haxe_doc>
				<overloads><set public="1" set="method">
	<f a="entries">
		<x path="haxe.ds.ReadOnlyArray"><x path="haxe.ds.ReadOnlyArray"><x path="Any"/></x></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Assign diagnostics for given resource. Will replace
	 * existing diagnostics for that resource.
	 *
	 * @param uri A resource identifier.
	 * @param diagnostics Array of diagnostics or `undefined`</haxe_doc>
</set></overloads>
			</set>
			<name set="null">
				<c path="String"/>
				<haxe_doc>* The name of this diagnostic collection, for instance `typescript`. Every diagnostic
	 * from this collection will be associated with this name. Also, the task framework uses this
	 * name when defining [problem matchers](https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher).</haxe_doc>
			</name>
			<has set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>* Check if this collection contains diagnostics for a
	 * given resource.
	 *
	 * @param uri A resource identifier.
	 * @returns `true` if this collection has diagnostic for the given resource.</haxe_doc>
			</has>
			<get set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.Diagnostic"/></x></x>
				</f>
				<haxe_doc>* Get the diagnostics for a given resource. *Note* that you cannot
	 * modify the diagnostics-array returned from this call.
	 *
	 * @param uri A resource identifier.
	 * @returns An immutable array of [diagnostics](#Diagnostic) or `undefined`.</haxe_doc>
			</get>
			<forEach set="method">
				<f a="callback:?thisArg">
					<f a="::">
						<c path="vscode.Uri"/>
						<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Diagnostic"/></x>
						<t path="vscode.DiagnosticCollection"/>
						<x path="Void"/>
					</f>
					<x path="Any"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Iterate over each entry in this collection.
	 *
	 * @param callback Function to execute for each entry.
	 * @param thisArg The `this` context used when invoking the handler function.</haxe_doc>
			</forEach>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose and free associated resources. Calls
	 * [clear](#DiagnosticCollection.clear).</haxe_doc>
			</dispose>
			<delete set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Remove all diagnostics from this collection that belong
	 * to the provided `uri`. The same as `#set(uri, undefined)`.
	 *
	 * @param uri A resource identifier.</haxe_doc>
			</delete>
			<clear set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Remove all diagnostics from this collection. The same
	 * as calling `#set(undefined)`;</haxe_doc>
			</clear>
		</a>
		<haxe_doc>* A diagnostics collection is a container that manages a set of
 * [diagnostics](#Diagnostic). Diagnostics are always scopes to a
 * diagnostics collection and a resource.
 *
 * To get an instance of a `DiagnosticCollection` use
 * [createDiagnosticCollection](#languages.createDiagnosticCollection).</haxe_doc>
	</typedef>
	<class path="vscode.DiagnosticRelatedInformation" params="" file="src/vscode/DiagnosticRelatedInformation.hx" extern="1">
		<location public="1">
			<c path="vscode.Location"/>
			<haxe_doc>* The location of this related diagnostic information.</haxe_doc>
		</location>
		<message public="1">
			<c path="String"/>
			<haxe_doc>* The message of this related diagnostic information.</haxe_doc>
		</message>
		<new public="1" set="method">
			<f a="location:message">
				<c path="vscode.Location"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new related diagnostic information object.
	 *
	 * @param location The location.
	 * @param message The message.</haxe_doc>
		</new>
		<haxe_doc>* Represents a related message and source code location for a diagnostic. This should be
 * used to point to code locations that cause or related to a diagnostics, e.g. when duplicating
 * a symbol in a scope.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DiagnosticRelatedInformation"</e>
</m></meta>
	</class>
	<abstract path="vscode.DiagnosticSeverity" params="" file="src/vscode/DiagnosticSeverity.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents the severity of diagnostics.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DiagnosticSeverity"</e>
			</m>
		</meta>
		<impl><class path="vscode._DiagnosticSeverity.DiagnosticSeverity_Impl_" params="" file="src/vscode/DiagnosticSeverity.hx" private="1" module="vscode.DiagnosticSeverity" extern="1">
	<Error public="1" set="null" static="1">
		<x path="vscode.DiagnosticSeverity"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Something not allowed by the rules of a language or other means.</haxe_doc>
	</Error>
	<Warning public="1" set="null" static="1">
		<x path="vscode.DiagnosticSeverity"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Something suspicious but allowed.</haxe_doc>
	</Warning>
	<Information public="1" set="null" static="1">
		<x path="vscode.DiagnosticSeverity"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Something to inform about but not a problem.</haxe_doc>
	</Information>
	<Hint public="1" set="null" static="1">
		<x path="vscode.DiagnosticSeverity"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Something to hint to a better way of doing it, like proposing
	 * a refactoring.</haxe_doc>
	</Hint>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DiagnosticSeverity"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DiagnosticSeverity.DiagnosticSeverity_Impl_" params="" file="src/vscode/DiagnosticSeverity.hx" private="1" module="vscode.DiagnosticSeverity" extern="1">
		<Error public="1" set="null" static="1">
			<x path="vscode.DiagnosticSeverity"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Something not allowed by the rules of a language or other means.</haxe_doc>
		</Error>
		<Warning public="1" set="null" static="1">
			<x path="vscode.DiagnosticSeverity"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Something suspicious but allowed.</haxe_doc>
		</Warning>
		<Information public="1" set="null" static="1">
			<x path="vscode.DiagnosticSeverity"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Something to inform about but not a problem.</haxe_doc>
		</Information>
		<Hint public="1" set="null" static="1">
			<x path="vscode.DiagnosticSeverity"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Something to hint to a better way of doing it, like proposing
	 * a refactoring.</haxe_doc>
		</Hint>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DiagnosticSeverity"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.DiagnosticTag" params="" file="src/vscode/DiagnosticTag.hx">
		<this><c path="String"/></this>
		<haxe_doc>* Additional metadata about the type of a diagnostic.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DiagnosticTag"</e>
			</m>
		</meta>
		<impl><class path="vscode._DiagnosticTag.DiagnosticTag_Impl_" params="" file="src/vscode/DiagnosticTag.hx" private="1" module="vscode.DiagnosticTag" extern="1">
	<Unnecessary public="1" set="null" static="1">
		<x path="vscode.DiagnosticTag"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Unused or unnecessary code.
	 *
	 * Diagnostics with this tag are rendered faded out. The amount of fading
	 * is controlled by the `"editorUnnecessaryCode.opacity"` theme color. For
	 * example, `"editorUnnecessaryCode.opacity": "#000000c0"` will render the
	 * code with 75% opacity. For high contrast themes, use the
	 * `"editorUnnecessaryCode.border"` theme color to underline unnecessary code
	 * instead of fading it out.</haxe_doc>
	</Unnecessary>
	<Deprecated public="1" set="null" static="1">
		<x path="vscode.DiagnosticTag"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Deprecated or obsolete code.
	 *
	 * Diagnostics with this tag are rendered with a strike through.</haxe_doc>
	</Deprecated>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DiagnosticTag"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DiagnosticTag.DiagnosticTag_Impl_" params="" file="src/vscode/DiagnosticTag.hx" private="1" module="vscode.DiagnosticTag" extern="1">
		<Unnecessary public="1" set="null" static="1">
			<x path="vscode.DiagnosticTag"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Unused or unnecessary code.
	 *
	 * Diagnostics with this tag are rendered faded out. The amount of fading
	 * is controlled by the `"editorUnnecessaryCode.opacity"` theme color. For
	 * example, `"editorUnnecessaryCode.opacity": "#000000c0"` will render the
	 * code with 75% opacity. For high contrast themes, use the
	 * `"editorUnnecessaryCode.border"` theme color to underline unnecessary code
	 * instead of fading it out.</haxe_doc>
		</Unnecessary>
		<Deprecated public="1" set="null" static="1">
			<x path="vscode.DiagnosticTag"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Deprecated or obsolete code.
	 *
	 * Diagnostics with this tag are rendered with a strike through.</haxe_doc>
		</Deprecated>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DiagnosticTag"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.Disposable" params="" file="src/vscode/Disposable.hx" extern="1">
		<from public="1" set="method" static="1">
			<f a="disposableLikes">
				<x path="haxe.extern.Rest"><a><dispose set="method"><f a=""><x path="Void"/></f></dispose></a></x>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Combine many disposable-likes into one. Use this method
	 * when having objects with a dispose function which are not
	 * instances of Disposable.
	 *
	 * @param disposableLikes Objects that have at least a `dispose`-function member.
	 * @return Returns a new disposable which, upon dispose, will
	 * dispose all provided disposables.</haxe_doc>
		</from>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Dispose this object.</haxe_doc>
		</dispose>
		<new public="1" set="method">
			<f a="callOnDispose">
				<x path="haxe.Function"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new Disposable calling the provided function
	 * on dispose.
	 * @param callOnDispose Function that disposes something.</haxe_doc>
		</new>
		<haxe_doc>* Represents a type which can release resources, such
 * as event listening or a timer.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Disposable"</e>
</m></meta>
	</class>
	<typedef path="vscode.DocumentColorProvider" params="" file="src/vscode/DocumentColorProvider.hx">
		<a>
			<provideDocumentColors set="method">
				<f a="document:token">
					<t path="vscode.TextDocument"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.ColorInformation"/></c></t>
				</f>
				<haxe_doc>* Provide colors for the given document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param token A cancellation token.
	 * @return An array of [color information](#ColorInformation) or a thenable that resolves to such. The lack of a result
	 * can be signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideDocumentColors>
			<provideColorPresentations set="method">
				<f a="color:context:token">
					<c path="vscode.Color"/>
					<a>
						<range><c path="vscode.Range"/></range>
						<document><t path="vscode.TextDocument"/></document>
					</a>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.ColorPresentation"/></c></t>
				</f>
				<haxe_doc>* Provide [representations](#ColorPresentation) for a color.
	 *
	 * @param color The color to show and insert.
	 * @param context A context object with additional information
	 * @param token A cancellation token.
	 * @return An array of color presentations or a thenable that resolves to such. The lack of a result
	 * can be signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideColorPresentations>
		</a>
		<haxe_doc>* The document color provider defines the contract between extensions and feature of
 * picking and modifying colors in the editor.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentFilter" params="" file="src/vscode/DocumentFilter.hx">
		<a>
			<scheme final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A Uri [scheme](#Uri.scheme), like `file` or `untitled`.</haxe_doc>
			</scheme>
			<pattern final="1" set="null">
				<x path="Null"><t path="vscode.GlobPattern"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A [glob pattern](#GlobPattern) that is matched on the absolute path of the document. Use a [relative pattern](#RelativePattern)
	 * to filter documents to a [workspace folder](#WorkspaceFolder).</haxe_doc>
			</pattern>
			<language final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A language id, like `typescript`.</haxe_doc>
			</language>
		</a>
		<haxe_doc><![CDATA[* A document filter denotes a document by different properties like
 * the [language](#TextDocument.languageId), the [scheme](#Uri.scheme) of
 * its resource, or a glob-pattern that is applied to the [path](#TextDocument.fileName).
 *
 * @example <caption>A language filter that applies to typescript files on disk</caption>
 * { language: 'typescript', scheme: 'file' }
 *
 * @example <caption>A language filter that applies to all package.json paths</caption>
 * { language: 'json', scheme: 'untitled', pattern: '**​/package.json' }]]></haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentFormattingEditProvider" params="" file="src/vscode/DocumentFormattingEditProvider.hx">
		<a><provideDocumentFormattingEdits set="method">
	<f a="document:options:token">
		<t path="vscode.TextDocument"/>
		<t path="vscode.FormattingOptions"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TextEdit"/></c></t>
	</f>
	<haxe_doc>* Provide formatting edits for a whole document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param options Options controlling formatting.
	 * @param token A cancellation token.
	 * @return A set of text edits or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideDocumentFormattingEdits></a>
		<haxe_doc>* The document formatting provider interface defines the contract between extensions and
 * the formatting-feature.</haxe_doc>
	</typedef>
	<class path="vscode.DocumentHighlight" params="" file="src/vscode/DocumentHighlight.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range this highlight applies to.</haxe_doc>
		</range>
		<kind public="1">
			<x path="Null"><x path="vscode.DocumentHighlightKind"/></x>
			<haxe_doc>* The highlight kind, default is [text](#DocumentHighlightKind.Text).</haxe_doc>
		</kind>
		<new public="1" set="method">
			<f a="range:?kind">
				<c path="vscode.Range"/>
				<x path="vscode.DocumentHighlightKind"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new document highlight object.
	 *
	 * @param range The range the highlight applies to.
	 * @param kind The highlight kind, default is [text](#DocumentHighlightKind.Text).</haxe_doc>
		</new>
		<haxe_doc>* A document highlight is a range inside a text document which deserves
 * special attention. Usually a document highlight is visualized by changing
 * the background color of its range.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DocumentHighlight"</e>
</m></meta>
	</class>
	<abstract path="vscode.DocumentHighlightKind" params="" file="src/vscode/DocumentHighlightKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A document highlight kind.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DocumentHighlightKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._DocumentHighlightKind.DocumentHighlightKind_Impl_" params="" file="src/vscode/DocumentHighlightKind.hx" private="1" module="vscode.DocumentHighlightKind" extern="1">
	<Text public="1" set="null" static="1">
		<x path="vscode.DocumentHighlightKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* A textual occurrence.</haxe_doc>
	</Text>
	<Read public="1" set="null" static="1">
		<x path="vscode.DocumentHighlightKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Read-access of a symbol, like reading a variable.</haxe_doc>
	</Read>
	<Write public="1" set="null" static="1">
		<x path="vscode.DocumentHighlightKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Write-access of a symbol, like writing to a variable.</haxe_doc>
	</Write>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DocumentHighlightKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DocumentHighlightKind.DocumentHighlightKind_Impl_" params="" file="src/vscode/DocumentHighlightKind.hx" private="1" module="vscode.DocumentHighlightKind" extern="1">
		<Text public="1" set="null" static="1">
			<x path="vscode.DocumentHighlightKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* A textual occurrence.</haxe_doc>
		</Text>
		<Read public="1" set="null" static="1">
			<x path="vscode.DocumentHighlightKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Read-access of a symbol, like reading a variable.</haxe_doc>
		</Read>
		<Write public="1" set="null" static="1">
			<x path="vscode.DocumentHighlightKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Write-access of a symbol, like writing to a variable.</haxe_doc>
		</Write>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DocumentHighlightKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.DocumentHighlightProvider" params="" file="src/vscode/DocumentHighlightProvider.hx">
		<a><provideDocumentHighlights set="method">
	<f a="document:position:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.DocumentHighlight"/></c></t>
	</f>
	<haxe_doc>* Provide a set of document highlights, like all occurrences of a variable or
	 * all exit-points of a function.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @return An array of document highlights or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideDocumentHighlights></a>
		<haxe_doc>* The document highlight provider interface defines the contract between extensions and
 * the word-highlight-feature.</haxe_doc>
	</typedef>
	<class path="vscode.DocumentLink" params="" file="src/vscode/DocumentLink.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range this link applies to.</haxe_doc>
		</range>
		<target public="1">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* The uri this link points to.</haxe_doc>
		</target>
		<tooltip public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The tooltip text when you hover over this link.
	 *
	 * If a tooltip is provided, is will be displayed in a string that includes instructions on how to
	 * trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary depending on OS,
	 * user settings, and localization.</haxe_doc>
		</tooltip>
		<new public="1" set="method">
			<f a="range:?target">
				<c path="vscode.Range"/>
				<c path="vscode.Uri"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new document link.
	 *
	 * @param range The range the document link applies to. Must not be empty.
	 * @param target The uri the document link points to.</haxe_doc>
		</new>
		<haxe_doc>* A document link is a range in a text document that links to an internal or external resource, like another
 * text document or a web site.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DocumentLink"</e>
</m></meta>
	</class>
	<typedef path="vscode.DocumentLinkProvider" params="T" file="src/vscode/DocumentLinkProvider.hx">
		<a>
			<resolveDocumentLink>
				<x path="Null"><f a="link:token">
	<c path="vscode.DocumentLinkProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.DocumentLinkProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Given a link fill in its [target](#DocumentLink.target). This method is called when an incomplete
	 * link is selected in the UI. Providers can implement this method and return incomplete links
	 * (without target) from the [`provideDocumentLinks`](#DocumentLinkProvider.provideDocumentLinks) method which
	 * often helps to improve performance.
	 *
	 * @param link The link that is to be resolved.
	 * @param token A cancellation token.</haxe_doc>
			</resolveDocumentLink>
			<provideDocumentLinks set="method">
				<f a="document:token">
					<t path="vscode.TextDocument"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.DocumentLinkProvider.T"/></c></t>
				</f>
				<haxe_doc>* Provide links for the given document. Note that the editor ships with a default provider that detects
	 * `http(s)` and `file` links.
	 *
	 * @param document The document in which the command was invoked.
	 * @param token A cancellation token.
	 * @return An array of [document links](#DocumentLink) or a thenable that resolves to such. The lack of a result
	 * can be signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideDocumentLinks>
		</a>
		<haxe_doc>* The document link provider defines the contract between extensions and feature of showing
 * links in the editor.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentRangeFormattingEditProvider" params="" file="src/vscode/DocumentRangeFormattingEditProvider.hx">
		<a><provideDocumentRangeFormattingEdits set="method">
	<f a="document:range:options:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Range"/>
		<t path="vscode.FormattingOptions"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TextEdit"/></c></t>
	</f>
	<haxe_doc>* Provide formatting edits for a range in a document.
	 *
	 * The given range is a hint and providers can decide to format a smaller
	 * or larger range. Often this is done by adjusting the start and end
	 * of the range to full syntax nodes.
	 *
	 * @param document The document in which the command was invoked.
	 * @param range The range which should be formatted.
	 * @param options Options controlling formatting.
	 * @param token A cancellation token.
	 * @return A set of text edits or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideDocumentRangeFormattingEdits></a>
		<haxe_doc>* The document formatting provider interface defines the contract between extensions and
 * the formatting-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentRangeSemanticTokensProvider" params="" file="src/vscode/DocumentRangeSemanticTokensProvider.hx">
		<a><provideDocumentRangeSemanticTokens set="method">
	<f a="document:range:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Range"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.SemanticTokens"/></t>
	</f>
	<haxe_doc>* @see [provideDocumentSemanticTokens](#DocumentSemanticTokensProvider.provideDocumentSemanticTokens).</haxe_doc>
</provideDocumentRangeSemanticTokens></a>
		<haxe_doc>* The document range semantic tokens provider interface defines the contract between extensions and
 * semantic tokens.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentSelector" params="" file="src/vscode/DocumentSelector.hx">
		<x path="haxe.extern.EitherType">
			<t path="vscode.DocumentSelectorSimple"/>
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.DocumentSelectorSimple"/></x>
		</x>
		<haxe_doc>* A language selector is the combination of one or many language identifiers
 * and [language filters](#DocumentFilter).
 *
 * *Note* that a document selector that is just a language identifier selects *all*
 * documents, even those that are not saved on disk. Only use such selectors when
 * a feature works without further context, e.g. without the need to resolve related
 * 'files'.
 *
 * @example
 * let sel:DocumentSelector = { scheme: 'file', language: 'typescript' };</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentSelectorSimple" params="" file="src/vscode/DocumentSelector.hx" module="vscode.DocumentSelector"><x path="haxe.extern.EitherType">
	<t path="vscode.DocumentFilter"/>
	<c path="String"/>
</x></typedef>
	<typedef path="vscode.DocumentSemanticTokensProvider" params="" file="src/vscode/DocumentSemanticTokensProvider.hx">
		<a>
			<provideDocumentSemanticTokensEdits set="method">
				<x path="Null"><f a="document:previousResultId:token">
	<t path="vscode.TextDocument"/>
	<c path="String"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="vscode.SemanticTokens"/>
	<c path="vscode.SemanticTokensEdits"/>
</x></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Instead of always returning all the tokens in a file, it is possible for a `DocumentSemanticTokensProvider` to implement
	 * this method (`provideDocumentSemanticTokensEdits`) and then return incremental updates to the previously provided semantic tokens.
	 *
	 * ---
	 * ### How tokens change when the document changes
	 *
	 * Suppose that `provideDocumentSemanticTokens` has previously returned the following semantic tokens:
	 * ```
	 *    // 1st token,  2nd token,  3rd token
	 *    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]
	 * ```
	 *
	 * Also suppose that after some edits, the new semantic tokens in a file are:
	 * ```
	 *    // 1st token,  2nd token,  3rd token
	 *    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]
	 * ```
	 * It is possible to express these new tokens in terms of an edit applied to the previous tokens:
	 * ```
	 *    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // old tokens
	 *    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // new tokens
	 *
	 *    edit: { start:  0, deleteCount: 1, data: [3] } // replace integer at offset 0 with 3
	 * ```
	 *
	 * *NOTE*: If the provider cannot compute `SemanticTokensEdits`, it can "give up" and return all the tokens in the document again.
	 * *NOTE*: All edits in `SemanticTokensEdits` contain indices in the old integers array, so they all refer to the previous result state.</haxe_doc>
			</provideDocumentSemanticTokensEdits>
			<provideDocumentSemanticTokens set="method">
				<f a="document:token">
					<t path="vscode.TextDocument"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.SemanticTokens"/></t>
				</f>
				<haxe_doc><![CDATA[* Tokens in a file are represented as an array of integers. The position of each token is expressed relative to
	 * the token before it, because most tokens remain stable relative to each other when edits are made in a file.
	 *
	 * ---
	 * In short, each token takes 5 integers to represent, so a specific token `i` in the file consists of the following array indices:
	 *  - at index `5*i`   - `deltaLine`: token line number, relative to the previous token
	 *  - at index `5*i+1` - `deltaStart`: token start character, relative to the previous token (relative to 0 or the previous token's start if they are on the same line)
	 *  - at index `5*i+2` - `length`: the length of the token. A token cannot be multiline.
	 *  - at index `5*i+3` - `tokenType`: will be looked up in `SemanticTokensLegend.tokenTypes`. We currently ask that `tokenType` < 65536.
	 *  - at index `5*i+4` - `tokenModifiers`: each set bit will be looked up in `SemanticTokensLegend.tokenModifiers`
	 *
	 * ---
	 * ### How to encode tokens
	 *
	 * Here is an example for encoding a file with 3 tokens in a uint32 array:
	 * ```
	 *    { line: 2, startChar:  5, length: 3, tokenType: "property",  tokenModifiers: ["private", "static"] },
	 *    { line: 2, startChar: 10, length: 4, tokenType: "type",      tokenModifiers: [] },
	 *    { line: 5, startChar:  2, length: 7, tokenType: "class",     tokenModifiers: [] }
	 * ```
	 *
	 * 1. First of all, a legend must be devised. This legend must be provided up-front and capture all possible token types.
	 * For this example, we will choose the following legend which must be passed in when registering the provider:
	 * ```
	 *    tokenTypes: ['property', 'type', 'class'],
	 *    tokenModifiers: ['private', 'static']
	 * ```
	 *
	 * 2. The first transformation step is to encode `tokenType` and `tokenModifiers` as integers using the legend. Token types are looked
	 * up by index, so a `tokenType` value of `1` means `tokenTypes[1]`. Multiple token modifiers can be set by using bit flags,
	 * so a `tokenModifier` value of `3` is first viewed as binary `0b00000011`, which means `[tokenModifiers[0], tokenModifiers[1]]` because
	 * bits 0 and 1 are set. Using this legend, the tokens now are:
	 * ```
	 *    { line: 2, startChar:  5, length: 3, tokenType: 0, tokenModifiers: 3 },
	 *    { line: 2, startChar: 10, length: 4, tokenType: 1, tokenModifiers: 0 },
	 *    { line: 5, startChar:  2, length: 7, tokenType: 2, tokenModifiers: 0 }
	 * ```
	 *
	 * 3. The next step is to represent each token relative to the previous token in the file. In this case, the second token
	 * is on the same line as the first token, so the `startChar` of the second token is made relative to the `startChar`
	 * of the first token, so it will be `10 - 5`. The third token is on a different line than the second token, so the
	 * `startChar` of the third token will not be altered:
	 * ```
	 *    { deltaLine: 2, deltaStartChar: 5, length: 3, tokenType: 0, tokenModifiers: 3 },
	 *    { deltaLine: 0, deltaStartChar: 5, length: 4, tokenType: 1, tokenModifiers: 0 },
	 *    { deltaLine: 3, deltaStartChar: 2, length: 7, tokenType: 2, tokenModifiers: 0 }
	 * ```
	 *
	 * 4. Finally, the last step is to inline each of the 5 fields for a token in a single array, which is a memory friendly representation:
	 * ```
	 *    // 1st token,  2nd token,  3rd token
	 *    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]
	 * ```
	 *
	 * @see [SemanticTokensBuilder](#SemanticTokensBuilder) for a helper to encode tokens as integers.
	 * *NOTE*: When doing edits, it is possible that multiple edits occur until VS Code decides to invoke the semantic tokens provider.
	 * *NOTE*: If the provider cannot temporarily compute semantic tokens, it can indicate this by throwing an error with the message 'Busy'.]]></haxe_doc>
			</provideDocumentSemanticTokens>
			<onDidChangeSemanticTokens>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that the semantic tokens from this provider have changed.</haxe_doc>
			</onDidChangeSemanticTokens>
		</a>
		<haxe_doc>* The document semantic tokens provider interface defines the contract between extensions and
 * semantic tokens.</haxe_doc>
	</typedef>
	<class path="vscode.DocumentSymbol" params="" file="src/vscode/DocumentSymbol.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The name of this symbol.</haxe_doc>
		</name>
		<detail public="1">
			<c path="String"/>
			<haxe_doc>* More detail for this symbol, e.g. the signature of a function.</haxe_doc>
		</detail>
		<kind public="1">
			<x path="vscode.SymbolKind"/>
			<haxe_doc>* The kind of this symbol.</haxe_doc>
		</kind>
		<tags public="1">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><x path="vscode.SymbolTag"/></x></x>
			<haxe_doc>* Tags for this symbol.</haxe_doc>
		</tags>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.</haxe_doc>
		</range>
		<selectionRange public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range that should be selected and reveal when this symbol is being picked, e.g. the name of a function.
	 * Must be contained by the [`range`](#DocumentSymbol.range).</haxe_doc>
		</selectionRange>
		<children public="1">
			<c path="Array"><c path="vscode.DocumentSymbol"/></c>
			<haxe_doc>* Children of this symbol, e.g. properties of a class.</haxe_doc>
		</children>
		<new public="1" set="method">
			<f a="name:detail:kind:range:selectionRange">
				<c path="String"/>
				<c path="String"/>
				<x path="vscode.SymbolKind"/>
				<c path="vscode.Range"/>
				<c path="vscode.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new document symbol.
	 *
	 * @param name The name of the symbol.
	 * @param detail Details for the symbol.
	 * @param kind The kind of the symbol.
	 * @param range The full range of the symbol.
	 * @param selectionRange The range that should be reveal.</haxe_doc>
		</new>
		<haxe_doc>* Represents programming constructs like variables, classes, interfaces etc. that appear in a document. Document
 * symbols can be hierarchical and they have two ranges: one that encloses its definition and one that points to
 * its most interesting range, e.g. the range of an identifier.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DocumentSymbol"</e>
</m></meta>
	</class>
	<typedef path="vscode.DocumentSymbolProvider" params="" file="src/vscode/DocumentSymbolProvider.hx">
		<a><provideDocumentSymbols set="method">
	<f a="document:token">
		<t path="vscode.TextDocument"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="vscode.SymbolInformation"/></c>
	<c path="Array"><c path="vscode.DocumentSymbol"/></c>
</x></t>
	</f>
	<haxe_doc>* Provide symbol information for the given document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param token A cancellation token.
	 * @return An array of document highlights or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideDocumentSymbols></a>
		<haxe_doc>* The document symbol provider interface defines the contract between extensions and
 * the [go to symbol](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol)-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentSymbolProviderMetadata" params="" file="src/vscode/DocumentSymbolProviderMetadata.hx">
		<a><label>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* A human-readable string that is shown when multiple outlines trees show for one document.</haxe_doc>
</label></a>
		<haxe_doc>* Metadata about a document symbol provider.</haxe_doc>
	</typedef>
	<abstract path="vscode.EndOfLine" params="" file="src/vscode/EndOfLine.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents an end of line character sequence in a [document](#TextDocument).</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"EndOfLine"</e>
			</m>
		</meta>
		<impl><class path="vscode._EndOfLine.EndOfLine_Impl_" params="" file="src/vscode/EndOfLine.hx" private="1" module="vscode.EndOfLine" extern="1">
	<LF public="1" set="null" static="1">
		<x path="vscode.EndOfLine"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The line feed `\n` character.</haxe_doc>
	</LF>
	<CRLF public="1" set="null" static="1">
		<x path="vscode.EndOfLine"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The carriage return line feed `\r\n` sequence.</haxe_doc>
	</CRLF>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"EndOfLine"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._EndOfLine.EndOfLine_Impl_" params="" file="src/vscode/EndOfLine.hx" private="1" module="vscode.EndOfLine" extern="1">
		<LF public="1" set="null" static="1">
			<x path="vscode.EndOfLine"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The line feed `\n` character.</haxe_doc>
		</LF>
		<CRLF public="1" set="null" static="1">
			<x path="vscode.EndOfLine"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The carriage return line feed `\r\n` sequence.</haxe_doc>
		</CRLF>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"EndOfLine"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.EnterAction" params="" file="src/vscode/EnterAction.hx">
		<a>
			<removeText>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Describes the number of characters to remove from the new line's indentation.</haxe_doc>
			</removeText>
			<indentAction>
				<x path="vscode.IndentAction"/>
				<haxe_doc>* Describe what to do with the indentation.</haxe_doc>
			</indentAction>
			<appendText>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Describes text to be appended after the new line and after the indentation.</haxe_doc>
			</appendText>
		</a>
		<haxe_doc>* Describes what to do when pressing Enter.</haxe_doc>
	</typedef>
	<typedef path="vscode.EnvironmentVariableCollection" params="" file="src/vscode/EnvironmentVariableCollection.hx">
		<a>
			<replace set="method">
				<f a="variable:value">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Replace an environment variable with a value.
	 *
	 * Note that an extension can only make a single change to any one variable, so this will
	 * overwrite any previous calls to replace, append or prepend.
	 *
	 * @param variable The variable to replace.
	 * @param value The value to replace the variable with.</haxe_doc>
			</replace>
			<prepend set="method">
				<f a="variable:value">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Prepend a value to an environment variable.
	 *
	 * Note that an extension can only make a single change to any one variable, so this will
	 * overwrite any previous calls to replace, append or prepend.
	 *
	 * @param variable The variable to prepend.
	 * @param value The value to prepend to the variable.</haxe_doc>
			</prepend>
			<persistent>
				<x path="Bool"/>
				<haxe_doc>* Whether the collection should be cached for the workspace and applied to the terminal
	 * across window reloads. When true the collection will be active immediately such when the
	 * window reloads. Additionally, this API will return the cached version if it exists. The
	 * collection will be invalidated when the extension is uninstalled or when the collection
	 * is cleared. Defaults to true.</haxe_doc>
			</persistent>
			<get set="method">
				<f a="variable">
					<c path="String"/>
					<x path="Null"><t path="vscode.EnvironmentVariableMutator"/></x>
				</f>
				<haxe_doc>* Gets the mutator that this collection applies to a variable, if any.
	 *
	 * @param variable The variable to get the mutator for.</haxe_doc>
			</get>
			<forEach set="method">
				<f a="callback:?thisArg">
					<f a="variable:mutator:collection">
						<c path="String"/>
						<t path="vscode.EnvironmentVariableMutator"/>
						<t path="vscode.EnvironmentVariableCollection"/>
						<x path="Any"/>
					</f>
					<x path="Any"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Iterate over each mutator in this collection.
	 *
	 * @param callback Function to execute for each entry.
	 * @param thisArg The `this` context used when invoking the handler function.</haxe_doc>
			</forEach>
			<delete set="method">
				<f a="variable">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Deletes this collection's mutator for a variable.
	 *
	 * @param variable The variable to delete the mutator for.</haxe_doc>
			</delete>
			<clear set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Clears all mutators from this collection.</haxe_doc>
			</clear>
			<append set="method">
				<f a="variable:value">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Append a value to an environment variable.
	 *
	 * Note that an extension can only make a single change to any one variable, so this will
	 * overwrite any previous calls to replace, append or prepend.
	 *
	 * @param variable The variable to append to.
	 * @param value The value to append to the variable.</haxe_doc>
			</append>
		</a>
		<haxe_doc>* A collection of mutations that an extension can apply to a process environment.</haxe_doc>
	</typedef>
	<typedef path="vscode.EnvironmentVariableMutator" params="" file="src/vscode/EnvironmentVariableMutator.hx">
		<a>
			<value final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The value to use for the variable.</haxe_doc>
			</value>
			<type final="1" set="null">
				<x path="vscode.EnvironmentVariableMutatorType"/>
				<haxe_doc>* The type of mutation that will occur to the variable.</haxe_doc>
			</type>
		</a>
		<haxe_doc>* A type of mutation and its value to be applied to an environment variable.</haxe_doc>
	</typedef>
	<abstract path="vscode.EnvironmentVariableMutatorType" params="" file="src/vscode/EnvironmentVariableMutatorType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A type of mutation that can be applied to an environment variable.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"EnvironmentVariableMutatorType"</e>
			</m>
		</meta>
		<impl><class path="vscode._EnvironmentVariableMutatorType.EnvironmentVariableMutatorType_Impl_" params="" file="src/vscode/EnvironmentVariableMutatorType.hx" private="1" module="vscode.EnvironmentVariableMutatorType" extern="1">
	<Replace public="1" set="null" static="1">
		<x path="vscode.EnvironmentVariableMutatorType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Replace the variable's existing value.</haxe_doc>
	</Replace>
	<Append public="1" set="null" static="1">
		<x path="vscode.EnvironmentVariableMutatorType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Append to the end of the variable's existing value.</haxe_doc>
	</Append>
	<Prepend public="1" set="null" static="1">
		<x path="vscode.EnvironmentVariableMutatorType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Prepend to the start of the variable's existing value.</haxe_doc>
	</Prepend>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"EnvironmentVariableMutatorType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._EnvironmentVariableMutatorType.EnvironmentVariableMutatorType_Impl_" params="" file="src/vscode/EnvironmentVariableMutatorType.hx" private="1" module="vscode.EnvironmentVariableMutatorType" extern="1">
		<Replace public="1" set="null" static="1">
			<x path="vscode.EnvironmentVariableMutatorType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Replace the variable's existing value.</haxe_doc>
		</Replace>
		<Append public="1" set="null" static="1">
			<x path="vscode.EnvironmentVariableMutatorType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Append to the end of the variable's existing value.</haxe_doc>
		</Append>
		<Prepend public="1" set="null" static="1">
			<x path="vscode.EnvironmentVariableMutatorType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Prepend to the start of the variable's existing value.</haxe_doc>
		</Prepend>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"EnvironmentVariableMutatorType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.EvaluatableExpression" params="" file="src/vscode/EvaluatableExpression.hx" extern="1">
		<range public="1" set="null"><c path="vscode.Range"/></range>
		<expression public="1" set="null"><x path="Null"><c path="String"/></x></expression>
		<new public="1" set="method">
			<f a="range:?expression">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new evaluatable expression object.
	 *
	 * @param range The range in the underlying document from which the evaluatable expression is extracted.
	 * @param expression If specified overrides the extracted expression.</haxe_doc>
		</new>
		<haxe_doc>* An EvaluatableExpression represents an expression in a document that can be evaluated by an active debugger or runtime.
 * The result of this evaluation is shown in a tooltip-like widget.
 * If only a range is specified, the expression will be extracted from the underlying document.
 * An optional expression can be used to override the extracted expression.
 * In this case the range is still used to highlight the range in the document.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"EvaluatableExpression"</e>
</m></meta>
	</class>
	<typedef path="vscode.EvaluatableExpressionProvider" params="" file="src/vscode/EvaluatableExpressionProvider.hx">
		<a><provideEvaluatableExpression set="method">
	<f a="document:position:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.EvaluatableExpression"/></t>
	</f>
	<haxe_doc>* Provide an evaluatable expression for the given document and position.
	 * VS Code will evaluate this expression in the active debug session and will show the result in the debug hover.
	 * The expression can be implicitly specified by the range in the underlying document or by explicitly returning an expression.
	 *
	 * @param document The document for which the debug hover is about to appear.
	 * @param position The line and character position in the document where the debug hover is about to appear.
	 * @param token A cancellation token.
	 * @return An EvaluatableExpression or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideEvaluatableExpression></a>
		<haxe_doc>* The evaluatable expression provider interface defines the contract between extensions and
 * the debug hover. In this contract the provider returns an evaluatable expression for a given position
 * in a document and VS Code evaluates this expression in the active debug session and shows the result in a debug hover.</haxe_doc>
	</typedef>
	<typedef path="vscode.Event" params="T" file="src/vscode/Event.hx">
		<f a=":?:?">
			<f a="">
				<c path="vscode.Event.T"/>
				<x path="Void"/>
			</f>
			<x path="Any"/>
			<c path="Array"><c path="vscode.Disposable"/></c>
			<c path="vscode.Disposable"/>
		</f>
		<haxe_doc>* Represents a typed event.
 *
 * A function that represents an event to which you subscribe by calling it with
 * a listener function as argument.
 *
 * @param listener The listener function will be called when the event happens.
 * @param thisArgs The `this`-argument which will be used when calling the event listener.
 * @param disposables An array to which a [disposable](#Disposable) will be added.
 * @return A disposable which unsubscribes the event listener.
 *
 * @example
 * item.onDidChange(function(event) { console.log("Event happened: " + event); });</haxe_doc>
	</typedef>
	<class path="vscode.EventEmitter" params="T" file="src/vscode/EventEmitter.hx" extern="1">
		<event public="1">
			<t path="vscode.Event"><c path="vscode.EventEmitter.T"/></t>
			<haxe_doc>* The event listeners can subscribe to.</haxe_doc>
		</event>
		<fire public="1" set="method">
			<f a="?data">
				<c path="vscode.EventEmitter.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Notify all subscribers of the [event](#EventEmitter.event). Failure
	 * of one or more listener will not fail this function call.
	 *
	 * @param data The event object.</haxe_doc>
		</fire>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Dispose this object and free resources.</haxe_doc>
		</dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* An event emitter can be used to create and manage an [event](#Event) for others
 * to subscribe to. One emitter always owns one event.
 *
 * Use this class if you want to provide event from within your extension, for instance
 * inside a [TextDocumentContentProvider](#TextDocumentContentProvider) or when providing
 * API to other extensions.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"EventEmitter"</e>
</m></meta>
	</class>
	<typedef path="vscode.Extension" params="T" file="src/vscode/Extension.hx">
		<a>
			<packageJSON set="null">
				<x path="Any"/>
				<haxe_doc>* The parsed contents of the extension's package.json.</haxe_doc>
			</packageJSON>
			<isActive set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if the extension has been activated.</haxe_doc>
			</isActive>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The canonical extension identifier in the form of: `publisher.name`.</haxe_doc>
			</id>
			<extensionUri set="null">
				<c path="String"/>
				<haxe_doc>* The uri of the directory containing the extension.</haxe_doc>
			</extensionUri>
			<extensionPath set="null">
				<c path="String"/>
				<haxe_doc>* The absolute file path of the directory containing this extension.</haxe_doc>
			</extensionPath>
			<extensionKind>
				<x path="vscode.ExtensionKind"/>
				<haxe_doc>* The extension kind describes if an extension runs where the UI runs
	 * or if an extension runs where the remote extension host runs. The extension kind
	 * is defined in the `package.json`-file of extensions but can also be refined
	 * via the the `remote.extensionKind`-setting. When no remote extension host exists,
	 * the value is [`ExtensionKind.UI`](#ExtensionKind.UI).</haxe_doc>
			</extensionKind>
			<exports>
				<c path="vscode.Extension.T"/>
				<haxe_doc>* The public API exported by this extension. It is an invalid action
	 * to access this field before this extension has been activated.</haxe_doc>
			</exports>
			<activate set="method">
				<f a=""><x path="js.lib.Thenable"><c path="vscode.Extension.T"/></x></f>
				<haxe_doc>* Activates this extension and returns its public API.
	 *
	 * @return A promise that will resolve when this extension has been activated.</haxe_doc>
			</activate>
		</a>
		<haxe_doc>* Represents an extension.
 *
 * To get an instance of an `Extension` use [getExtension](#extensions.getExtension).</haxe_doc>
	</typedef>
	<typedef path="vscode.ExtensionContext" params="" file="src/vscode/ExtensionContext.hx">
		<a>
			<workspaceState set="null">
				<a>
					<update set="method">
						<f a="key:value">
							<c path="String"/>
							<x path="Any"/>
							<x path="js.lib.Thenable"><x path="Void"/></x>
						</f>
						<haxe_doc>* Store a value. The value must be JSON-stringifyable.
	 *
	 * @param key A string.
	 * @param value A value. MUST not contain cyclic references.</haxe_doc>
					</update>
					<setKeysForSync set="method">
						<f a="keys">
							<c path="Array"><c path="String"/></c>
							<x path="Void"/>
						</f>
						<haxe_doc>* Set the keys whose values should be synchronized across devices when synchronizing user-data
		 * like configuration, extensions, and mementos.
		 *
		 * Note that this function defines the whole set of keys whose values are synchronized:
		 *  - calling it with an empty array stops synchronization for this memento
		 *  - calling it with a non-empty array replaces all keys whose values are synchronized
		 *
		 * For any given set of keys this function needs to be called only once but there is no harm in
		 * repeatedly calling it.
		 *
		 * @param keys The set of keys whose values are synced.</haxe_doc>
					</setKeysForSync>
					<get params="T" set="method">
						<f a="key">
							<c path="String"/>
							<x path="Null"><c path="get.T"/></x>
						</f>
						<haxe_doc>* Return a value.
	 *
	 * @param key A string.
	 * @param defaultValue A value that should be returned when there is no
	 * value (`undefined`) with the given key.
	 * @return The stored value, `undefined`, or the defaultValue.</haxe_doc>
						<overloads><get public="1" params="T" set="method">
	<f a="key:defaultValue">
		<c path="String"/>
		<c path="get.T"/>
		<c path="get.T"/>
	</f>
	<haxe_doc>* Return a value.
	 *
	 * @param key A string.
	 * @param defaultValue A value that should be returned when there is no
	 * value (`undefined`) with the given key.
	 * @return The stored value, `undefined`, or the defaultValue.</haxe_doc>
</get></overloads>
					</get>
				</a>
				<haxe_doc>* A memento object that stores state in the context
	 * of the currently opened [workspace](#workspace.workspaceFolders).</haxe_doc>
			</workspaceState>
			<subscriptions set="null">
				<c path="Array"><a><dispose set="method"><f a=""><x path="Void"/></f></dispose></a></c>
				<haxe_doc>* An array to which disposables can be added. When this
	 * extension is deactivated the disposables will be disposed.</haxe_doc>
			</subscriptions>
			<storageUri set="null">
				<x path="Null"><c path="vscode.Uri"/></x>
				<haxe_doc>* The uri of a workspace specific directory in which the extension
	 * can store private state. The directory might not exist and creation is
	 * up to the extension. However, the parent directory is guaranteed to be existent.
	 * The value is `undefined` when no workspace nor folder has been opened.
	 *
	 * Use [`workspaceState`](#ExtensionContext.workspaceState) or
	 * [`globalState`](#ExtensionContext.globalState) to store key value data.
	 *
	 * @see [`workspace.fs`](#FileSystem) for how to read and write files and folders from
	 *  an uri.</haxe_doc>
			</storageUri>
			<storagePath set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":deprecated"><e>"Use [storageUri](#ExtensionContext.storageUri) instead."</e></m></meta>
				<haxe_doc>* An absolute file path of a workspace specific directory in which the extension
	 * can store private state. The directory might not exist on disk and creation is
	 * up to the extension. However, the parent directory is guaranteed to be existent.
	 *
	 * Use [`workspaceState`](#ExtensionContext.workspaceState) or
	 * [`globalState`](#ExtensionContext.globalState) to store key value data.</haxe_doc>
			</storagePath>
			<secrets set="null">
				<t path="vscode.SecretStorage"/>
				<haxe_doc>* A storage utility for secrets.</haxe_doc>
			</secrets>
			<logUri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The uri of a directory in which the extension can create log files.
	 * The directory might not exist on disk and creation is up to the extension. However,
	 * the parent directory is guaranteed to be existent.
	 *
	 * @see [`workspace.fs`](#FileSystem) for how to read and write files and folders from
	 *  an uri.</haxe_doc>
			</logUri>
			<logPath set="null">
				<c path="String"/>
				<meta><m n=":deprecated"><e>"Use [logUri](#ExtensionContext.logUri) instead."</e></m></meta>
				<haxe_doc>* An absolute file path of a directory in which the extension can create log files.
	 * The directory might not exist on disk and creation is up to the extension. However,
	 * the parent directory is guaranteed to be existent.</haxe_doc>
			</logPath>
			<globalStorageUri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The uri of a directory in which the extension can store global state.
	 * The directory might not exist on disk and creation is
	 * up to the extension. However, the parent directory is guaranteed to be existent.
	 *
	 * Use [`globalState`](#ExtensionContext.globalState) to store key value data.
	 *
	 * @see [`workspace.fs`](#FileSystem) for how to read and write files and folders from
	 *  an uri.</haxe_doc>
			</globalStorageUri>
			<globalStoragePath set="null">
				<c path="String"/>
				<meta><m n=":deprecated"><e>"Use [globalStorageUri](#ExtensionContext.globalStorageUri) instead."</e></m></meta>
				<haxe_doc>* An absolute file path in which the extension can store global state.
	 * The directory might not exist on disk and creation is
	 * up to the extension. However, the parent directory is guaranteed to be existent.
	 *
	 * Use [`globalState`](#ExtensionContext.globalState) to store key value data.</haxe_doc>
			</globalStoragePath>
			<globalState set="null">
				<t path="vscode.Memento"/>
				<haxe_doc>* A memento object that stores state independent
	 * of the current opened [workspace](#workspace.workspaceFolders).</haxe_doc>
			</globalState>
			<extensionUri set="null">
				<c path="String"/>
				<haxe_doc>* The uri of the directory containing the extension.</haxe_doc>
			</extensionUri>
			<extensionPath set="null">
				<c path="String"/>
				<haxe_doc>* The absolute file path of the directory containing the extension.</haxe_doc>
			</extensionPath>
			<extensionMode set="null">
				<x path="vscode.ExtensionMode"/>
				<haxe_doc>* The mode the extension is running in. This is specific to the current
	 * extension. One extension may be in `ExtensionMode.Development` while
	 * other extensions in the host run in `ExtensionMode.Release`.</haxe_doc>
			</extensionMode>
			<extension set="null">
				<t path="vscode.Extension"><d/></t>
				<haxe_doc>* The current `Extension` instance.</haxe_doc>
			</extension>
			<environmentVariableCollection set="null">
				<t path="vscode.EnvironmentVariableCollection"/>
				<haxe_doc>* Gets the extension's environment variable collection for this workspace, enabling changes
	 * to be applied to terminal environment variables.</haxe_doc>
			</environmentVariableCollection>
			<asAbsolutePath set="method">
				<f a="relativePath">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>* Get the absolute path of a resource contained in the extension.
	 *
	 * *Note* that an absolute uri can be constructed via [`Uri.joinPath`](#Uri.joinPath) and
	 * [`extensionUri`](#ExtensionContext.extensionUri), e.g. `vscode.Uri.joinPath(context.extensionUri, relativePath);`
	 *
	 * @param relativePath A relative path to a resource contained in the extension.
	 * @return The absolute path of the resource.</haxe_doc>
			</asAbsolutePath>
		</a>
		<haxe_doc>* An extension context is a collection of utilities private to an
 * extension.
 *
 * An instance of an `ExtensionContext` is provided as the first
 * parameter to the `activate`-call of an extension.</haxe_doc>
	</typedef>
	<abstract path="vscode.ExtensionKind" params="" file="src/vscode/ExtensionKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* In a remote window the extension kind describes if an extension
 * runs where the UI (window) runs or if an extension runs remotely.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ExtensionKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._ExtensionKind.ExtensionKind_Impl_" params="" file="src/vscode/ExtensionKind.hx" private="1" module="vscode.ExtensionKind" extern="1">
	<UI public="1" set="null" static="1">
		<x path="vscode.ExtensionKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Extension runs where the UI runs.</haxe_doc>
	</UI>
	<Workspace public="1" set="null" static="1">
		<x path="vscode.ExtensionKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Extension runs where the remote extension host runs.</haxe_doc>
	</Workspace>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ExtensionKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ExtensionKind.ExtensionKind_Impl_" params="" file="src/vscode/ExtensionKind.hx" private="1" module="vscode.ExtensionKind" extern="1">
		<UI public="1" set="null" static="1">
			<x path="vscode.ExtensionKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Extension runs where the UI runs.</haxe_doc>
		</UI>
		<Workspace public="1" set="null" static="1">
			<x path="vscode.ExtensionKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Extension runs where the remote extension host runs.</haxe_doc>
		</Workspace>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ExtensionKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.ExtensionMode" params="" file="src/vscode/ExtensionMode.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The ExtensionMode is provided on the `ExtensionContext` and indicates the
 * mode the specific extension is running in.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ExtensionMode"</e>
			</m>
		</meta>
		<impl><class path="vscode._ExtensionMode.ExtensionMode_Impl_" params="" file="src/vscode/ExtensionMode.hx" private="1" module="vscode.ExtensionMode" extern="1">
	<Production public="1" set="null" static="1">
		<x path="vscode.ExtensionMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The extension is installed normally (for example, from the marketplace
	 * or VSIX) in VS Code.</haxe_doc>
	</Production>
	<Development public="1" set="null" static="1">
		<x path="vscode.ExtensionMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The extension is running from an `--extensionDevelopmentPath` provided
	 * when launching VS Code.</haxe_doc>
	</Development>
	<Test public="1" set="null" static="1">
		<x path="vscode.ExtensionMode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The extension is running from an `--extensionTestsPath` and
	 * the extension host is running unit tests.</haxe_doc>
	</Test>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ExtensionMode"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ExtensionMode.ExtensionMode_Impl_" params="" file="src/vscode/ExtensionMode.hx" private="1" module="vscode.ExtensionMode" extern="1">
		<Production public="1" set="null" static="1">
			<x path="vscode.ExtensionMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The extension is installed normally (for example, from the marketplace
	 * or VSIX) in VS Code.</haxe_doc>
		</Production>
		<Development public="1" set="null" static="1">
			<x path="vscode.ExtensionMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The extension is running from an `--extensionDevelopmentPath` provided
	 * when launching VS Code.</haxe_doc>
		</Development>
		<Test public="1" set="null" static="1">
			<x path="vscode.ExtensionMode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The extension is running from an `--extensionTestsPath` and
	 * the extension host is running unit tests.</haxe_doc>
		</Test>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ExtensionMode"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.ExtensionTerminalOptions" params="" file="src/vscode/ExtensionTerminalOptions.hx">
		<a>
			<pty>
				<t path="vscode.Pseudoterminal"/>
				<haxe_doc>* An implementation of [Pseudoterminal](#Pseudoterminal) that allows an extension to
	 * control a terminal.</haxe_doc>
			</pty>
			<name>
				<c path="String"/>
				<haxe_doc>* A human-readable string which will be used to represent the terminal in the UI.</haxe_doc>
			</name>
		</a>
		<haxe_doc>* Value-object describing what options a virtual process terminal should use.</haxe_doc>
	</typedef>
	<typedef path="vscode.FileChangeEvent" params="" file="src/vscode/FileChangeEvent.hx">
		<a>
			<uri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The uri of the file that has changed.</haxe_doc>
			</uri>
			<type set="null">
				<x path="vscode.FileChangeType"/>
				<haxe_doc>* The type of change.</haxe_doc>
			</type>
		</a>
		<haxe_doc>* The event filesystem providers must use to signal a file change.</haxe_doc>
	</typedef>
	<abstract path="vscode.FileChangeType" params="" file="src/vscode/FileChangeType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Enumeration of file change types.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FileChangeType"</e>
			</m>
		</meta>
		<impl><class path="vscode._FileChangeType.FileChangeType_Impl_" params="" file="src/vscode/FileChangeType.hx" private="1" module="vscode.FileChangeType" extern="1">
	<Changed public="1" set="null" static="1">
		<x path="vscode.FileChangeType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The contents or metadata of a file have changed.</haxe_doc>
	</Changed>
	<Created public="1" set="null" static="1">
		<x path="vscode.FileChangeType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* A file has been created.</haxe_doc>
	</Created>
	<Deleted public="1" set="null" static="1">
		<x path="vscode.FileChangeType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* A file has been deleted.</haxe_doc>
	</Deleted>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"FileChangeType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._FileChangeType.FileChangeType_Impl_" params="" file="src/vscode/FileChangeType.hx" private="1" module="vscode.FileChangeType" extern="1">
		<Changed public="1" set="null" static="1">
			<x path="vscode.FileChangeType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The contents or metadata of a file have changed.</haxe_doc>
		</Changed>
		<Created public="1" set="null" static="1">
			<x path="vscode.FileChangeType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* A file has been created.</haxe_doc>
		</Created>
		<Deleted public="1" set="null" static="1">
			<x path="vscode.FileChangeType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* A file has been deleted.</haxe_doc>
		</Deleted>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FileChangeType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.FileCreateEvent" params="" file="src/vscode/FileCreateEvent.hx">
		<a><files set="null">
	<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
	<haxe_doc>* The files that got created.</haxe_doc>
</files></a>
		<haxe_doc>* An event that is fired after files are created.</haxe_doc>
	</typedef>
	<class path="vscode.FileDecoration" params="" file="src/vscode/FileDecoration.hx" extern="1">
		<badge public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A very short string that represents this decoration.</haxe_doc>
		</badge>
		<tooltip public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A human-readable tooltip for this decoration.</haxe_doc>
		</tooltip>
		<color public="1">
			<x path="Null"><c path="vscode.ThemeColor"/></x>
			<haxe_doc>* The color of this decoration.</haxe_doc>
		</color>
		<propagate public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* A flag expressing that this decoration should be
	 * propagated to its parents.</haxe_doc>
		</propagate>
		<new public="1" set="method">
			<f a="?badge:?tooltip:?color">
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.ThemeColor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new decoration.
	 *
	 * @param badge A letter that represents the decoration.
	 * @param tooltip The tooltip of the decoration.
	 * @param color The color of the decoration.</haxe_doc>
		</new>
		<haxe_doc>* A file decoration represents metadata that can be rendered with a file.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileDecoration"</e>
</m></meta>
	</class>
	<typedef path="vscode.FileDecorationProvider" params="" file="src/vscode/FileDecorationProvider.hx">
		<a>
			<provideFileDecoration set="method">
				<f a="uri:token">
					<c path="vscode.Uri"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.FileDecoration"/></t>
				</f>
				<haxe_doc>* Provide decorations for a given uri.
	 *
	 * *Note* that this function is only called when a file gets rendered in the UI.
	 * This means a decoration from a descendent that propagates upwards must be signaled
	 * to the editor via the [onDidChangeFileDecorations](#FileDecorationProvider.onDidChangeFileDecorations)-event.
	 *
	 * @param uri The uri of the file to provide a decoration for.
	 * @param token A cancellation token.
	 * @returns A decoration or a thenable that resolves to such.</haxe_doc>
			</provideFileDecoration>
			<onDidChangeFileDecorations>
				<x path="Null"><t path="vscode.Event"><x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.Uri"/>
	<c path="Array"><c path="vscode.Uri"/></c>
</x></x></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that decorations for one or many files have changed.
	 *
	 * *Note* that this event should be used to propagate information about children.
	 *
	 * @see [EventEmitter](#EventEmitter)</haxe_doc>
			</onDidChangeFileDecorations>
		</a>
		<haxe_doc>* The decoration provider interfaces defines the contract between extensions and
 * file decorations.</haxe_doc>
	</typedef>
	<typedef path="vscode.FileDeleteEvent" params="" file="src/vscode/FileDeleteEvent.hx">
		<a><files set="null">
	<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
	<haxe_doc>* The files that got deleted.</haxe_doc>
</files></a>
		<haxe_doc>* An event that is fired after files are deleted.</haxe_doc>
	</typedef>
	<typedef path="vscode.FileRenameEvent" params="" file="src/vscode/FileRenameEvent.hx">
		<a><files set="null">
	<x path="haxe.ds.ReadOnlyArray"><a>
	<oldUri><c path="vscode.Uri"/></oldUri>
	<newUri><c path="vscode.Uri"/></newUri>
</a></x>
	<haxe_doc>* The files that got renamed.</haxe_doc>
</files></a>
		<haxe_doc>* An event that is fired after files are renamed.</haxe_doc>
	</typedef>
	<typedef path="vscode.FileStat" params="" file="src/vscode/FileStat.hx">
		<a>
			<type>
				<x path="vscode.FileType"/>
				<haxe_doc>* The type of the file, e.g. is a regular file, a directory, or symbolic link
	 * to a file.
	 *
	 * *Note:* This value might be a bitmask, e.g. `FileType.File | FileType.SymbolicLink`.</haxe_doc>
			</type>
			<size>
				<x path="Int"/>
				<haxe_doc>* The size in bytes.
	 *
	 * *Note:* If the file changed, it is important to provide an updated `size`. Otherwise there
	 * may be optimizations in place that will not show the updated file contents in an editor for
	 * example.</haxe_doc>
			</size>
			<mtime>
				<x path="Int"/>
				<haxe_doc>* The modification timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.
	 *
	 * *Note:* If the file changed, it is important to provide an updated `mtime` that advanced
	 * from the previous value. Otherwise there may be optimizations in place that will not show
	 * the updated file contents in an editor for example.</haxe_doc>
			</mtime>
			<ctime>
				<x path="Int"/>
				<haxe_doc>* The creation timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.</haxe_doc>
			</ctime>
		</a>
		<haxe_doc>* The `FileStat`-type represents metadata about a file</haxe_doc>
	</typedef>
	<typedef path="vscode.FileSystem" params="" file="src/vscode/FileSystem.hx">
		<a>
			<writeFile set="method">
				<f a="uri:content">
					<c path="vscode.Uri"/>
					<c path="js.lib.Uint8Array"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Write data to a file, replacing its entire contents.
	 *
	 * @param uri The uri of the file.
	 * @param content The new content of the file.</haxe_doc>
			</writeFile>
			<stat set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="js.lib.Thenable"><t path="vscode.FileStat"/></x>
				</f>
				<haxe_doc>* Retrieve metadata about a file.
	 *
	 * @param uri The uri of the file to retrieve metadata about.
	 * @return The file metadata about the file.</haxe_doc>
			</stat>
			<rename set="method">
				<f a="source:target:?options">
					<c path="vscode.Uri"/>
					<c path="vscode.Uri"/>
					<a><overwrite>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</overwrite></a>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Rename a file or folder.
	 *
	 * @param oldUri The existing file.
	 * @param newUri The new location.
	 * @param options Defines if existing files should be overwritten.</haxe_doc>
			</rename>
			<readFile set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="js.lib.Thenable"><c path="js.lib.Uint8Array"/></x>
				</f>
				<haxe_doc>* Read the entire contents of a file.
	 *
	 * @param uri The uri of the file.
	 * @return An array of bytes or a thenable that resolves to such.</haxe_doc>
			</readFile>
			<readDirectory set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="js.lib.Thenable"><c path="Array"><x path="vscode.FileSystemReadDirectoryTuple"/></c></x>
				</f>
				<haxe_doc>* Retrieve all entries of a [directory](#FileType.Directory).
	 *
	 * @param uri The uri of the folder.
	 * @return An array of name/type-tuples or a thenable that resolves to such.</haxe_doc>
			</readDirectory>
			<isWritableFileSystem set="method">
				<f a="scheme">
					<c path="String"/>
					<x path="Null"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Check if a given file system supports writing files.
	 *
	 * Keep in mind that just because a file system supports writing, that does
	 * not mean that writes will always succeed. There may be permissions issues
	 * or other errors that prevent writing a file.
	 *
	 * @param scheme The scheme of the filesystem, for example `file` or `git`.
	 *
	 * @return `true` if the file system supports writing, `false` if it does not
	 * support writing (i.e. it is readonly), and `undefined` if VS Code does not
	 * know about the filesystem.</haxe_doc>
			</isWritableFileSystem>
			<delete set="method">
				<f a="uri:?options">
					<c path="vscode.Uri"/>
					<a>
						<useTrash>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</useTrash>
						<recursive>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</recursive>
					</a>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Delete a file.
	 *
	 * @param uri The resource that is to be deleted.
	 * @param options Defines if trash can should be used and if deletion of folders is recursive</haxe_doc>
			</delete>
			<createDirectory set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Create a new directory (Note, that new files are created via `write`-calls).
	 *
	 * *Note* that missing directories are created automatically, e.g this call has
	 * `mkdirp` semantics.
	 *
	 * @param uri The uri of the new folder.</haxe_doc>
			</createDirectory>
			<copy set="method">
				<f a="source:target:?options">
					<c path="vscode.Uri"/>
					<c path="vscode.Uri"/>
					<a><overwrite>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</overwrite></a>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Copy files or folders.
	 *
	 * @param source The existing file.
	 * @param destination The destination location.
	 * @param options Defines if existing files should be overwritten.</haxe_doc>
			</copy>
		</a>
		<haxe_doc>* The file system interface exposes the editor's built-in and contributed
 * [file system providers](#FileSystemProvider). It allows extensions to work
 * with files from the local disk as well as files from remote places, like the
 * remote extension host or ftp-servers.
 *
 * *Note* that an instance of this interface is available as [`workspace.fs`](#workspace.fs).</haxe_doc>
	</typedef>
	<abstract path="vscode.FileSystemReadDirectoryTuple" params="" file="src/vscode/FileSystem.hx" module="vscode.FileSystem">
		<this><c path="Array"><d/></c></this>
		<meta><m n=":dce"/></meta>
		<impl><class path="vscode._FileSystem.FileSystemReadDirectoryTuple_Impl_" params="" file="src/vscode/FileSystem.hx" private="1" module="vscode.FileSystem">
	<name public="1" get="accessor" set="null" static="1">
		<c path="String"/>
		<meta><m n=":impl"/></meta>
	</name>
	<type public="1" get="accessor" set="null" static="1">
		<x path="vscode.FileType"/>
		<meta><m n=":impl"/></meta>
	</type>
	<meta>
		<m n=":keep"/>
		<m n=":dce"/>
		<m n=":dce"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode.FileSystemError" params="" file="src/vscode/FileSystemError.hx" extern="1">
		<extends path="js.lib.Error"/>
		<FileNotFound public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that a file or folder wasn't found.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</FileNotFound>
		<FileExists public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that a file or folder already exists, e.g. when
	 * creating but not overwriting a file.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</FileExists>
		<FileNotADirectory public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that a file is not a folder.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</FileNotADirectory>
		<FileIsADirectory public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that a file is a folder.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</FileIsADirectory>
		<NoPermissions public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that an operation lacks required permissions.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</NoPermissions>
		<Unavailable public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that the file system is unavailable or too busy to
	 * complete a request.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</Unavailable>
		<code public="1" set="null">
			<c path="String"/>
			<haxe_doc>* A code that identifies this error.
	 *
	 * Possible values are names of errors, like [`FileNotFound`](#FileSystemError.FileNotFound),
	 * or `Unknown` for unspecified errors.</haxe_doc>
		</code>
		<new public="1" set="method">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new filesystem error.
	 *
	 * @param messageOrUri Message or uri.</haxe_doc>
		</new>
		<haxe_doc>* A type that filesystem providers should use to signal errors.
 *
 * This class has factory methods for common error-cases, like `FileNotFound` when
 * a file or folder doesn't exist, use them like so: `throw vscode.FileSystemError.FileNotFound(someUri);`</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileSystemError"</e>
</m></meta>
	</class>
	<typedef path="vscode.FileSystemProvider" params="" file="src/vscode/FileSystemProvider.hx">
		<a>
			<writeFile set="method">
				<f a="uri:content:options">
					<c path="vscode.Uri"/>
					<c path="js.lib.Uint8Array"/>
					<a>
						<overwrite><x path="Bool"/></overwrite>
						<create><x path="Bool"/></create>
					</a>
					<x path="haxe.extern.EitherType">
						<x path="Void"/>
						<x path="js.lib.Thenable"><x path="Void"/></x>
					</x>
				</f>
				<haxe_doc>* Write data to a file, replacing its entire contents.
	 *
	 * @param uri The uri of the file.
	 * @param content The new content of the file.
	 * @param options Defines if missing files should or must be created.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when `uri` doesn't exist and `create` is not set.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when the parent of `uri` doesn't exist and `create` is set, e.g. no mkdirp-logic required.
	 * @throws [`FileExists`](#FileSystemError.FileExists) when `uri` already exists, `create` is set but `overwrite` is not set.
	 * @throws [`NoPermissions`](#FileSystemError.NoPermissions) when permissions aren't sufficient.</haxe_doc>
			</writeFile>
			<watch set="method">
				<f a="uri:options">
					<c path="vscode.Uri"/>
					<a>
						<recursive><x path="Bool"/></recursive>
						<excludes><c path="Array"><c path="String"/></c></excludes>
					</a>
					<c path="vscode.Disposable"/>
				</f>
				<haxe_doc>* Subscribe to events in the file or folder denoted by `uri`.
	 *
	 * The editor will call this function for files and folders. In the latter case, the
	 * options differ from defaults, e.g. what files/folders to exclude from watching
	 * and if subfolders, sub-subfolder, etc. should be watched (`recursive`).
	 *
	 * @param uri The uri of the file to be watched.
	 * @param options Configures the watch.
	 * @returns A disposable that tells the provider to stop watching the `uri`.</haxe_doc>
			</watch>
			<stat set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="haxe.extern.EitherType">
						<t path="vscode.FileStat"/>
						<x path="js.lib.Thenable"><t path="vscode.FileStat"/></x>
					</x>
				</f>
				<haxe_doc>* Retrieve metadata about a file.
	 *
	 * Note that the metadata for symbolic links should be the metadata of the file they refer to.
	 * Still, the [SymbolicLink](#FileType.SymbolicLink)-type must be used in addition to the actual type, e.g.
	 * `FileType.SymbolicLink | FileType.Directory`.
	 *
	 * @param uri The uri of the file to retrieve metadata about.
	 * @return The file metadata about the file.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when `uri` doesn't exist.</haxe_doc>
			</stat>
			<rename set="method">
				<f a="oldUri:newUri:options">
					<c path="vscode.Uri"/>
					<c path="vscode.Uri"/>
					<a><overwrite><x path="Bool"/></overwrite></a>
					<x path="haxe.extern.EitherType">
						<x path="Void"/>
						<x path="js.lib.Thenable"><x path="Void"/></x>
					</x>
				</f>
				<haxe_doc>* Rename a file or folder.
	 *
	 * @param oldUri The existing file.
	 * @param newUri The new location.
	 * @param options Defines if existing files should be overwritten.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when `oldUri` doesn't exist.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when parent of `newUri` doesn't exist, e.g. no mkdirp-logic required.
	 * @throws [`FileExists`](#FileSystemError.FileExists) when `newUri` exists and when the `overwrite` option is not `true`.
	 * @throws [`NoPermissions`](#FileSystemError.NoPermissions) when permissions aren't sufficient.</haxe_doc>
			</rename>
			<readFile set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="haxe.extern.EitherType">
						<c path="js.lib.Uint8Array"/>
						<x path="js.lib.Thenable"><c path="js.lib.Uint8Array"/></x>
					</x>
				</f>
				<haxe_doc>* Read the entire contents of a file.
	 *
	 * @param uri The uri of the file.
	 * @return An array of bytes or a thenable that resolves to such.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when `uri` doesn't exist.</haxe_doc>
			</readFile>
			<onDidChangeFile set="null">
				<t path="vscode.Event"><c path="Array"><t path="vscode.FileChangeEvent"/></c></t>
				<haxe_doc>* An event to signal that a resource has been created, changed, or deleted. This
	 * event should fire for resources that are being [watched](#FileSystemProvider.watch)
	 * by clients of this provider.
	 *
	 * *Note:* It is important that the metadata of the file that changed provides an
	 * updated `mtime` that advanced from the previous value in the [stat](#FileStat) and a
	 * correct `size` value. Otherwise there may be optimizations in place that will not show
	 * the change in an editor for example.</haxe_doc>
			</onDidChangeFile>
			<delete set="method">
				<f a="uri:options">
					<c path="vscode.Uri"/>
					<a><recursive><x path="Bool"/></recursive></a>
					<x path="haxe.extern.EitherType">
						<x path="Void"/>
						<x path="js.lib.Thenable"><x path="Void"/></x>
					</x>
				</f>
				<haxe_doc>* Delete a file.
	 *
	 * @param uri The resource that is to be deleted.
	 * @param options Defines if deletion of folders is recursive.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when `uri` doesn't exist.
	 * @throws [`NoPermissions`](#FileSystemError.NoPermissions) when permissions aren't sufficient.</haxe_doc>
			</delete>
			<createDirectory set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="haxe.extern.EitherType">
						<x path="Void"/>
						<x path="js.lib.Thenable"><x path="Void"/></x>
					</x>
				</f>
				<haxe_doc>* Retrieve all entries of a [directory](#FileType.Directory).
	 *
	 * @param uri The uri of the folder.
	 * @return An array of name/type-tuples or a thenable that resolves to such.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when `uri` doesn't exist.</haxe_doc>
			</createDirectory>
			<copy>
				<x path="Null"><f a="::">
	<c path="vscode.Uri"/>
	<c path="vscode.Uri"/>
	<a><overwrite><x path="Bool"/></overwrite></a>
	<x path="haxe.extern.EitherType">
		<x path="Void"/>
		<x path="js.lib.Thenable"><x path="Void"/></x>
	</x>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Copy files or folders. Implementing this function is optional but it will speedup
	 * the copy operation.
	 *
	 * @param source The existing file.
	 * @param destination The destination location.
	 * @param options Defines if existing files should be overwritten.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when `source` doesn't exist.
	 * @throws [`FileNotFound`](#FileSystemError.FileNotFound) when parent of `destination` doesn't exist, e.g. no mkdirp-logic required.
	 * @throws [`FileExists`](#FileSystemError.FileExists) when `destination` exists and when the `overwrite` option is not `true`.
	 * @throws [`NoPermissions`](#FileSystemError.NoPermissions) when permissions aren't sufficient.</haxe_doc>
			</copy>
		</a>
		<haxe_doc><![CDATA[* The filesystem provider defines what the editor needs to read, write, discover,
 * and to manage files and folders. It allows extensions to serve files from remote places,
 * like ftp-servers, and to seamlessly integrate those into the editor.
 *
 * * *Note 1:* The filesystem provider API works with [uris](#Uri) and assumes hierarchical
 * paths, e.g. `foo:/my/path` is a child of `foo:/my/` and a parent of `foo:/my/path/deeper`.
 * * *Note 2:* There is an activation event `onFileSystem:<scheme>` that fires when a file
 * or folder is being accessed.
 * * *Note 3:* The word 'file' is often used to denote all [kinds](#FileType) of files, e.g.
 * folders, symbolic links, and regular files.]]></haxe_doc>
	</typedef>
	<class path="vscode.FileSystemWatcher" params="" file="src/vscode/FileSystemWatcher.hx" extern="1">
		<extends path="vscode.Disposable"/>
		<ignoreCreateEvents public="1">
			<x path="Bool"/>
			<haxe_doc>* true if this file system watcher has been created such that
	 * it ignores creation file system events.</haxe_doc>
		</ignoreCreateEvents>
		<ignoreChangeEvents public="1">
			<x path="Bool"/>
			<haxe_doc>* true if this file system watcher has been created such that
	 * it ignores change file system events.</haxe_doc>
		</ignoreChangeEvents>
		<ignoreDeleteEvents public="1">
			<x path="Bool"/>
			<haxe_doc>* true if this file system watcher has been created such that
	 * it ignores delete file system events.</haxe_doc>
		</ignoreDeleteEvents>
		<onDidCreate public="1">
			<t path="vscode.Event"><c path="vscode.Uri"/></t>
			<haxe_doc>* An event which fires on file/folder creation.</haxe_doc>
		</onDidCreate>
		<onDidChange public="1">
			<t path="vscode.Event"><c path="vscode.Uri"/></t>
			<haxe_doc>* An event which fires on file/folder change.</haxe_doc>
		</onDidChange>
		<onDidDelete public="1">
			<t path="vscode.Event"><c path="vscode.Uri"/></t>
			<haxe_doc>* An event which fires on file/folder deletion.</haxe_doc>
		</onDidDelete>
		<haxe_doc>* A file system watcher notifies about changes to files and folders
 * on disk or from other [FileSystemProviders](#FileSystemProvider).
 *
 * To get an instance of a `FileSystemWatcher` use
 * [createFileSystemWatcher](#workspace.createFileSystemWatcher).</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileSystemWatcher"</e>
</m></meta>
	</class>
	<abstract path="vscode.FileType" params="" file="src/vscode/FileType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Enumeration of file types. The types `File` and `Directory` can also be
 * a symbolic links, in that case use `FileType.File | FileType.SymbolicLink` and
 * `FileType.Directory | FileType.SymbolicLink`.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FileType"</e>
			</m>
		</meta>
		<impl><class path="vscode._FileType.FileType_Impl_" params="" file="src/vscode/FileType.hx" private="1" module="vscode.FileType" extern="1">
	<Unknown public="1" set="null" static="1">
		<x path="vscode.FileType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The file type is unknown.</haxe_doc>
	</Unknown>
	<File public="1" set="null" static="1">
		<x path="vscode.FileType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* A regular file.</haxe_doc>
	</File>
	<Directory public="1" set="null" static="1">
		<x path="vscode.FileType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* A directory.</haxe_doc>
	</Directory>
	<SymbolicLink public="1" set="null" static="1">
		<x path="vscode.FileType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* A symbolic link to a file.</haxe_doc>
	</SymbolicLink>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"FileType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._FileType.FileType_Impl_" params="" file="src/vscode/FileType.hx" private="1" module="vscode.FileType" extern="1">
		<Unknown public="1" set="null" static="1">
			<x path="vscode.FileType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The file type is unknown.</haxe_doc>
		</Unknown>
		<File public="1" set="null" static="1">
			<x path="vscode.FileType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* A regular file.</haxe_doc>
		</File>
		<Directory public="1" set="null" static="1">
			<x path="vscode.FileType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* A directory.</haxe_doc>
		</Directory>
		<SymbolicLink public="1" set="null" static="1">
			<x path="vscode.FileType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* A symbolic link to a file.</haxe_doc>
		</SymbolicLink>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FileType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.FileWillCreateEvent" params="" file="src/vscode/FileWillCreateEvent.hx">
		<a>
			<waitUntil set="method">
				<f a="thenable">
					<x path="js.lib.Thenable"><c path="vscode.WorkspaceEdit"/></x>
					<x path="Void"/>
				</f>
				<haxe_doc><![CDATA[* Allows to pause the event and to apply a [workspace edit](#WorkspaceEdit).
	 * Allows to pause the event until the provided thenable resolves.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillCreateFiles(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that delays saving.]]></haxe_doc>
				<overloads><waitUntil public="1" set="method">
	<f a="thenable">
		<x path="js.lib.Thenable"><d/></x>
		<x path="Void"/>
	</f>
	<haxe_doc><![CDATA[* Allows to pause the event and to apply a [workspace edit](#WorkspaceEdit).
	 * Allows to pause the event until the provided thenable resolves.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillCreateFiles(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that delays saving.]]></haxe_doc>
</waitUntil></overloads>
			</waitUntil>
			<files set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
				<haxe_doc>* The files that are going to be created.</haxe_doc>
			</files>
		</a>
		<haxe_doc>* An event that is fired when files are going to be created.
 *
 * To make modifications to the workspace before the files are created,
 * call the [`waitUntil](#FileWillCreateEvent.waitUntil)-function with a
 * thenable that resolves to a [workspace edit](#WorkspaceEdit).</haxe_doc>
	</typedef>
	<typedef path="vscode.FileWillDeleteEvent" params="" file="src/vscode/FileWillDeleteEvent.hx">
		<a>
			<waitUntil set="method">
				<f a="thenable">
					<x path="js.lib.Thenable"><c path="vscode.WorkspaceEdit"/></x>
					<x path="Void"/>
				</f>
				<haxe_doc><![CDATA[* Allows to pause the event and to apply a [workspace edit](#WorkspaceEdit).
	 * Allows to pause the event until the provided thenable resolves.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillCreateFiles(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that delays saving.]]></haxe_doc>
				<overloads><waitUntil public="1" set="method">
	<f a="thenable">
		<x path="js.lib.Thenable"><d/></x>
		<x path="Void"/>
	</f>
	<haxe_doc><![CDATA[* Allows to pause the event and to apply a [workspace edit](#WorkspaceEdit).
	 * Allows to pause the event until the provided thenable resolves.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillCreateFiles(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that delays saving.]]></haxe_doc>
</waitUntil></overloads>
			</waitUntil>
			<files set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
				<haxe_doc>* The files that are going to be deleted.</haxe_doc>
			</files>
		</a>
		<haxe_doc>* An event that is fired when files are going to be deleted.
 *
 * To make modifications to the workspace before the files are deleted,
 * call the [`waitUntil](#FileWillCreateEvent.waitUntil)-function with a
 * thenable that resolves to a [workspace edit](#WorkspaceEdit).</haxe_doc>
	</typedef>
	<typedef path="vscode.FileWillRenameEvent" params="" file="src/vscode/FileWillRenameEvent.hx">
		<a>
			<waitUntil set="method">
				<f a="thenable">
					<x path="js.lib.Thenable"><c path="vscode.WorkspaceEdit"/></x>
					<x path="Void"/>
				</f>
				<haxe_doc><![CDATA[* Allows to pause the event and to apply a [workspace edit](#WorkspaceEdit).
	 * Allows to pause the event until the provided thenable resolves.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillCreateFiles(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that delays saving.]]></haxe_doc>
				<overloads><waitUntil public="1" set="method">
	<f a="thenable">
		<x path="js.lib.Thenable"><d/></x>
		<x path="Void"/>
	</f>
	<haxe_doc><![CDATA[* Allows to pause the event and to apply a [workspace edit](#WorkspaceEdit).
	 * Allows to pause the event until the provided thenable resolves.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillCreateFiles(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that delays saving.]]></haxe_doc>
</waitUntil></overloads>
			</waitUntil>
			<files set="null">
				<x path="haxe.ds.ReadOnlyArray"><a>
	<oldUri><c path="vscode.Uri"/></oldUri>
	<newUri><c path="vscode.Uri"/></newUri>
</a></x>
				<haxe_doc>* The files that are going to be renamed.</haxe_doc>
			</files>
		</a>
		<haxe_doc>* An event that is fired when files are going to be renamed.
 *
 * To make modifications to the workspace before the files are renamed,
 * call the [`waitUntil](#FileWillCreateEvent.waitUntil)-function with a
 * thenable that resolves to a [workspace edit](#WorkspaceEdit).</haxe_doc>
	</typedef>
	<typedef path="vscode.FoldingContext" params="" file="src/vscode/FoldingContext.hx">
		<a/>
		<haxe_doc>* Folding context (for future use)</haxe_doc>
	</typedef>
	<class path="vscode.FoldingRange" params="" file="src/vscode/FoldingRange.hx" extern="1">
		<start public="1">
			<x path="Int"/>
			<haxe_doc>* The zero-based start line of the range to fold. The folded area starts after the line's last character.
	 * To be valid, the end must be zero or larger and smaller than the number of lines in the document.</haxe_doc>
		</start>
		<end public="1">
			<x path="Int"/>
			<haxe_doc>* The zero-based end line of the range to fold. The folded area ends with the line's last character.
	 * To be valid, the end must be zero or larger and smaller than the number of lines in the document.</haxe_doc>
		</end>
		<kind public="1">
			<x path="Null"><x path="vscode.FoldingRangeKind"/></x>
			<haxe_doc>* Describes the [Kind](#FoldingRangeKind) of the folding range such as [Comment](#FoldingRangeKind.Comment) or
	 * [Region](#FoldingRangeKind.Region). The kind is used to categorize folding ranges and used by commands
	 * like 'Fold all comments'. See
	 * [FoldingRangeKind](#FoldingRangeKind) for an enumeration of all kinds.
	 * If not set, the range is originated from a syntax element.</haxe_doc>
		</kind>
		<new public="1" set="method">
			<f a="start:end:?kind">
				<x path="Int"/>
				<x path="Int"/>
				<x path="vscode.FoldingRangeKind"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new folding range.
	 *
	 * @param start The start line of the folded range.
	 * @param end The end line of the folded range.
	 * @param kind The kind of the folding range.</haxe_doc>
		</new>
		<haxe_doc>* A line based folding range. To be valid, start and end line must be bigger than zero and smaller than the number of lines in the document.
 * Invalid ranges will be ignored.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FoldingRange"</e>
</m></meta>
	</class>
	<abstract path="vscode.FoldingRangeKind" params="" file="src/vscode/FoldingRangeKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* An enumeration of all folding range kinds. The kind is used to categorize folding ranges.
 * An enumeration of specific folding range kinds. The kind is an optional field of a [FoldingRange](#FoldingRange)
 * and is used to distinguish specific folding ranges such as ranges originated from comments. The kind is used by commands like
 * `Fold all comments` or `Fold all regions`.
 * If the kind is not set on the range, the range originated from a syntax element other than comments, imports or region markers.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FoldingRangeKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._FoldingRangeKind.FoldingRangeKind_Impl_" params="" file="src/vscode/FoldingRangeKind.hx" private="1" module="vscode.FoldingRangeKind" extern="1">
	<Comment public="1" set="null" static="1">
		<x path="vscode.FoldingRangeKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Kind for folding range representing a comment.</haxe_doc>
	</Comment>
	<Imports public="1" set="null" static="1">
		<x path="vscode.FoldingRangeKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Kind for folding range representing a import.</haxe_doc>
	</Imports>
	<Region public="1" set="null" static="1">
		<x path="vscode.FoldingRangeKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Kind for folding range representing regions originating from folding markers like `#region` and `#endregion`.</haxe_doc>
	</Region>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"FoldingRangeKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._FoldingRangeKind.FoldingRangeKind_Impl_" params="" file="src/vscode/FoldingRangeKind.hx" private="1" module="vscode.FoldingRangeKind" extern="1">
		<Comment public="1" set="null" static="1">
			<x path="vscode.FoldingRangeKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Kind for folding range representing a comment.</haxe_doc>
		</Comment>
		<Imports public="1" set="null" static="1">
			<x path="vscode.FoldingRangeKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Kind for folding range representing a import.</haxe_doc>
		</Imports>
		<Region public="1" set="null" static="1">
			<x path="vscode.FoldingRangeKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Kind for folding range representing regions originating from folding markers like `#region` and `#endregion`.</haxe_doc>
		</Region>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FoldingRangeKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.FoldingRangeProvider" params="" file="src/vscode/FoldingRangeProvider.hx">
		<a>
			<provideFoldingRanges set="method">
				<f a="document:context:token">
					<t path="vscode.TextDocument"/>
					<t path="vscode.FoldingContext"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.FoldingRange"/></c></t>
				</f>
				<haxe_doc>* Returns a list of folding ranges or null and undefined if the provider
	 * does not want to participate or was cancelled.
	 * @param document The document in which the command was invoked.
	 * @param context Additional context information (for future use)
	 * @param token A cancellation token.</haxe_doc>
			</provideFoldingRanges>
			<onDidChangeFoldingRanges>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that the folding ranges from this provider have changed.</haxe_doc>
			</onDidChangeFoldingRanges>
		</a>
		<haxe_doc>* The folding range provider interface defines the contract between extensions and
 * [Folding](https://code.visualstudio.com/docs/editor/codebasics#_folding) in the editor.</haxe_doc>
	</typedef>
	<typedef path="vscode.FormattingOptions" params="" file="src/vscode/FormattingOptions.hx">
		<a>
			<tabSize>
				<x path="Int"/>
				<haxe_doc>* Size of a tab in spaces.</haxe_doc>
			</tabSize>
			<insertSpaces>
				<x path="Bool"/>
				<haxe_doc>* Prefer spaces over tabs.</haxe_doc>
			</insertSpaces>
		</a>
		<haxe_doc>* Value-object describing what options formatting should use.</haxe_doc>
	</typedef>
	<class path="vscode.FunctionBreakpoint" params="" file="src/vscode/FunctionBreakpoint.hx" extern="1">
		<extends path="vscode.Breakpoint"/>
		<functionName public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The name of the function to which this breakpoint is attached.</haxe_doc>
		</functionName>
		<new public="1" set="method">
			<f a="functionName:?enabled:?condition:?hitCondition:?logMessage">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new function breakpoint.</haxe_doc>
		</new>
		<haxe_doc>* A breakpoint specified by a function name.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FunctionBreakpoint"</e>
</m></meta>
	</class>
	<typedef path="vscode.GlobPattern" params="" file="src/vscode/GlobPattern.hx">
		<x path="haxe.extern.EitherType">
			<c path="String"/>
			<c path="vscode.RelativePattern"/>
		</x>
		<haxe_doc>* A file glob pattern to match file paths against. This can either be a glob pattern string
 * (like `**​/*.{ts,js}` or `*.{ts,js}`) or a [relative pattern](#RelativePattern).
 *
 * Glob patterns can have the following syntax:
 * * `*` to match one or more characters in a path segment
 * * `?` to match on one character in a path segment
 * * `**` to match any number of path segments, including none
 * * `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
 * * `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
 * * `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
 *
 * Note: a backslash (`\`) is not valid within a glob pattern. If you have an existing file
 * path to match against, consider to use the [relative pattern](#RelativePattern) support
 * that takes care of converting any backslash into slash. Otherwise, make sure to convert
 * any backslash to slash when creating the glob pattern.</haxe_doc>
	</typedef>
	<class path="vscode.Hover" params="" file="src/vscode/Hover.hx" extern="1">
		<contents public="1">
			<c path="Array"><t path="vscode.MarkedString"/></c>
			<haxe_doc>* The contents of this hover.</haxe_doc>
		</contents>
		<range public="1">
			<x path="Null"><c path="vscode.Range"/></x>
			<haxe_doc>* The range to which this hover applies. When missing, the
	 * editor will use the range at the current position or the
	 * current position itself.</haxe_doc>
		</range>
		<new public="1" set="method">
			<f a="contents:?range">
				<x path="haxe.extern.EitherType">
					<t path="vscode.MarkedString"/>
					<c path="Array"><t path="vscode.MarkedString"/></c>
				</x>
				<c path="vscode.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new hover object.
	 *
	 * @param contents The contents of the hover.
	 * @param range The range to which the hover applies.</haxe_doc>
		</new>
		<haxe_doc>* A hover represents additional information for a symbol or word. Hovers are
 * rendered in a tooltip-like widget.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Hover"</e>
</m></meta>
	</class>
	<typedef path="vscode.HoverProvider" params="" file="src/vscode/HoverProvider.hx">
		<a><provideHover set="method">
	<f a="document:position:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.Hover"/></t>
	</f>
	<haxe_doc>* Provide a hover for the given position and document. Multiple hovers at the same
	 * position will be merged by the editor. A hover can have a range which defaults
	 * to the word range at the position when omitted.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @return A hover or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideHover></a>
		<haxe_doc>* The hover provider interface defines the contract between extensions and
 * the [hover](https://code.visualstudio.com/docs/editor/intellisense)-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.ImplementationProvider" params="" file="src/vscode/ImplementationProvider.hx">
		<a><provideImplementation set="method">
	<f a="document:position:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<t path="vscode.Definition"/>
	<c path="Array"><t path="vscode.DefinitionLink"/></c>
</x></t>
	</f>
	<haxe_doc>* Provide the implementations of the symbol at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @return A definition or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideImplementation></a>
		<haxe_doc>* The implementation provider interface defines the contract between extensions and
 * the go to implementation feature.</haxe_doc>
	</typedef>
	<abstract path="vscode.IndentAction" params="" file="src/vscode/IndentAction.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Describes what to do with the indentation when pressing Enter.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"IndentAction"</e>
			</m>
		</meta>
		<impl><class path="vscode._IndentAction.IndentAction_Impl_" params="" file="src/vscode/IndentAction.hx" private="1" module="vscode.IndentAction" extern="1">
	<None public="1" set="null" static="1">
		<x path="vscode.IndentAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Insert new line and copy the previous line's indentation.</haxe_doc>
	</None>
	<Indent public="1" set="null" static="1">
		<x path="vscode.IndentAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Insert new line and indent once (relative to the previous line's indentation).</haxe_doc>
	</Indent>
	<IndentOutdent public="1" set="null" static="1">
		<x path="vscode.IndentAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Insert two new lines:
	 *  - the first one indented which will hold the cursor
	 *  - the second one at the same indentation level</haxe_doc>
	</IndentOutdent>
	<Outdent public="1" set="null" static="1">
		<x path="vscode.IndentAction"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Insert new line and outdent once (relative to the previous line's indentation).</haxe_doc>
	</Outdent>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"IndentAction"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._IndentAction.IndentAction_Impl_" params="" file="src/vscode/IndentAction.hx" private="1" module="vscode.IndentAction" extern="1">
		<None public="1" set="null" static="1">
			<x path="vscode.IndentAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Insert new line and copy the previous line's indentation.</haxe_doc>
		</None>
		<Indent public="1" set="null" static="1">
			<x path="vscode.IndentAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Insert new line and indent once (relative to the previous line's indentation).</haxe_doc>
		</Indent>
		<IndentOutdent public="1" set="null" static="1">
			<x path="vscode.IndentAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Insert two new lines:
	 *  - the first one indented which will hold the cursor
	 *  - the second one at the same indentation level</haxe_doc>
		</IndentOutdent>
		<Outdent public="1" set="null" static="1">
			<x path="vscode.IndentAction"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Insert new line and outdent once (relative to the previous line's indentation).</haxe_doc>
		</Outdent>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"IndentAction"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.IndentationRule" params="" file="src/vscode/IndentationRule.hx">
		<a>
			<unIndentedLinePattern>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.</haxe_doc>
			</unIndentedLinePattern>
			<indentNextLinePattern>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* If a line matches this pattern, then **only the next line** after it should be indented once.</haxe_doc>
			</indentNextLinePattern>
			<increaseIndentPattern>
				<c path="js.lib.RegExp"/>
				<haxe_doc>* If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).</haxe_doc>
			</increaseIndentPattern>
			<decreaseIndentPattern>
				<c path="js.lib.RegExp"/>
				<haxe_doc>* If a line matches this pattern, then all the lines after it should be unindented once (until another rule matches).</haxe_doc>
			</decreaseIndentPattern>
		</a>
		<haxe_doc>* Describes indentation rules for a language.</haxe_doc>
	</typedef>
	<abstract path="vscode.InlineValue" params="" file="src/vscode/InlineValue.hx">
		<from>
			<icast><c path="vscode.InlineValueEvaluatableExpression"/></icast>
			<icast><c path="vscode.InlineValueVariableLookup"/></icast>
			<icast><c path="vscode.InlineValueText"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="vscode.InlineValueEvaluatableExpression"/></icast>
			<icast><c path="vscode.InlineValueVariableLookup"/></icast>
			<icast><c path="vscode.InlineValueText"/></icast>
		</to>
		<haxe_doc>* Inline value information can be provided by different means:
 * - directly as a text value (class InlineValueText).
 * - as a name to use for a variable lookup (class InlineValueVariableLookup)
 * - as an evaluatable expression (class InlineValueEvaluatableExpression)
 * The InlineValue types combines all inline value types into one type.</haxe_doc>
		<impl><class path="vscode._InlineValue.InlineValue_Impl_" params="" file="src/vscode/InlineValue.hx" private="1" module="vscode.InlineValue" extern="1"/></impl>
	</abstract>
	<class path="vscode._InlineValue.InlineValue_Impl_" params="" file="src/vscode/InlineValue.hx" private="1" module="vscode.InlineValue" extern="1"/>
	<typedef path="vscode.InlineValueContext" params="" file="src/vscode/InlineValueContext.hx">
		<a>
			<stoppedLocation set="null">
				<c path="vscode.Range"/>
				<haxe_doc>* The document range where execution has stopped.
	 * Typically the end position of the range denotes the line where the inline values are shown.</haxe_doc>
			</stoppedLocation>
			<frameId set="null">
				<x path="Int"/>
				<haxe_doc>* The stack frame (as a DAP Id) where the execution has stopped.</haxe_doc>
			</frameId>
		</a>
		<haxe_doc>* A value-object that contains contextual information when requesting inline values from a InlineValuesProvider.</haxe_doc>
	</typedef>
	<class path="vscode.InlineValueEvaluatableExpression" params="" file="src/vscode/InlineValueEvaluatableExpression.hx" extern="1">
		<range public="1" set="null">
			<c path="vscode.Range"/>
			<haxe_doc>* The document range for which the inline value applies.
	 * The range is used to extract the evaluatable expression from the underlying document.</haxe_doc>
		</range>
		<expression public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* If specified the expression overrides the extracted expression.</haxe_doc>
		</expression>
		<new public="1" set="method">
			<f a="range:?expression">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new InlineValueEvaluatableExpression object.
	 *
	 * @param range The range in the underlying document from which the evaluatable expression is extracted.
	 * @param expression If specified overrides the extracted expression.</haxe_doc>
		</new>
		<haxe_doc>* Provide an inline value through an expression evaluation.
 * If only a range is specified, the expression will be extracted from the underlying document.
 * An optional expression can be used to override the extracted expression.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlineValueEvaluatableExpression"</e>
</m></meta>
	</class>
	<class path="vscode.InlineValueText" params="" file="src/vscode/InlineValueText.hx" extern="1">
		<range public="1" set="null">
			<c path="vscode.Range"/>
			<haxe_doc>* The document range for which the inline value applies.</haxe_doc>
		</range>
		<text public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The text of the inline value.</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="range:text">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new InlineValueText object.
	 *
	 * @param range The document line where to show the inline value.
	 * @param text The value to be shown for the line.</haxe_doc>
		</new>
		<haxe_doc>* Provide inline value as text.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlineValueText"</e>
</m></meta>
	</class>
	<class path="vscode.InlineValueVariableLookup" params="" file="src/vscode/InlineValueVariableLookup.hx" extern="1">
		<range public="1" set="null">
			<c path="vscode.Range"/>
			<haxe_doc>* The document range for which the inline value applies.
	 * The range is used to extract the variable name from the underlying document.</haxe_doc>
		</range>
		<variableName public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* If specified the name of the variable to look up.</haxe_doc>
		</variableName>
		<caseSensitiveLookup public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* How to perform the lookup.</haxe_doc>
		</caseSensitiveLookup>
		<new public="1" set="method">
			<f a="range:?variableName:?caseSensitiveLookup">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new InlineValueVariableLookup object.
	 *
	 * @param range The document line where to show the inline value.
	 * @param variableName The name of the variable to look up.
	 * @param caseSensitiveLookup How to perform the lookup. If missing lookup is case sensitive.</haxe_doc>
		</new>
		<haxe_doc>* Provide inline value through a variable lookup.
 * If only a range is specified, the variable name will be extracted from the underlying document.
 * An optional variable name can be used to override the extracted name.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlineValueVariableLookup"</e>
</m></meta>
	</class>
	<typedef path="vscode.InlineValuesProvider" params="" file="src/vscode/InlineValuesProvider.hx">
		<a>
			<provideInlineValues set="method">
				<f a="document:viewPort:context:token">
					<t path="vscode.TextDocument"/>
					<c path="vscode.Range"/>
					<t path="vscode.InlineValueContext"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><x path="vscode.InlineValue"/></c></t>
				</f>
				<haxe_doc>* Provide "inline value" information for a given document and range.
	 * VS Code calls this method whenever debugging stops in the given document.
	 * The returned inline values information is rendered in the editor at the end of lines.
	 *
	 * @param document The document for which the inline values information is needed.
	 * @param viewPort The visible document range for which inline values should be computed.
	 * @param context A bag containing contextual information like the current location.
	 * @param token A cancellation token.
	 * @return An array of InlineValueDescriptors or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideInlineValues>
			<onDidChangeInlineValues>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that inline values have changed.
	 * @see [EventEmitter](#EventEmitter)</haxe_doc>
			</onDidChangeInlineValues>
		</a>
		<haxe_doc>* The inline values provider interface defines the contract between extensions and the VS Code debugger inline values feature.
 * In this contract the provider returns inline value information for a given document range
 * and VS Code shows this information in the editor at the end of lines.</haxe_doc>
	</typedef>
	<typedef path="vscode.InputBox" params="" file="src/vscode/InputBox.hx">
		<a>
			<value>
				<c path="String"/>
				<haxe_doc>* Current input value.</haxe_doc>
			</value>
			<validationMessage>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional validation message indicating a problem with the current input value.</haxe_doc>
			</validationMessage>
			<totalSteps>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional total step count.</haxe_doc>
			</totalSteps>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional title.</haxe_doc>
			</title>
			<step>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional current step count.</haxe_doc>
			</step>
			<show set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Makes the input UI visible in its current configuration. Any other input
	 * UI will first fire an [QuickInput.onDidHide](#QuickInput.onDidHide) event.</haxe_doc>
			</show>
			<prompt>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional prompt text providing some ask or explanation to the user.</haxe_doc>
			</prompt>
			<placeholder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional placeholder in the filter text.</haxe_doc>
			</placeholder>
			<password>
				<x path="Bool"/>
				<haxe_doc>* If the input value should be hidden. Defaults to false.</haxe_doc>
			</password>
			<onDidTriggerButton set="null">
				<t path="vscode.Event"><t path="vscode.QuickInputButton"/></t>
				<haxe_doc>* An event signaling when a button was triggered.</haxe_doc>
			</onDidTriggerButton>
			<onDidHide>
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when this input UI is hidden.
	 *
	 * There are several reasons why this UI might have to be hidden and
	 * the extension will be notified through [QuickInput.onDidHide](#QuickInput.onDidHide).
	 * (Examples include: an explicit call to [QuickInput.hide](#QuickInput.hide),
	 * the user pressing Esc, some other input UI opening, etc.)</haxe_doc>
			</onDidHide>
			<onDidChangeValue set="null">
				<t path="vscode.Event"><c path="String"/></t>
				<haxe_doc>* An event signaling when the value has changed.</haxe_doc>
			</onDidChangeValue>
			<onDidAccept set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when the user indicated acceptance of the input value.</haxe_doc>
			</onDidAccept>
			<ignoreFocusOut>
				<x path="Bool"/>
				<haxe_doc>* If the UI should stay open even when loosing UI focus. Defaults to false.</haxe_doc>
			</ignoreFocusOut>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hides this input UI. This will also fire an [QuickInput.onDidHide](#QuickInput.onDidHide)
	 * event.</haxe_doc>
			</hide>
			<enabled>
				<x path="Bool"/>
				<haxe_doc>* If the UI should allow for user input. Defaults to true.
	 *
	 * Change this to false, e.g., while validating user input or
	 * loading data for the next step in user input.</haxe_doc>
			</enabled>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose of this input UI and any associated resources. If it is still
	 * visible, it is first hidden. After this call the input UI is no longer
	 * functional and no additional methods or properties on it should be
	 * accessed. Instead a new input UI should be created.</haxe_doc>
			</dispose>
			<buttons>
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.QuickInputButton"/></x>
				<haxe_doc>* Buttons for actions in the UI.</haxe_doc>
			</buttons>
			<busy>
				<x path="Bool"/>
				<haxe_doc>* If the UI should show a progress indicator. Defaults to false.
	 *
	 * Change this to true, e.g., while loading more data or validating
	 * user input.</haxe_doc>
			</busy>
		</a>
		<haxe_doc>* A concrete [QuickInput](#QuickInput) to let the user input a text value.
 *
 * Note that in many cases the more convenient [window.showInputBox](#window.showInputBox)
 * is easier to use. [window.createInputBox](#window.createInputBox) should be used
 * when [window.showInputBox](#window.showInputBox) does not offer the required flexibility.</haxe_doc>
	</typedef>
	<typedef path="vscode.InputBoxOptions" params="" file="src/vscode/InputBoxOptions.hx">
		<a>
			<valueSelection>
				<x path="Null"><c path="Array"><x path="Int"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Selection of the prefilled [`value`](#InputBoxOptions.value). Defined as tuple of two number where the
	 * first is the inclusive start index and the second the exclusive end index. When `undefined` the whole
	 * word will be selected, when empty (start equals end) only the cursor will be set,
	 * otherwise the defined range will be selected.</haxe_doc>
			</valueSelection>
			<value>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The value to prefill in the input box.</haxe_doc>
			</value>
			<validateInput>
				<x path="Null"><f a="">
	<c path="String"/>
	<t path="vscode.ProviderResult"><x path="Null"><c path="String"/></x></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional function that will be called to validate input and to give a hint
	 * to the user.
	 *
	 * @param value The current value of the input box.
	 * @return A human-readable string which is presented as diagnostic message.
	 * Return `undefined`, `null`, or the empty string when 'value' is valid.</haxe_doc>
			</validateInput>
			<prompt>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The text to display underneath the input box.</haxe_doc>
			</prompt>
			<placeHolder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show as placeholder in the input box to guide the user what to type.</haxe_doc>
			</placeHolder>
			<password>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if a password input is shown. Password input hides the typed text.</haxe_doc>
			</password>
			<ignoreFocusOut>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Set to `true` to keep the input box open when focus moves to another part of the editor or to another window.</haxe_doc>
			</ignoreFocusOut>
		</a>
		<haxe_doc>* Options to configure the behavior of the input box UI.</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageConfiguration" params="" file="src/vscode/LanguageConfiguration.hx">
		<a>
			<wordPattern>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* The language's word definition.
	 * If the language supports Unicode identifiers (e.g. JavaScript), it is preferable
	 * to provide a word definition that uses exclusion of known separators.
	 * e.g.: A regex that matches anything except known separators (and dot is allowed to occur in a floating point number):
	 *   /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g]]></haxe_doc>
			</wordPattern>
			<onEnterRules>
				<x path="Null"><c path="Array"><t path="vscode.OnEnterRule"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The language's rules to be evaluated when pressing Enter.</haxe_doc>
			</onEnterRules>
			<indentationRules>
				<x path="Null"><t path="vscode.IndentationRule"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The language's indentation settings.</haxe_doc>
			</indentationRules>
			<comments>
				<x path="Null"><t path="vscode.CommentRule"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The language's comment settings.</haxe_doc>
			</comments>
			<brackets>
				<x path="Null"><c path="Array"><t path="vscode.CharacterPair"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The language's brackets.
	 * This configuration implicitly affects pressing Enter around these brackets.</haxe_doc>
			</brackets>
			<__electricCharacterSupport>
				<x path="Null"><a>
	<docComment>
		<x path="Null"><a>
	<scope><c path="String"/></scope>
	<open><c path="String"/></open>
	<lineStart><c path="String"/></lineStart>
	<close>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</close>
</a></x>
		<meta>
			<m n=":optional"/>
			<m n=":deprecated"/>
		</meta>
		<haxe_doc>* This property is deprecated and not fully supported anymore by
		 * the editor (scope and lineStart are ignored).
		 * Use the autoClosingPairs property in the language configuration file instead.
		 * @deprecated</haxe_doc>
	</docComment>
	<brackets>
		<x path="Null"><x path="Any"/></x>
		<meta>
			<m n=":optional"/>
			<m n=":deprecated"/>
		</meta>
		<haxe_doc>* This property is deprecated and will be **ignored** from
		 * the editor.
		 * @deprecated</haxe_doc>
	</brackets>
</a></x>
				<meta>
					<m n=":optional"/>
					<m n=":deprecated"><e>"Will be replaced by a better API soon."</e></m>
				</meta>
				<haxe_doc>* **Deprecated** Do not use.
	 *
	 * @deprecated Will be replaced by a better API soon.</haxe_doc>
			</__electricCharacterSupport>
			<__characterPairSupport>
				<x path="Null"><a><autoClosingPairs><c path="Array"><a>
	<open><c path="String"/></open>
	<notIn>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</notIn>
	<close><c path="String"/></close>
</a></c></autoClosingPairs></a></x>
				<meta>
					<m n=":optional"/>
					<m n=":deprecated"><e>"Use the autoClosingPairs property in the language configuration file instead."</e></m>
				</meta>
				<haxe_doc>* **Deprecated** Do not use.
	 *
	 * @deprecated * Use the autoClosingPairs property in the language configuration file instead.</haxe_doc>
			</__characterPairSupport>
		</a>
		<haxe_doc>* The language configuration interfaces defines the contract between extensions
 * and various editor features, like automatic bracket insertion, automatic indentation etc.</haxe_doc>
	</typedef>
	<typedef path="vscode.LinkedEditingRangeProvider" params="" file="src/vscode/LinkedEditingRangeProvider.hx">
		<a><provideLinkedEditingRanges set="method">
	<f a="document:position:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.LinkedEditingRanges"/></t>
	</f>
	<haxe_doc>* For a given position in a document, returns the range of the symbol at the position and all ranges
	 * that have the same content. A change to one of the ranges can be applied to all other ranges if the new content
	 * is valid. An optional word pattern can be returned with the result to describe valid contents.
	 * If no result-specific word pattern is provided, the word pattern from the language configuration is used.
	 *
	 * @param document The document in which the provider was invoked.
	 * @param position The position at which the provider was invoked.
	 * @param token A cancellation token.
	 * @return A list of ranges that can be edited together</haxe_doc>
</provideLinkedEditingRanges></a>
		<haxe_doc>* The linked editing range provider interface defines the contract between extensions and
 * the linked editing feature.</haxe_doc>
	</typedef>
	<class path="vscode.LinkedEditingRanges" params="" file="src/vscode/LinkedEditingRanges.hx" extern="1">
		<ranges public="1" set="null">
			<c path="Array"><c path="vscode.Range"/></c>
			<haxe_doc>* A list of ranges that can be edited together. The ranges must have
	 * identical length and text content. The ranges cannot overlap.</haxe_doc>
		</ranges>
		<wordPattern public="1" set="null">
			<x path="Null"><c path="js.lib.RegExp"/></x>
			<haxe_doc>* An optional word pattern that describes valid contents for the given ranges.
	 * If no pattern is provided, the language configuration's word pattern will be used.</haxe_doc>
		</wordPattern>
		<new public="1" set="method">
			<f a="ranges:?wordPattern">
				<c path="Array"><c path="vscode.Range"/></c>
				<c path="js.lib.RegExp"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new linked editing ranges object.
	 *
	 * @param ranges A list of ranges that can be edited together
	 * @param wordPattern An optional word pattern that describes valid contents for the given ranges</haxe_doc>
		</new>
		<haxe_doc>* Represents a list of ranges that can be edited together along with a word pattern to describe valid range contents.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"LinkedEditingRanges"</e>
</m></meta>
	</class>
	<class path="vscode.Location" params="" file="src/vscode/Location.hx" extern="1">
		<uri public="1">
			<c path="vscode.Uri"/>
			<haxe_doc>* The resource identifier of this location.</haxe_doc>
		</uri>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The document range of this location.</haxe_doc>
		</range>
		<new public="1" set="method">
			<f a="uri:rangeOrPosition">
				<c path="vscode.Uri"/>
				<x path="haxe.extern.EitherType">
					<c path="vscode.Range"/>
					<c path="vscode.Position"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new location object.
	 *
	 * @param uri The resource identifier.
	 * @param rangeOrPosition The range or position. Positions will be converted to an empty range.</haxe_doc>
		</new>
		<haxe_doc>* Represents a location inside a resource, such as a line
 * inside a text file.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Location"</e>
</m></meta>
	</class>
	<typedef path="vscode.LocationLink" params="" file="src/vscode/LocationLink.hx">
		<a>
			<targetUri>
				<c path="vscode.Uri"/>
				<haxe_doc>* The target resource identifier of this link.</haxe_doc>
			</targetUri>
			<targetSelectionRange>
				<x path="Null"><c path="vscode.Range"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The span of this link.</haxe_doc>
			</targetSelectionRange>
			<targetRange>
				<c path="vscode.Range"/>
				<haxe_doc>* The full target range of this link.</haxe_doc>
			</targetRange>
			<originSelectionRange>
				<x path="Null"><c path="vscode.Range"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Span of the origin of this link.
	 *
	 * Used as the underlined span for mouse definition hover. Defaults to the word range at
	 * the definition position.</haxe_doc>
			</originSelectionRange>
		</a>
		<haxe_doc>* Represents the connection of two locations. Provides additional metadata over normal [locations](#Location),
 * including an origin range.</haxe_doc>
	</typedef>
	<class path="vscode.MarkdownString" params="" file="src/vscode/MarkdownString.hx" extern="1">
		<value public="1">
			<c path="String"/>
			<haxe_doc>* The markdown string.</haxe_doc>
		</value>
		<isTrusted public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Indicates that this markdown string is from a trusted source. Only *trusted*
	 * markdown supports links that execute commands, e.g. `[Run it](command:myCommandId)`.</haxe_doc>
		</isTrusted>
		<supportThemeIcons public="1" set="null">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Indicates that this markdown string can contain [ThemeIcons](#ThemeIcon), e.g. `$(zap)`.</haxe_doc>
		</supportThemeIcons>
		<appendText public="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="vscode.MarkdownString"/>
			</f>
			<haxe_doc>* Appends and escapes the given string to this markdown string.
	 * @param value Plain text.</haxe_doc>
		</appendText>
		<appendMarkdown public="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="vscode.MarkdownString"/>
			</f>
			<haxe_doc>* Appends the given string 'as is' to this markdown string. When [`supportThemeIcons`](#MarkdownString.supportThemeIcons) is `true`, [ThemeIcons](#ThemeIcon) in the `value` will be iconified.
	 * @param value Markdown string.</haxe_doc>
		</appendMarkdown>
		<appendCodeblock public="1" set="method">
			<f a="value:?language">
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.MarkdownString"/>
			</f>
			<haxe_doc>* Appends the given string as codeblock using the provided language.
	 * @param value A code snippet.
	 * @param language An optional [language identifier](#languages.getLanguages).</haxe_doc>
		</appendCodeblock>
		<new public="1" set="method">
			<f a="?value:?supportThemeIcons">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new markdown string with the given value.
	 *
	 * @param value Optional, initial value.
	 * @param supportThemeIcons Optional, Specifies whether [ThemeIcons](#ThemeIcon) are supported within the [`MarkdownString`](#MarkdownString).</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The MarkdownString represents human-readable text that supports formatting via the
 * markdown syntax. Standard markdown is supported, also tables, but no embedded html.
 *
 * When created with `supportThemeIcons` then rendering of [theme icons](#ThemeIcon) via
 * the `$(<name>)`-syntax is supported.]]></haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"MarkdownString"</e>
</m></meta>
	</class>
	<typedef path="vscode.MarkedString" params="" file="src/vscode/MarkedString.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.MarkdownString"/>
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<a>
					<value><c path="String"/></value>
					<language><c path="String"/></language>
				</a>
			</x>
		</x>
		<haxe_doc>* MarkedString can be used to render human-readable text. It is either a markdown string
 * or a code-block that provides a language and a code snippet. Note that
 * markdown strings will be sanitized - that means html will be escaped.
 *
 * @deprecated This type is deprecated, please use [`MarkdownString`](#MarkdownString) instead.</haxe_doc>
	</typedef>
	<typedef path="vscode.Memento" params="" file="src/vscode/Memento.hx">
		<a>
			<update set="method">
				<f a="key:value">
					<c path="String"/>
					<x path="Any"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Store a value. The value must be JSON-stringifyable.
	 *
	 * @param key A string.
	 * @param value A value. MUST not contain cyclic references.</haxe_doc>
			</update>
			<get params="T" set="method">
				<f a="key">
					<c path="String"/>
					<x path="Null"><c path="get.T"/></x>
				</f>
				<haxe_doc>* Return a value.
	 *
	 * @param key A string.
	 * @param defaultValue A value that should be returned when there is no
	 * value (`undefined`) with the given key.
	 * @return The stored value, `undefined`, or the defaultValue.</haxe_doc>
				<overloads><get public="1" params="T" set="method">
	<f a="key:defaultValue">
		<c path="String"/>
		<c path="get.T"/>
		<c path="get.T"/>
	</f>
	<haxe_doc>* Return a value.
	 *
	 * @param key A string.
	 * @param defaultValue A value that should be returned when there is no
	 * value (`undefined`) with the given key.
	 * @return The stored value, `undefined`, or the defaultValue.</haxe_doc>
</get></overloads>
			</get>
		</a>
		<haxe_doc>* A memento represents a storage utility. It can store and retrieve
 * values.</haxe_doc>
	</typedef>
	<typedef path="vscode.MessageItem" params="" file="src/vscode/MessageItem.hx">
		<a>
			<title>
				<c path="String"/>
				<haxe_doc>* A short title like 'Retry', 'Open Log' etc.</haxe_doc>
			</title>
			<isCloseAffordance>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A hint for modal dialogs that the item should be triggered
	 * when the user cancels the dialog (e.g. by pressing the ESC
	 * key).
	 *
	 * Note: this option is ignored for non-modal messages.</haxe_doc>
			</isCloseAffordance>
		</a>
		<haxe_doc>* Represents an action that is shown with an information, warning, or
 * error message.
 *
 * @see [showInformationMessage](#window.showInformationMessage)
 * @see [showWarningMessage](#window.showWarningMessage)
 * @see [showErrorMessage](#window.showErrorMessage)</haxe_doc>
	</typedef>
	<typedef path="vscode.MessageOptions" params="" file="src/vscode/MessageOptions.hx">
		<a><modal>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Indicates that this message should be modal.</haxe_doc>
</modal></a>
		<haxe_doc>* Options to configure the behavior of the message.
 *
 * @see [showInformationMessage](#window.showInformationMessage)
 * @see [showWarningMessage](#window.showWarningMessage)
 * @see [showErrorMessage](#window.showErrorMessage)</haxe_doc>
	</typedef>
	<typedef path="vscode.OnEnterRule" params="" file="src/vscode/OnEnterRule.hx">
		<a>
			<previousLineText>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* This rule will only execute if the text above the current line matches this regular expression.</haxe_doc>
			</previousLineText>
			<beforeText>
				<c path="js.lib.RegExp"/>
				<haxe_doc>* This rule will only execute if the text before the cursor matches this regular expression.</haxe_doc>
			</beforeText>
			<afterText>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* This rule will only execute if the text after the cursor matches this regular expression.</haxe_doc>
			</afterText>
			<action>
				<t path="vscode.EnterAction"/>
				<haxe_doc>* The action to execute.</haxe_doc>
			</action>
		</a>
		<haxe_doc>* Describes a rule to be evaluated when pressing Enter.</haxe_doc>
	</typedef>
	<typedef path="vscode.OnTypeFormattingEditProvider" params="" file="src/vscode/OnTypeFormattingEditProvider.hx">
		<a><provideOnTypeFormattingEdits set="method">
	<f a="document:position:ch:options:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<c path="String"/>
		<t path="vscode.FormattingOptions"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TextEdit"/></c></t>
	</f>
	<haxe_doc>* Provide formatting edits after a character has been typed.
	 *
	 * The given position and character should hint to the provider
	 * what range the position to expand to, like find the matching `{`
	 * when `}` has been entered.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param ch The character that has been typed.
	 * @param options Options controlling formatting.
	 * @param token A cancellation token.
	 * @return A set of text edits or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideOnTypeFormattingEdits></a>
		<haxe_doc>* The document formatting provider interface defines the contract between extensions and
 * the formatting-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.OpenDialogOptions" params="" file="src/vscode/OpenDialogOptions.hx">
		<a>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Dialog title.
	 *
	 * This parameter might be ignored, as not all operating systems display a title on open dialogs
	 * (for example, macOS).</haxe_doc>
			</title>
			<openLabel>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string for the open button.</haxe_doc>
			</openLabel>
			<filters>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="Array"><c path="String"/></c></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A set of file filters that are used by the dialog. Each entry is a human-readable label,
	 * like "TypeScript", and an array of extensions, e.g.
	 * ```ts
	 * {
	 * 	'Images': ['png', 'jpg']
	 * 	'TypeScript': ['ts', 'tsx']
	 * }
	 * ```</haxe_doc>
			</filters>
			<defaultUri>
				<x path="Null"><c path="vscode.Uri"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The resource the dialog shows when opened.</haxe_doc>
			</defaultUri>
			<canSelectMany>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Allow to select many files or folders.</haxe_doc>
			</canSelectMany>
			<canSelectFolders>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Allow to select folders, defaults to `false`.</haxe_doc>
			</canSelectFolders>
			<canSelectFiles>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Allow to select files, defaults to `true`.</haxe_doc>
			</canSelectFiles>
		</a>
		<haxe_doc>* Options to configure the behaviour of a file open dialog.
 *
 * * Note 1: On Windows and Linux, a file dialog cannot be both a file selector and a folder selector, so if you
 * set both `canSelectFiles` and `canSelectFolders` to `true` on these platforms, a folder selector will be shown.
 * * Note 2: Explicitly setting `canSelectFiles` and `canSelectFolders` to `false` is futile
 * and the editor then silently adjusts the options to select files.</haxe_doc>
	</typedef>
	<typedef path="vscode.OutputChannel" params="" file="src/vscode/OutputChannel.hx">
		<a>
			<show set="method">
				<f a="?preserveFocus">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Reveal this channel in the UI.
	 *
	 * @param preserveFocus When `true` the channel will not take focus.</haxe_doc>
				<overloads><show public="1" set="method">
	<f a="?column:?preservceFocus">
		<x path="vscode.ViewColumn"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Reveal this channel in the UI.
	 *
	 * @param preserveFocus When `true` the channel will not take focus.</haxe_doc>
</show></overloads>
			</show>
			<name>
				<c path="String"/>
				<haxe_doc>* The human-readable name of this output channel.</haxe_doc>
			</name>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hide this channel from the UI.</haxe_doc>
			</hide>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose and free associated resources.</haxe_doc>
			</dispose>
			<clear set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Removes all output from the channel.</haxe_doc>
			</clear>
			<appendLine set="method">
				<f a="value">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Append the given value and a line feed character
	 * to the channel.
	 *
	 * @param value A string, falsy values will be printed.</haxe_doc>
			</appendLine>
			<append set="method">
				<f a="value">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Append the given value to the channel.
	 *
	 * @param value A string, falsy values will not be printed.</haxe_doc>
			</append>
		</a>
		<haxe_doc>* An output channel is a container for readonly textual information.
 *
 * To get an instance of an `OutputChannel` use
 * [createOutputChannel](#window.createOutputChannel).</haxe_doc>
	</typedef>
	<abstract path="vscode.OverviewRulerLane" params="" file="src/vscode/OverviewRulerLane.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents different positions for rendering a decoration in an [overview ruler](#DecorationRenderOptions.overviewRulerLane).
 * The overview ruler supports three lanes.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"OverviewRulerLane"</e>
			</m>
		</meta>
		<impl><class path="vscode._OverviewRulerLane.OverviewRulerLane_Impl_" params="" file="src/vscode/OverviewRulerLane.hx" private="1" module="vscode.OverviewRulerLane" extern="1">
	<Left public="1" set="null" static="1">
		<x path="vscode.OverviewRulerLane"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Left>
	<Center public="1" set="null" static="1">
		<x path="vscode.OverviewRulerLane"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Center>
	<Right public="1" set="null" static="1">
		<x path="vscode.OverviewRulerLane"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Right>
	<Full public="1" set="null" static="1">
		<x path="vscode.OverviewRulerLane"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Full>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"OverviewRulerLane"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._OverviewRulerLane.OverviewRulerLane_Impl_" params="" file="src/vscode/OverviewRulerLane.hx" private="1" module="vscode.OverviewRulerLane" extern="1">
		<Left public="1" set="null" static="1">
			<x path="vscode.OverviewRulerLane"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Left>
		<Center public="1" set="null" static="1">
			<x path="vscode.OverviewRulerLane"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Center>
		<Right public="1" set="null" static="1">
			<x path="vscode.OverviewRulerLane"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Right>
		<Full public="1" set="null" static="1">
			<x path="vscode.OverviewRulerLane"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Full>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"OverviewRulerLane"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.ParameterInformation" params="" file="src/vscode/ParameterInformation.hx" extern="1">
		<label public="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</x>
			<haxe_doc>* The label of this signature. *Note*: Must be a substring of its
	 * containing signature information's [label](#SignatureInformation.label).
	 * The label of this signature.
	 *
	 * Either a string or inclusive start and exclusive end offsets within its containing
	 * [signature label](#SignatureInformation.label). *Note*: A label of type string must be
	 * a substring of its containing signature information's [label](#SignatureInformation.label).</haxe_doc>
		</label>
		<documentation public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* The human-readable doc-comment of this signature. Will be shown
	 * in the UI but can be omitted.</haxe_doc>
		</documentation>
		<new public="1" set="method">
			<f a="label:?documentation">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><x path="Int"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new parameter information object.
	 *
	 * @param label A label string or inclusive start and exclusive end offsets within its containing signature label.
	 * @param documentation A doc string.</haxe_doc>
		</new>
		<haxe_doc>* Represents a parameter of a callable-signature. A parameter can
 * have a label and a doc-comment.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ParameterInformation"</e>
</m></meta>
	</class>
	<class path="vscode.Position" params="" file="src/vscode/Position.hx" extern="1">
		<line public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The zero-based line value.</haxe_doc>
		</line>
		<character public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The zero-based character value.</haxe_doc>
		</character>
		<isBefore public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is before `other`.
	 *
	 * @param other A position.
	 * @return `true` if position is on a smaller line
	 * or on the same line on a smaller character.</haxe_doc>
		</isBefore>
		<isBeforeOrEqual public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is before or equal to `other`.
	 *
	 * @param other A position.
	 * @return `true` if position is on a smaller line
	 * or on the same line on a smaller or equal character.</haxe_doc>
		</isBeforeOrEqual>
		<isAfter public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is after `other`.
	 *
	 * @param other A position.
	 * @return `true` if position is on a greater line
	 * or on the same line on a greater character.</haxe_doc>
		</isAfter>
		<isAfterOrEqual public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is after or equal to `other`.
	 *
	 * @param other A position.
	 * @return `true` if position is on a greater line
	 * or on the same line on a greater or equal character.</haxe_doc>
		</isAfterOrEqual>
		<isEqual public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is equal to `other`.
	 *
	 * @param other A position.
	 * @return `true` if the line and character of the given position are equal to
	 * the line and character of this position.</haxe_doc>
		</isEqual>
		<compareTo public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Compare this to `other`.
	 *
	 * @param other A position.
	 * @return A number smaller than zero if this position is before the given position,
	 * a number greater than zero if this position is after the given position, or zero when
	 * this and the given position are equal.</haxe_doc>
		</compareTo>
		<translate public="1" set="method">
			<f a="?lineDelta:?characterDelta">
				<x path="Int"/>
				<x path="Int"/>
				<c path="vscode.Position"/>
			</f>
			<haxe_doc>* Create a new position relative to this position.
	 *
	 * @param lineDelta Delta value for the line value, default is `0`.
	 * @param characterDelta Delta value for the character value, default is `0`.
	 * @return A position which line and character is the sum of the current line and
	 * character and the corresponding deltas.</haxe_doc>
			<overloads><translate public="1" set="method">
	<f a="change">
		<a>
			<lineDelta>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</lineDelta>
			<characterDelta>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</characterDelta>
		</a>
		<c path="vscode.Position"/>
	</f>
	<haxe_doc>* Create a new position relative to this position.
	 *
	 * @param lineDelta Delta value for the line value, default is `0`.
	 * @param characterDelta Delta value for the character value, default is `0`.
	 * @return A position which line and character is the sum of the current line and
	 * character and the corresponding deltas.</haxe_doc>
</translate></overloads>
		</translate>
		<with public="1" set="method">
			<f a="?line:?character">
				<x path="Int"/>
				<x path="Int"/>
				<c path="vscode.Position"/>
			</f>
			<haxe_doc>* Create a new position derived from this position.
	 *
	 * @param line Value that should be used as line value, default is the [existing value](#Position.line)
	 * @param character Value that should be used as character value, default is the [existing value](#Position.character)
	 * @return A position where line and character are replaced by the given values.</haxe_doc>
			<overloads><with public="1" set="method">
	<f a="change">
		<a>
			<line>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</line>
			<character>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</character>
		</a>
		<c path="vscode.Position"/>
	</f>
	<haxe_doc>* Create a new position derived from this position.
	 *
	 * @param line Value that should be used as line value, default is the [existing value](#Position.line)
	 * @param character Value that should be used as character value, default is the [existing value](#Position.character)
	 * @return A position where line and character are replaced by the given values.</haxe_doc>
</with></overloads>
		</with>
		<new public="1" set="method">
			<f a="line:character">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param line A zero-based line value.
	 * @param character A zero-based character value.</haxe_doc>
		</new>
		<haxe_doc>* Represents a line and character position, such as
 * the position of the cursor.
 *
 * Position objects are __immutable__. Use the [with](#Position.with) or
 * [translate](#Position.translate) methods to derive new positions
 * from an existing position.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Position"</e>
</m></meta>
	</class>
	<class path="vscode.ProcessExecution" params="" file="src/vscode/ProcessExecution.hx" extern="1">
		<process public="1">
			<c path="String"/>
			<haxe_doc>* The process to be executed.</haxe_doc>
		</process>
		<args public="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The arguments passed to the process. Defaults to an empty array.</haxe_doc>
		</args>
		<options public="1">
			<x path="Null"><t path="vscode.ProcessExecutionOptions"/></x>
			<haxe_doc>* The process options used when the process is executed.
	 * Defaults to undefined.</haxe_doc>
		</options>
		<new public="1" set="method">
			<f a="process:?options">
				<c path="String"/>
				<t path="vscode.ProcessExecutionOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a process execution.
	 *
	 * @param process The process to start.
	 * @param args Arguments to be passed to the process.
	 * @param options Optional options for the started process.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="process:args:?options">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<t path="vscode.ProcessExecutionOptions"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Creates a process execution.
	 *
	 * @param process The process to start.
	 * @param args Arguments to be passed to the process.
	 * @param options Optional options for the started process.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* The execution of a task happens as an external process
 * without shell interaction.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ProcessExecution"</e>
</m></meta>
	</class>
	<typedef path="vscode.ProcessExecutionOptions" params="" file="src/vscode/ProcessExecutionOptions.hx">
		<a>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The additional environment of the executed program or shell. If omitted
	 * the parent process' environment is used. If provided it is merged with
	 * the parent process' environment.</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The current working directory of the executed program or shell.
	 * If omitted the tools current workspace root is used.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>* Options for a process execution</haxe_doc>
	</typedef>
	<typedef path="vscode.Progress" params="T" file="src/vscode/Progress.hx">
		<a><report set="method">
	<f a="value">
		<c path="vscode.Progress.T"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Report a progress update.
	 * @param value A progress item, like a message and/or an
	 * report on how much work finished</haxe_doc>
</report></a>
		<haxe_doc>* Defines a generalized way of reporting progress updates.</haxe_doc>
	</typedef>
	<abstract path="vscode.ProgressLocation" params="" file="src/vscode/ProgressLocation.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A location in the editor at which progress information can be shown. It depends on the
 * location how progress is visually represented.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ProgressLocation"</e>
			</m>
		</meta>
		<impl><class path="vscode._ProgressLocation.ProgressLocation_Impl_" params="" file="src/vscode/ProgressLocation.hx" private="1" module="vscode.ProgressLocation" extern="1">
	<SourceControl public="1" set="null" static="1">
		<x path="vscode.ProgressLocation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Show progress for the source control viewlet, as overlay for the icon and as progress bar
	 * inside the viewlet (when visible). Neither supports cancellation nor discrete progress.</haxe_doc>
	</SourceControl>
	<Window public="1" set="null" static="1">
		<x path="vscode.ProgressLocation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Show progress in the status bar of the editor. Neither supports cancellation nor discrete progress.</haxe_doc>
	</Window>
	<Notification public="1" set="null" static="1">
		<x path="vscode.ProgressLocation"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Show progress as notification with an optional cancel button. Supports to show infinite and discrete progress.</haxe_doc>
	</Notification>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ProgressLocation"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ProgressLocation.ProgressLocation_Impl_" params="" file="src/vscode/ProgressLocation.hx" private="1" module="vscode.ProgressLocation" extern="1">
		<SourceControl public="1" set="null" static="1">
			<x path="vscode.ProgressLocation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Show progress for the source control viewlet, as overlay for the icon and as progress bar
	 * inside the viewlet (when visible). Neither supports cancellation nor discrete progress.</haxe_doc>
		</SourceControl>
		<Window public="1" set="null" static="1">
			<x path="vscode.ProgressLocation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Show progress in the status bar of the editor. Neither supports cancellation nor discrete progress.</haxe_doc>
		</Window>
		<Notification public="1" set="null" static="1">
			<x path="vscode.ProgressLocation"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Show progress as notification with an optional cancel button. Supports to show infinite and discrete progress.</haxe_doc>
		</Notification>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ProgressLocation"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.ProgressOptions" params="" file="src/vscode/ProgressOptions.hx">
		<a>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string which will be used to describe the
	 * operation.</haxe_doc>
			</title>
			<location>
				<x path="haxe.extern.EitherType">
					<x path="vscode.ProgressLocation"/>
					<a><viewId><c path="String"/></viewId></a>
				</x>
				<haxe_doc>* The location at which progress should show.</haxe_doc>
			</location>
			<cancellable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if a cancel button should show to allow the user to
	 * cancel the long running operation.  Note that currently only
	 * `ProgressLocation.Notification` is supporting to show a cancel
	 * button.</haxe_doc>
			</cancellable>
		</a>
		<haxe_doc>* Value-object describing where and how progress should show.</haxe_doc>
	</typedef>
	<typedef path="vscode.ProviderResult" params="T" file="src/vscode/ProviderResult.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.ProviderResult.T"/>
			<x path="js.lib.Thenable"><c path="vscode.ProviderResult.T"/></x>
		</x>
		<haxe_doc><![CDATA[* A provider result represents the values a provider, like the [`HoverProvider`](#HoverProvider),
 * may return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves
 * to that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a
 * thenable.
 *
 * The snippets below are all valid implementations of the [`HoverProvider`](#HoverProvider):
 *
 * ```ts
 * let a: HoverProvider = {
 * 	provideHover(doc, pos, token): ProviderResult<Hover> {
 * 		return new Hover('Hello World');
 * 	}
 * }
 *
 * let b: HoverProvider = {
 * 	provideHover(doc, pos, token): ProviderResult<Hover> {
 * 		return new Promise(resolve => {
 * 			resolve(new Hover('Hello World'));
 * 	 	});
 * 	}
 * }
 *
 * let c: HoverProvider = {
 * 	provideHover(doc, pos, token): ProviderResult<Hover> {
 * 		return; // undefined
 * 	}
 * }
 * ```]]></haxe_doc>
	</typedef>
	<typedef path="vscode.Pseudoterminal" params="" file="src/vscode/Pseudoterminal.hx">
		<a>
			<setDimensions set="method">
				<x path="Null"><f a="dimensions">
	<t path="vscode.TerminalDimensions"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Implement to handle when the number of rows and columns that fit into the terminal panel
	 * changes, for example when font size changes or when the panel is resized. The initial
	 * state of a terminal's dimensions should be treated as `undefined` until this is triggered
	 * as the size of a terminal isn't known until it shows up in the user interface.
	 *
	 * When dimensions are overridden by
	 * [onDidOverrideDimensions](#Pseudoterminal.onDidOverrideDimensions), `setDimensions` will
	 * continue to be called with the regular panel dimensions, allowing the extension continue
	 * to react dimension changes.
	 *
	 * @param dimensions The new dimensions.</haxe_doc>
			</setDimensions>
			<open set="method">
				<f a="initialDimensions">
					<x path="Null"><t path="vscode.TerminalDimensions"/></x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Implement to handle when the pty is open and ready to start firing events.
	 *
	 * @param initialDimensions The dimensions of the terminal, this will be undefined if the
	 * terminal panel has not been opened before this is called.</haxe_doc>
			</open>
			<onDidWrite>
				<t path="vscode.Event"><c path="String"/></t>
				<haxe_doc><![CDATA[* An event that when fired will write data to the terminal. Unlike
	 * [Terminal.sendText](#Terminal.sendText) which sends text to the underlying child
	 * pseudo-device (the child), this will write the text to parent pseudo-device (the
	 * _terminal_ itself).
	 *
	 * Note writing `\n` will just move the cursor down 1 row, you need to write `\r` as well
	 * to move the cursor to the left-most cell.
	 *
	 * **Example:** Write red text to the terminal
	 * ```typescript
	 * const writeEmitter = new vscode.EventEmitter<string>();
	 * const pty: vscode.Pseudoterminal = {
	 *   onDidWrite: writeEmitter.event,
	 *   open: () => writeEmitter.fire('\x1b[31mHello world\x1b[0m'),
	 *   close: () => {}
	 * };
	 * vscode.window.createTerminal({ name: 'My terminal', pty });
	 * ```
	 *
	 * **Example:** Move the cursor to the 10th row and 20th column and write an asterisk
	 * ```typescript
	 * writeEmitter.fire('\x1b[10;20H*');
	 * ```]]></haxe_doc>
			</onDidWrite>
			<onDidOverrideDimensions>
				<x path="Null"><t path="vscode.Event"><x path="Null"><t path="vscode.TerminalDimensions"/></x></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* An event that when fired allows overriding the [dimensions](#Pseudoterminal.setDimensions) of the
	 * terminal. Note that when set, the overridden dimensions will only take effect when they
	 * are lower than the actual dimensions of the terminal (ie. there will never be a scroll
	 * bar). Set to `undefined` for the terminal to go back to the regular dimensions (fit to
	 * the size of the panel).
	 *
	 * **Example:** Override the dimensions of a terminal to 20 columns and 10 rows
	 * ```typescript
	 * const dimensionsEmitter = new vscode.EventEmitter<vscode.TerminalDimensions>();
	 * const pty: vscode.Pseudoterminal = {
	 *   onDidWrite: writeEmitter.event,
	 *   onDidOverrideDimensions: dimensionsEmitter.event,
	 *   open: () => {
	 *     dimensionsEmitter.fire({
	 *       columns: 20,
	 *       rows: 10
	 *     });
	 *   },
	 *   close: () => {}
	 * };
	 * vscode.window.createTerminal({ name: 'My terminal', pty });
	 * ```]]></haxe_doc>
			</onDidOverrideDimensions>
			<onDidClose>
				<x path="Null"><t path="vscode.Event"><x path="haxe.extern.EitherType">
	<x path="Void"/>
	<x path="Int"/>
</x></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* An event that when fired will signal that the pty is closed and dispose of the terminal.
	 *
	 * A number can be used to provide an exit code for the terminal. Exit codes must be
	 * positive and a non-zero exit codes signals failure which shows a notification for a
	 * regular terminal and allows dependent tasks to proceed when used with the
	 * `CustomExecution` API.
	 *
	 * **Example:** Exit the terminal when "y" is pressed, otherwise show a notification.
	 * ```typescript
	 * const writeEmitter = new vscode.EventEmitter<string>();
	 * const closeEmitter = new vscode.EventEmitter<vscode.TerminalDimensions>();
	 * const pty: vscode.Pseudoterminal = {
	 *   onDidWrite: writeEmitter.event,
	 *   onDidClose: closeEmitter.event,
	 *   open: () => writeEmitter.fire('Press y to exit successfully'),
	 *   close: () => {},
	 *   handleInput: data => {
	 *     if (data !== 'y') {
	 *       vscode.window.showInformationMessage('Something went wrong');
	 *     }
	 *     closeEmitter.fire();
	 *   }
	 * };
	 * vscode.window.createTerminal({ name: 'Exit example', pty });
	 * ```]]></haxe_doc>
			</onDidClose>
			<handleInput set="method">
				<x path="Null"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* Implement to handle incoming keystrokes in the terminal or when an extension calls
	 * [Terminal.sendText](#Terminal.sendText). `data` contains the keystrokes/text serialized into
	 * their corresponding VT sequence representation.
	 *
	 * @param data The incoming data.
	 *
	 * **Example:** Echo input in the terminal. The sequence for enter (`\r`) is translated to
	 * CRLF to go to a new line and move the cursor to the start of the line.
	 * ```typescript
	 * const writeEmitter = new vscode.EventEmitter<string>();
	 * const pty: vscode.Pseudoterminal = {
	 *   onDidWrite: writeEmitter.event,
	 *   open: () => {},
	 *   close: () => {},
	 *   handleInput: data => writeEmitter.fire(data === '\r' ? '\r\n' : data)
	 * };
	 * vscode.window.createTerminal({ name: 'Local echo', pty });
	 * ```]]></haxe_doc>
			</handleInput>
			<close set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Implement to handle when the terminal is closed by an act of the user.</haxe_doc>
			</close>
		</a>
		<haxe_doc>* Defines the interface of a terminal pty, enabling extensions to control a terminal.</haxe_doc>
	</typedef>
	<typedef path="vscode.QuickDiffProvider" params="" file="src/vscode/QuickDiffProvider.hx"><a><provideOriginalResource set="method">
	<x path="Null"><f a="uri:token">
	<c path="vscode.Uri"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.Uri"/></t>
</f></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Provide a [uri](#Uri) to the original resource of any given resource uri.
	 *
	 * @param uri The uri of the resource open in a text editor.
	 * @param token A cancellation token.
	 * @return A thenable that resolves to uri of the matching original resource.</haxe_doc>
</provideOriginalResource></a></typedef>
	<typedef path="vscode.QuickInput" params="" file="src/vscode/QuickInput.hx">
		<a>
			<totalSteps>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional total step count.</haxe_doc>
			</totalSteps>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional title.</haxe_doc>
			</title>
			<step>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional current step count.</haxe_doc>
			</step>
			<show set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Makes the input UI visible in its current configuration. Any other input
	 * UI will first fire an [QuickInput.onDidHide](#QuickInput.onDidHide) event.</haxe_doc>
			</show>
			<onDidHide>
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when this input UI is hidden.
	 *
	 * There are several reasons why this UI might have to be hidden and
	 * the extension will be notified through [QuickInput.onDidHide](#QuickInput.onDidHide).
	 * (Examples include: an explicit call to [QuickInput.hide](#QuickInput.hide),
	 * the user pressing Esc, some other input UI opening, etc.)</haxe_doc>
			</onDidHide>
			<ignoreFocusOut>
				<x path="Bool"/>
				<haxe_doc>* If the UI should stay open even when loosing UI focus. Defaults to false.</haxe_doc>
			</ignoreFocusOut>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hides this input UI. This will also fire an [QuickInput.onDidHide](#QuickInput.onDidHide)
	 * event.</haxe_doc>
			</hide>
			<enabled>
				<x path="Bool"/>
				<haxe_doc>* If the UI should allow for user input. Defaults to true.
	 *
	 * Change this to false, e.g., while validating user input or
	 * loading data for the next step in user input.</haxe_doc>
			</enabled>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose of this input UI and any associated resources. If it is still
	 * visible, it is first hidden. After this call the input UI is no longer
	 * functional and no additional methods or properties on it should be
	 * accessed. Instead a new input UI should be created.</haxe_doc>
			</dispose>
			<busy>
				<x path="Bool"/>
				<haxe_doc>* If the UI should show a progress indicator. Defaults to false.
	 *
	 * Change this to true, e.g., while loading more data or validating
	 * user input.</haxe_doc>
			</busy>
		</a>
		<haxe_doc>* A light-weight user input UI that is initially not visible. After
 * configuring it through its properties the extension can make it
 * visible by calling [QuickInput.show](#QuickInput.show).
 *
 * There are several reasons why this UI might have to be hidden and
 * the extension will be notified through [QuickInput.onDidHide](#QuickInput.onDidHide).
 * (Examples include: an explicit call to [QuickInput.hide](#QuickInput.hide),
 * the user pressing Esc, some other input UI opening, etc.)
 *
 * A user pressing Enter or some other gesture implying acceptance
 * of the current state does not automatically hide this UI component.
 * It is up to the extension to decide whether to accept the user's input
 * and if the UI should indeed be hidden through a call to [QuickInput.hide](#QuickInput.hide).
 *
 * When the extension no longer needs this input UI, it should
 * [QuickInput.dispose](#QuickInput.dispose) it to allow for freeing up
 * any resources associated with it.
 *
 * See [QuickPick](#QuickPick) and [InputBox](#InputBox) for concrete UIs.</haxe_doc>
	</typedef>
	<typedef path="vscode.QuickInputButton" params="" file="src/vscode/QuickInputButton.hx">
		<a>
			<tooltip set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional tooltip.</haxe_doc>
			</tooltip>
			<iconPath set="null">
				<x path="haxe.extern.EitherType">
					<c path="vscode.Uri"/>
					<x path="haxe.extern.EitherType">
						<a>
							<light><c path="vscode.Uri"/></light>
							<dark><c path="vscode.Uri"/></dark>
						</a>
						<c path="vscode.ThemeIcon"/>
					</x>
				</x>
				<haxe_doc>* Icon for the button.</haxe_doc>
			</iconPath>
		</a>
		<haxe_doc>* Button for an action in a [QuickPick](#QuickPick) or [InputBox](#InputBox).</haxe_doc>
	</typedef>
	<class path="vscode.QuickInputButtons" params="" file="src/vscode/QuickInputButtons.hx" extern="1">
		<Back public="1" set="null" static="1">
			<t path="vscode.QuickInputButton"/>
			<haxe_doc>* A back button for [QuickPick](#QuickPick) and [InputBox](#InputBox).
	 *
	 * When a navigation 'back' button is needed this one should be used for consistency.
	 * It comes with a predefined icon, tooltip and location.</haxe_doc>
		</Back>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @hidden</haxe_doc>
		</new>
		<haxe_doc>* Predefined buttons for [QuickPick](#QuickPick) and [InputBox](#InputBox).</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"QuickInputButtons"</e>
</m></meta>
	</class>
	<typedef path="vscode.QuickPick" params="T" file="src/vscode/QuickPick.hx">
		<a>
			<value>
				<c path="String"/>
				<haxe_doc>* Current value of the filter text.</haxe_doc>
			</value>
			<totalSteps>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional total step count.</haxe_doc>
			</totalSteps>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional title.</haxe_doc>
			</title>
			<step>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional current step count.</haxe_doc>
			</step>
			<show set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Makes the input UI visible in its current configuration. Any other input
	 * UI will first fire an [QuickInput.onDidHide](#QuickInput.onDidHide) event.</haxe_doc>
			</show>
			<selectedItems>
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.QuickPick.T"/></x>
				<haxe_doc>* Selected items. This can be read and updated by the extension.</haxe_doc>
			</selectedItems>
			<placeholder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional placeholder in the filter text.</haxe_doc>
			</placeholder>
			<onDidTriggerButton set="null">
				<t path="vscode.Event"><t path="vscode.QuickInputButton"/></t>
				<haxe_doc>* An event signaling when a button was triggered.</haxe_doc>
			</onDidTriggerButton>
			<onDidHide>
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when this input UI is hidden.
	 *
	 * There are several reasons why this UI might have to be hidden and
	 * the extension will be notified through [QuickInput.onDidHide](#QuickInput.onDidHide).
	 * (Examples include: an explicit call to [QuickInput.hide](#QuickInput.hide),
	 * the user pressing Esc, some other input UI opening, etc.)</haxe_doc>
			</onDidHide>
			<onDidChangeValue set="null">
				<t path="vscode.Event"><c path="String"/></t>
				<haxe_doc>* An event signaling when the value of the filter text has changed.</haxe_doc>
			</onDidChangeValue>
			<onDidChangeSelection set="null">
				<t path="vscode.Event"><c path="Array"><c path="vscode.QuickPick.T"/></c></t>
				<haxe_doc>* An event signaling when the selected items have changed.</haxe_doc>
			</onDidChangeSelection>
			<onDidChangeActive set="null">
				<t path="vscode.Event"><c path="Array"><c path="vscode.QuickPick.T"/></c></t>
				<haxe_doc>* An event signaling when the active items have changed.</haxe_doc>
			</onDidChangeActive>
			<onDidAccept set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when the user indicated acceptance of the selected item(s).</haxe_doc>
			</onDidAccept>
			<matchOnDetail>
				<x path="Bool"/>
				<haxe_doc>* If the filter text should also be matched against the detail of the items. Defaults to false.</haxe_doc>
			</matchOnDetail>
			<matchOnDescription>
				<x path="Bool"/>
				<haxe_doc>* If the filter text should also be matched against the description of the items. Defaults to false.</haxe_doc>
			</matchOnDescription>
			<items>
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.QuickPick.T"/></x>
				<haxe_doc>* Items to pick from.</haxe_doc>
			</items>
			<ignoreFocusOut>
				<x path="Bool"/>
				<haxe_doc>* If the UI should stay open even when loosing UI focus. Defaults to false.</haxe_doc>
			</ignoreFocusOut>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hides this input UI. This will also fire an [QuickInput.onDidHide](#QuickInput.onDidHide)
	 * event.</haxe_doc>
			</hide>
			<enabled>
				<x path="Bool"/>
				<haxe_doc>* If the UI should allow for user input. Defaults to true.
	 *
	 * Change this to false, e.g., while validating user input or
	 * loading data for the next step in user input.</haxe_doc>
			</enabled>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose of this input UI and any associated resources. If it is still
	 * visible, it is first hidden. After this call the input UI is no longer
	 * functional and no additional methods or properties on it should be
	 * accessed. Instead a new input UI should be created.</haxe_doc>
			</dispose>
			<canSelectMany>
				<x path="Bool"/>
				<haxe_doc>* If multiple items can be selected at the same time. Defaults to false.</haxe_doc>
			</canSelectMany>
			<buttons>
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.QuickInputButton"/></x>
				<haxe_doc>* Buttons for actions in the UI.</haxe_doc>
			</buttons>
			<busy>
				<x path="Bool"/>
				<haxe_doc>* If the UI should show a progress indicator. Defaults to false.
	 *
	 * Change this to true, e.g., while loading more data or validating
	 * user input.</haxe_doc>
			</busy>
			<activeItems>
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.QuickPick.T"/></x>
				<haxe_doc>* Active items. This can be read and updated by the extension.</haxe_doc>
			</activeItems>
		</a>
		<haxe_doc>* A concrete [QuickInput](#QuickInput) to let the user pick an item from a
 * list of items of type T. The items can be filtered through a filter text field and
 * there is an option [canSelectMany](#QuickPick.canSelectMany) to allow for
 * selecting multiple items.
 *
 * Note that in many cases the more convenient [window.showQuickPick](#window.showQuickPick)
 * is easier to use. [window.createQuickPick](#window.createQuickPick) should be used
 * when [window.showQuickPick](#window.showQuickPick) does not offer the required flexibility.</haxe_doc>
	</typedef>
	<typedef path="vscode.QuickPickItem" params="" file="src/vscode/QuickPickItem.hx">
		<a>
			<picked>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional flag indicating if this item is picked initially.
	 * (Only honored when the picker allows multiple selections.)
	 *
	 * @see [QuickPickOptions.canPickMany](#QuickPickOptions.canPickMany)</haxe_doc>
			</picked>
			<label>
				<c path="String"/>
				<haxe_doc><![CDATA[* A human-readable string which is rendered prominent. Supports rendering of [theme icons](#ThemeIcon) via
	 * the `$(<name>)`-syntax.]]></haxe_doc>
			</label>
			<detail>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* A human-readable string which is rendered less prominent in a separate line. Supports rendering of
	 * [theme icons](#ThemeIcon) via the `$(<name>)`-syntax.]]></haxe_doc>
			</detail>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* A human-readable string which is rendered less prominent in the same line. Supports rendering of
	 * [theme icons](#ThemeIcon) via the `$(<name>)`-syntax.]]></haxe_doc>
			</description>
			<alwaysShow>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Always show this item.</haxe_doc>
			</alwaysShow>
		</a>
		<haxe_doc>* Represents an item that can be selected from
 * a list of items.</haxe_doc>
	</typedef>
	<typedef path="vscode.QuickPickOptions" params="" file="src/vscode/QuickPickOptions.hx">
		<a>
			<placeHolder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show as placeholder in the input box to guide the user what to pick on.</haxe_doc>
			</placeHolder>
			<onDidSelectItem>
				<x path="Null"><f a="">
	<x path="haxe.extern.EitherType">
		<t path="vscode.QuickPickItem"/>
		<c path="String"/>
	</x>
	<x path="Any"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional function that is invoked whenever an item is selected.</haxe_doc>
			</onDidSelectItem>
			<matchOnDetail>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag to include the detail when filtering the picks.</haxe_doc>
			</matchOnDetail>
			<matchOnDescription>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag to include the description when filtering the picks.</haxe_doc>
			</matchOnDescription>
			<ignoreFocusOut>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.</haxe_doc>
			</ignoreFocusOut>
			<canPickMany>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag to make the picker accept multiple selections, if true the result is an array of picks.</haxe_doc>
			</canPickMany>
		</a>
		<haxe_doc>* Options to configure the behavior of the quick pick UI.</haxe_doc>
	</typedef>
	<class path="vscode.Range" params="" file="src/vscode/Range.hx" extern="1">
		<start public="1" set="null">
			<c path="vscode.Position"/>
			<haxe_doc>* The start position. It is before or equal to [end](#Range.end).</haxe_doc>
		</start>
		<end public="1" set="null">
			<c path="vscode.Position"/>
			<haxe_doc>* The end position. It is after or equal to [start](#Range.start).</haxe_doc>
		</end>
		<isEmpty public="1">
			<x path="Bool"/>
			<haxe_doc>* `true` if `start` and `end` are equal.</haxe_doc>
		</isEmpty>
		<isSingleLine public="1">
			<x path="Bool"/>
			<haxe_doc>* `true` if `start.line` and `end.line` are equal.</haxe_doc>
		</isSingleLine>
		<contains public="1" set="method">
			<f a="positionOrRange">
				<x path="haxe.extern.EitherType">
					<c path="vscode.Position"/>
					<c path="vscode.Range"/>
				</x>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if a position or a range is contained in this range.
	 *
	 * @param positionOrRange A position or a range.
	 * @return `true` if the position or range is inside or equal
	 * to this range.</haxe_doc>
		</contains>
		<isEqual public="1" set="method">
			<f a="other">
				<c path="vscode.Range"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if `other` equals this range.
	 *
	 * @param other A range.
	 * @return `true` when start and end are [equal](#Position.isEqual) to
	 * start and end of this range.</haxe_doc>
		</isEqual>
		<intersection public="1" set="method">
			<f a="range">
				<c path="vscode.Range"/>
				<x path="Null"><c path="vscode.Range"/></x>
			</f>
			<haxe_doc>* Intersect `range` with this range and returns a new range or `undefined`
	 * if the ranges have no overlap.
	 *
	 * @param range A range.
	 * @return A range of the greater start and smaller end positions. Will
	 * return undefined when there is no overlap.</haxe_doc>
		</intersection>
		<union public="1" set="method">
			<f a="other">
				<c path="vscode.Range"/>
				<c path="vscode.Range"/>
			</f>
			<haxe_doc>* Compute the union of `other` with this range.
	 *
	 * @param other A range.
	 * @return A range of smaller start position and the greater end position.</haxe_doc>
		</union>
		<with public="1" set="method">
			<f a="?start:?end">
				<c path="vscode.Position"/>
				<c path="vscode.Position"/>
				<c path="vscode.Range"/>
			</f>
			<haxe_doc>* Derived a new range from this range.
	 *
	 * @param start A position that should be used as start. The default value is the [current start](#Range.start).
	 * @param end A position that should be used as end. The default value is the [current end](#Range.end).
	 * @return A range derived from this range with the given start and end position.
	 * If start and end are not different `this` range will be returned.</haxe_doc>
			<overloads><with public="1" set="method">
	<f a="change">
		<a>
			<start>
				<x path="Null"><c path="vscode.Position"/></x>
				<meta><m n=":optional"/></meta>
			</start>
			<end>
				<x path="Null"><c path="vscode.Position"/></x>
				<meta><m n=":optional"/></meta>
			</end>
		</a>
		<c path="vscode.Range"/>
	</f>
	<haxe_doc>* Derived a new range from this range.
	 *
	 * @param start A position that should be used as start. The default value is the [current start](#Range.start).
	 * @param end A position that should be used as end. The default value is the [current end](#Range.end).
	 * @return A range derived from this range with the given start and end position.
	 * If start and end are not different `this` range will be returned.</haxe_doc>
</with></overloads>
		</with>
		<new public="1" set="method">
			<f a="start:end">
				<c path="vscode.Position"/>
				<c path="vscode.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new range from two positions. If `start` is not
	 * before or equal to `end`, the values will be swapped.
	 *
	 * @param start A position.
	 * @param end A position.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="startLine:startCharacter:endLine:endCharacter">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Create a new range from two positions. If `start` is not
	 * before or equal to `end`, the values will be swapped.
	 *
	 * @param start A position.
	 * @param end A position.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* A range represents an ordered pair of two positions.
 * It is guaranteed that [start](#Range.start).isBeforeOrEqual([end](#Range.end))
 *
 * Range objects are __immutable__. Use the [with](#Range.with),
 * [intersection](#Range.intersection), or [union](#Range.union) methods
 * to derive new ranges from an existing range.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Range"</e>
</m></meta>
	</class>
	<typedef path="vscode.ReferenceContext" params="" file="src/vscode/ReferenceContext.hx">
		<a><includeDeclaration>
	<x path="Bool"/>
	<haxe_doc>* Include the declaration of the current symbol.</haxe_doc>
</includeDeclaration></a>
		<haxe_doc>* Value-object that contains additional information when
 * requesting references.</haxe_doc>
	</typedef>
	<typedef path="vscode.ReferenceProvider" params="" file="src/vscode/ReferenceProvider.hx">
		<a><provideReferences set="method">
	<f a="document:position:context:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.ReferenceContext"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.Location"/></c></t>
	</f>
	<haxe_doc>* Provide a set of project-wide references for the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 *
	 * @return An array of locations or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideReferences></a>
		<haxe_doc>* The reference provider interface defines the contract between extensions and
 * the [find references](https://code.visualstudio.com/docs/editor/editingevolved#_peek)-feature.</haxe_doc>
	</typedef>
	<class path="vscode.RelativePattern" params="" file="src/vscode/RelativePattern.hx" extern="1">
		<base public="1">
			<c path="String"/>
			<haxe_doc>* A base file path to which this pattern will be matched against relatively.</haxe_doc>
		</base>
		<pattern public="1">
			<c path="String"/>
			<haxe_doc>* A file glob pattern like `*.{ts,js}` that will be matched on file paths
	 * relative to the base path.
	 *
	 * Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`,
	 * the file glob pattern will match on `index.js`.</haxe_doc>
		</pattern>
		<new public="1" set="method">
			<f a="base:pattern">
				<x path="haxe.extern.EitherType">
					<t path="vscode.WorkspaceFolder"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.Uri"/>
						<c path="String"/>
					</x>
				</x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new relative pattern object with a base file path and pattern to match. This pattern
	 * will be matched on file paths relative to the base.
	 * Example:
	 *
	 * ```ts
	 * const folder = vscode.workspace.workspaceFolders?.[0];
	 * if (folder) {
	 *
	 *   // Match any TypeScript file in the root of this workspace folder
	 *   const pattern1 = new vscode.RelativePattern(folder, '*.ts');
	 *
	 *   // Match any TypeScript file in `someFolder` inside this workspace folder
	 *   const pattern2 = new vscode.RelativePattern(folder, 'someFolder/*.ts');
	 * }
	 * ```
	 *
	 * @param base A base to which this pattern will be matched against relatively. It is recommended
	 * to pass in a [workspace folder](#WorkspaceFolder) if the pattern should match inside the workspace.
	 * Otherwise, a uri or string should only be used if the pattern is for a file path outside the workspace.
	 * @param pattern A file glob pattern like `*.{ts,js}` that will be matched on paths relative to the base.</haxe_doc>
		</new>
		<haxe_doc>* A relative pattern is a helper to construct glob patterns that are matched
 * relatively to a base file path. The base path can either be an absolute file
 * path as string or uri or a [workspace folder](#WorkspaceFolder), which is the
 * preferred way of creating the relative pattern.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"RelativePattern"</e>
</m></meta>
	</class>
	<typedef path="vscode.RenameProvider" params="" file="src/vscode/RenameProvider.hx">
		<a>
			<provideRenameEdits set="method">
				<f a="document:position:newName:token">
					<t path="vscode.TextDocument"/>
					<c path="vscode.Position"/>
					<c path="String"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.WorkspaceEdit"/></t>
				</f>
				<haxe_doc>* Provide an edit that describes changes that have to be made to one
	 * or many resources to rename a symbol to a different name.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param newName The new name of the symbol. If the given name is not valid, the provider must return a rejected promise.
	 * @param token A cancellation token.
	 * @return A workspace edit or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideRenameEdits>
			<prepareRename>
				<x path="Null"><f a="::">
	<t path="vscode.TextDocument"/>
	<c path="vscode.Position"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="vscode.Range"/>
	<a>
		<range><c path="vscode.Range"/></range>
		<placeholder><c path="String"/></placeholder>
	</a>
</x></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional function for resolving and validating a position *before* running rename. The result can
	 * be a range or a range and a placeholder text. The placeholder text should be the identifier of the symbol
	 * which is being renamed - when omitted the text in the returned range is used.
	 *
	 * *Note: * This function should throw an error or return a rejected thenable when the provided location
	 * doesn't allow for a rename.
	 *
	 * @param document The document in which rename will be invoked.
	 * @param position The position at which rename will be invoked.
	 * @param token A cancellation token.
	 * @return The range or range and placeholder text of the identifier that is to be renamed. The lack of a result can signaled by returning `undefined` or `null`.</haxe_doc>
			</prepareRename>
		</a>
		<haxe_doc>* The rename provider interface defines the contract between extensions and
 * the [rename](https://code.visualstudio.com/docs/editor/editingevolved#_rename-symbol)-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.RunOptions" params="" file="src/vscode/RunOptions.hx">
		<a><reevaluateOnRerun>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Controls whether task variables are re-evaluated on rerun.</haxe_doc>
</reevaluateOnRerun></a>
		<haxe_doc>* Run options for a task.</haxe_doc>
	</typedef>
	<typedef path="vscode.SaveDialogOptions" params="" file="src/vscode/SaveDialogOptions.hx">
		<a>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Dialog title.
	 *
	 * This parameter might be ignored, as not all operating systems display a title on save dialogs
	 * (for example, macOS).</haxe_doc>
			</title>
			<saveLabel>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string for the save button.</haxe_doc>
			</saveLabel>
			<filters>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="Array"><c path="String"/></c></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A set of file filters that are used by the dialog. Each entry is a human-readable label,
	 * like "TypeScript", and an array of extensions, e.g.
	 * ```ts
	 * {
	 * 	'Images': ['png', 'jpg']
	 * 	'TypeScript': ['ts', 'tsx']
	 * }
	 * ```</haxe_doc>
			</filters>
			<defaultUri>
				<x path="Null"><c path="vscode.Uri"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The resource the dialog shows when opened.</haxe_doc>
			</defaultUri>
		</a>
		<haxe_doc>* Options to configure the behaviour of a file save dialog.</haxe_doc>
	</typedef>
	<typedef path="vscode.SecretStorage" params="" file="src/vscode/SecretStorage.hx">
		<a>
			<store set="method">
				<f a="key:value">
					<c path="String"/>
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Store a secret under a given key.
	 * @param key The key to store the secret under.
	 * @param value The secret.</haxe_doc>
			</store>
			<onDidChange>
				<t path="vscode.Event"><t path="vscode.SecretStorageChangeEvent"/></t>
				<haxe_doc>* Fires when a secret is stored or deleted.</haxe_doc>
			</onDidChange>
			<get set="method">
				<f a="key">
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
				</f>
				<haxe_doc>* Retrieve a secret that was stored with key. Returns undefined if there
	 * is no password matching that key.
	 * @param key The key the secret was stored under.
	 * @returns The stored value or `undefined`.</haxe_doc>
			</get>
			<delete set="method">
				<f a="key">
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Remove a secret from storage.
	 * @param key The key the secret was stored under.</haxe_doc>
			</delete>
		</a>
		<haxe_doc>* Represents a storage utility for secrets, information that is
 * sensitive.</haxe_doc>
	</typedef>
	<typedef path="vscode.SecretStorageChangeEvent" params="" file="src/vscode/SecretStorageChangeEvent.hx">
		<a><key final="1" set="null">
	<c path="String"/>
	<haxe_doc>* The key of the secret that has changed.</haxe_doc>
</key></a>
		<haxe_doc>* The event data that is fired when a secret is added or removed.</haxe_doc>
	</typedef>
	<class path="vscode.Selection" params="" file="src/vscode/Selection.hx" extern="1">
		<extends path="vscode.Range"/>
		<anchor public="1">
			<c path="vscode.Position"/>
			<haxe_doc>* The position at which the selection starts.
	 * This position might be before or after [active](#Selection.active).</haxe_doc>
		</anchor>
		<active public="1">
			<c path="vscode.Position"/>
			<haxe_doc>* The position of the cursor.
	 * This position might be before or after [anchor](#Selection.anchor).</haxe_doc>
		</active>
		<isReversed public="1">
			<x path="Bool"/>
			<haxe_doc>* A selection is reversed if [active](#Selection.active).isBefore([anchor](#Selection.anchor)).</haxe_doc>
		</isReversed>
		<new public="1" set="method">
			<f a="anchor:active">
				<c path="vscode.Position"/>
				<c path="vscode.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a selection from two positions.
	 *
	 * @param anchor A position.
	 * @param active A position.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="anchorLine:anchorCharacter:activeLine:activeCharacter">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Create a selection from two positions.
	 *
	 * @param anchor A position.
	 * @param active A position.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* Represents a text selection in an editor.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Selection"</e>
</m></meta>
	</class>
	<class path="vscode.SelectionRange" params="" file="src/vscode/SelectionRange.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The [range](#Range) of this selection range.</haxe_doc>
		</range>
		<parent public="1">
			<x path="Null"><c path="vscode.SelectionRange"/></x>
			<haxe_doc>* The parent selection range containing this range.</haxe_doc>
		</parent>
		<new public="1" set="method">
			<f a="range:?parent">
				<c path="vscode.Range"/>
				<c path="vscode.SelectionRange"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new selection range.
	 *
	 * @param range The range of the selection range.
	 * @param parent The parent of the selection range.</haxe_doc>
		</new>
		<haxe_doc>* A selection range represents a part of a selection hierarchy. A selection range
 * may have a parent selection range that contains it.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SelectionRange"</e>
</m></meta>
	</class>
	<typedef path="vscode.SelectionRangeProvider" params="" file="src/vscode/SelectionRangeProvider.hx"><a><provideSelectionRanges set="method">
	<f a="document:positions:token">
		<t path="vscode.TextDocument"/>
		<c path="Array"><c path="vscode.Position"/></c>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.SelectionRange"/></c></t>
	</f>
	<haxe_doc>* Provide selection ranges for the given positions.
	 *
	 * Selection ranges should be computed individually and independent for each position. The editor will merge
	 * and deduplicate ranges but providers must return hierarchies of selection ranges so that a range
	 * is [contained](#Range.contains) by its parent.
	 *
	 * @param document The document in which the command was invoked.
	 * @param positions The positions at which the command was invoked.
	 * @param token A cancellation token.
	 * @return Selection ranges or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideSelectionRanges></a></typedef>
	<class path="vscode.SemanticTokens" params="" file="src/vscode/SemanticTokens.hx" extern="1">
		<resultId public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The result id of the tokens.
	 *
	 * This is the id that will be passed to `DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits` (if implemented).</haxe_doc>
		</resultId>
		<data public="1" set="null">
			<c path="js.lib.Uint32Array"/>
			<haxe_doc>* The actual tokens data.
	 * @see [provideDocumentSemanticTokens](#DocumentSemanticTokensProvider.provideDocumentSemanticTokens) for an explanation of the format.</haxe_doc>
		</data>
		<new public="1" set="method"><f a="data:?resultId">
	<c path="js.lib.Uint32Array"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Represents semantic tokens, either in a range or in an entire document.
 * @see [provideDocumentSemanticTokens](#DocumentSemanticTokensProvider.provideDocumentSemanticTokens) for an explanation of the format.
 * @see [SemanticTokensBuilder](#SemanticTokensBuilder) for a helper to create an instance.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokens"</e>
</m></meta>
	</class>
	<class path="vscode.SemanticTokensBuilder" params="" file="src/vscode/SemanticTokensBuilder.hx" extern="1">
		<push public="1" set="method">
			<f a="line:char:length:tokenType:?tokenModifiers">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add another token.
	 *
	 * @param line The token start line number (absolute value).
	 * @param char The token start character (absolute value).
	 * @param length The token length in characters.
	 * @param tokenType The encoded token type.
	 * @param tokenModifiers The encoded token modifiers.</haxe_doc>
			<overloads><push public="1" set="method">
	<f a="range:tokenType:?tokenModifiers">
		<c path="vscode.Range"/>
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Void"/>
	</f>
	<haxe_doc>* Add another token.
	 *
	 * @param line The token start line number (absolute value).
	 * @param char The token start character (absolute value).
	 * @param length The token length in characters.
	 * @param tokenType The encoded token type.
	 * @param tokenModifiers The encoded token modifiers.</haxe_doc>
</push></overloads>
		</push>
		<build public="1" set="method">
			<f a="?resultId">
				<c path="String"/>
				<c path="vscode.SemanticTokens"/>
			</f>
			<haxe_doc>* Finish and create a `SemanticTokens` instance.</haxe_doc>
		</build>
		<new public="1" set="method"><f a="?legend">
	<c path="vscode.SemanticTokensLegend"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* A semantic tokens builder can help with creating a `SemanticTokens` instance
 * which contains delta encoded semantic tokens.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokensBuilder"</e>
</m></meta>
	</class>
	<class path="vscode.SemanticTokensEdit" params="" file="src/vscode/SemanticTokensEdit.hx" extern="1">
		<start public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The start offset of the edit.</haxe_doc>
		</start>
		<deleteCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The count of elements to remove.</haxe_doc>
		</deleteCount>
		<data public="1" set="null">
			<x path="Null"><c path="js.lib.Uint32Array"/></x>
			<haxe_doc>* The elements to insert.</haxe_doc>
		</data>
		<new public="1" set="method"><f a="start:deleteCount:?data">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.Uint32Array"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Represents an edit to semantic tokens.
 * @see [provideDocumentSemanticTokensEdits](#DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits) for an explanation of the format.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokensEdit"</e>
</m></meta>
	</class>
	<class path="vscode.SemanticTokensEdits" params="" file="src/vscode/SemanticTokensEdits.hx" extern="1">
		<resultId public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The result id of the tokens.
	 *
	 * This is the id that will be passed to `DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits` (if implemented).</haxe_doc>
		</resultId>
		<edits public="1" set="null">
			<c path="Array"><c path="vscode.SemanticTokensEdit"/></c>
			<haxe_doc>* The edits to the tokens data.
	 * All edits refer to the initial data state.</haxe_doc>
		</edits>
		<new public="1" set="method"><f a="edits:?resultId">
	<c path="Array"><c path="vscode.SemanticTokensEdit"/></c>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* Represents edits to semantic tokens.
 * @see [provideDocumentSemanticTokensEdits](#DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits) for an explanation of the format.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokensEdits"</e>
</m></meta>
	</class>
	<class path="vscode.SemanticTokensLegend" params="" file="src/vscode/SemanticTokensLegend.hx" extern="1">
		<tokenTypes public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The possible token types.</haxe_doc>
		</tokenTypes>
		<tokenModifiers public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The possible token modifiers.</haxe_doc>
		</tokenModifiers>
		<new public="1" set="method"><f a="tokenTypes:?tokenModifiers">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<haxe_doc>* A semantic tokens legend contains the needed information to decipher
 * the integer encoded representation of semantic tokens.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokensLegend"</e>
</m></meta>
	</class>
	<class path="vscode.ShellExecution" params="" file="src/vscode/ShellExecution.hx" extern="1">
		<commandLine public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The shell command line. Is `undefined` if created with a command and arguments.</haxe_doc>
		</commandLine>
		<command public="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<t path="vscode.ShellQuotedString"/>
			</x>
			<haxe_doc>* The shell command. Is `undefined` if created with a full command line.</haxe_doc>
		</command>
		<args public="1">
			<c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.ShellQuotedString"/>
</x></c>
			<haxe_doc>* The shell args. Is `undefined` if created with a full command line.</haxe_doc>
		</args>
		<options public="1">
			<x path="Null"><t path="vscode.ShellExecutionOptions"/></x>
			<haxe_doc>* The shell options used when the command line is executed in a shell.
	 * Defaults to undefined.</haxe_doc>
		</options>
		<new public="1" set="method">
			<f a="commandLine:?options">
				<c path="String"/>
				<t path="vscode.ShellExecutionOptions"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a shell execution with a full command line.
	 *
	 * or
	 *
	 * Creates a shell execution with a command and arguments. For the real execution VS Code will
	 * construct a command line from the command and the arguments. This is subject to interpretation
	 * especially when it comes to quoting. If full control over the command line is needed please
	 * use the constructor that creates a `ShellExecution` with the full command line.
	 *
	 * @param commandLine The command line to execute.
	 * @param command The command to execute.
	 * @param args The command arguments.
	 * @param options Optional options for the started the shell.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="command:args:?options">
		<x path="haxe.extern.EitherType">
			<c path="String"/>
			<t path="vscode.ShellQuotedString"/>
		</x>
		<c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.ShellQuotedString"/>
</x></c>
		<t path="vscode.ShellExecutionOptions"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Creates a shell execution with a full command line.
	 *
	 * or
	 *
	 * Creates a shell execution with a command and arguments. For the real execution VS Code will
	 * construct a command line from the command and the arguments. This is subject to interpretation
	 * especially when it comes to quoting. If full control over the command line is needed please
	 * use the constructor that creates a `ShellExecution` with the full command line.
	 *
	 * @param commandLine The command line to execute.
	 * @param command The command to execute.
	 * @param args The command arguments.
	 * @param options Optional options for the started the shell.</haxe_doc>
</new></overloads>
		</new>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ShellExecution"</e>
</m></meta>
	</class>
	<typedef path="vscode.ShellExecutionOptions" params="" file="src/vscode/ShellExecutionOptions.hx">
		<a>
			<shellQuoting>
				<x path="Null"><t path="vscode.ShellQuotingOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The shell quotes supported by this shell.</haxe_doc>
			</shellQuoting>
			<shellArgs>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The arguments to be passed to the shell executable used to run the task. Most shells
	 * require special arguments to execute a command. For  example `bash` requires the `-c`
	 * argument to execute a command, `PowerShell` requires `-Command` and `cmd` requires both
	 * `/d` and `/c`.</haxe_doc>
			</shellArgs>
			<executable>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The shell executable.</haxe_doc>
			</executable>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The additional environment of the executed shell. If omitted
	 * the parent process' environment is used. If provided it is merged with
	 * the parent process' environment.</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The current working directory of the executed shell.
	 * If omitted the tools current workspace root is used.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>* Options for a shell execution</haxe_doc>
	</typedef>
	<typedef path="vscode.ShellQuotedString" params="" file="src/vscode/ShellQuotedString.hx">
		<a>
			<value>
				<c path="String"/>
				<haxe_doc>* The actual string value.</haxe_doc>
			</value>
			<quoting>
				<x path="vscode.ShellQuoting"/>
				<haxe_doc>* The quoting style to use.</haxe_doc>
			</quoting>
		</a>
		<haxe_doc>* A string that will be quoted depending on the used shell.</haxe_doc>
	</typedef>
	<abstract path="vscode.ShellQuoting" params="" file="src/vscode/ShellQuoting.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Defines how an argument should be quoted if it contains
 * spaces or unsupported characters.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ShellQuoting"</e>
			</m>
		</meta>
		<impl><class path="vscode._ShellQuoting.ShellQuoting_Impl_" params="" file="src/vscode/ShellQuoting.hx" private="1" module="vscode.ShellQuoting" extern="1">
	<Escape public="1" set="null" static="1">
		<x path="vscode.ShellQuoting"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Character escaping should be used. This for example
	 * uses \ on bash and ` on PowerShell.</haxe_doc>
	</Escape>
	<Strong public="1" set="null" static="1">
		<x path="vscode.ShellQuoting"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Strong string quoting should be used. This for example
	 * uses " for Windows cmd and ' for bash and PowerShell.
	 * Strong quoting treats arguments as literal strings.
	 * Under PowerShell echo 'The value is $(2 * 3)' will
	 * print `The value is $(2 * 3)`</haxe_doc>
	</Strong>
	<Weak public="1" set="null" static="1">
		<x path="vscode.ShellQuoting"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Weak string quoting should be used. This for example
	 * uses " for Windows cmd, bash and PowerShell. Weak quoting
	 * still performs some kind of evaluation inside the quoted
	 * string.  Under PowerShell echo "The value is $(2 * 3)"
	 * will print `The value is 6`</haxe_doc>
	</Weak>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ShellQuoting"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ShellQuoting.ShellQuoting_Impl_" params="" file="src/vscode/ShellQuoting.hx" private="1" module="vscode.ShellQuoting" extern="1">
		<Escape public="1" set="null" static="1">
			<x path="vscode.ShellQuoting"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Character escaping should be used. This for example
	 * uses \ on bash and ` on PowerShell.</haxe_doc>
		</Escape>
		<Strong public="1" set="null" static="1">
			<x path="vscode.ShellQuoting"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Strong string quoting should be used. This for example
	 * uses " for Windows cmd and ' for bash and PowerShell.
	 * Strong quoting treats arguments as literal strings.
	 * Under PowerShell echo 'The value is $(2 * 3)' will
	 * print `The value is $(2 * 3)`</haxe_doc>
		</Strong>
		<Weak public="1" set="null" static="1">
			<x path="vscode.ShellQuoting"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Weak string quoting should be used. This for example
	 * uses " for Windows cmd, bash and PowerShell. Weak quoting
	 * still performs some kind of evaluation inside the quoted
	 * string.  Under PowerShell echo "The value is $(2 * 3)"
	 * will print `The value is 6`</haxe_doc>
		</Weak>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ShellQuoting"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.ShellQuotingOptions" params="" file="src/vscode/ShellQuotingOptions.hx">
		<a>
			<weak>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The character used for weak quoting. The string's length must be 1.</haxe_doc>
			</weak>
			<strong>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The character used for strong quoting. The string's length must be 1.</haxe_doc>
			</strong>
			<escape>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<a>
		<escapeChar>
			<c path="String"/>
			<haxe_doc>* The escape character.</haxe_doc>
		</escapeChar>
		<charsToEscape>
			<c path="String"/>
			<haxe_doc>* The characters to escape.</haxe_doc>
		</charsToEscape>
	</a>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The character used to do character escaping. If a string is provided only spaces
	 * are escaped. If a `{ escapeChar, charsToEscape }` literal is provide all characters
	 * in `charsToEscape` are escaped using the `escapeChar`.</haxe_doc>
			</escape>
		</a>
		<haxe_doc>* The shell quoting options.</haxe_doc>
	</typedef>
	<class path="vscode.SignatureHelp" params="" file="src/vscode/SignatureHelp.hx" extern="1">
		<signatures public="1">
			<c path="Array"><c path="vscode.SignatureInformation"/></c>
			<haxe_doc>* One or more signatures.</haxe_doc>
		</signatures>
		<activeSignature public="1">
			<x path="Int"/>
			<haxe_doc>* The active signature.</haxe_doc>
		</activeSignature>
		<activeParameter public="1">
			<x path="Int"/>
			<haxe_doc>* The active parameter of the active signature.</haxe_doc>
		</activeParameter>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Signature help represents the signature of something
 * callable. There can be multiple signatures but only one
 * active and only one active parameter.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SignatureHelp"</e>
</m></meta>
	</class>
	<typedef path="vscode.SignatureHelpContext" params="" file="src/vscode/SignatureHelpContext.hx">
		<a>
			<triggerKind set="null">
				<x path="vscode.SignatureHelpTriggerKind"/>
				<haxe_doc>* Action that caused signature help to be triggered.</haxe_doc>
			</triggerKind>
			<triggerCharacter set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Character that caused signature help to be triggered.
	 *
	 * This is `undefined` when signature help is not triggered by typing, such as when manually invoking
	 * signature help or when moving the cursor.</haxe_doc>
			</triggerCharacter>
			<isRetrigger set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if signature help was already showing when it was triggered.
	 *
	 * Retriggers occur when the signature help is already active and can be caused by actions such as
	 * typing a trigger character, a cursor move, or document content changes.</haxe_doc>
			</isRetrigger>
			<activeSignatureHelp set="null">
				<x path="Null"><c path="vscode.SignatureHelp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The currently active [`SignatureHelp`](#SignatureHelp).
	 *
	 * The `activeSignatureHelp` has its [`SignatureHelp.activeSignature`] field updated based on
	 * the user arrowing through available signatures.</haxe_doc>
			</activeSignatureHelp>
		</a>
		<haxe_doc>* Additional information about the context in which a
 * [`SignatureHelpProvider`](#SignatureHelpProvider.provideSignatureHelp) was triggered.</haxe_doc>
	</typedef>
	<typedef path="vscode.SignatureHelpProvider" params="" file="src/vscode/SignatureHelpProvider.hx">
		<a><provideSignatureHelp set="method">
	<f a="document:position:token:context">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.SignatureHelpContext"/>
		<t path="vscode.ProviderResult"><c path="vscode.SignatureHelp"/></t>
	</f>
	<haxe_doc>* Provide help for the signature at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @param context Information about how signature help was triggered.
	 *
	 * @return Signature help or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideSignatureHelp></a>
		<haxe_doc>* The signature help provider interface defines the contract between extensions and
 * the [parameter hints](https://code.visualstudio.com/docs/editor/intellisense)-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.SignatureHelpProviderMetadata" params="" file="src/vscode/SignatureHelpProviderMetadata.hx">
		<a>
			<triggerCharacters set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<haxe_doc>* List of characters that trigger signature help.</haxe_doc>
			</triggerCharacters>
			<retriggerCharacters set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<haxe_doc>* List of characters that re-trigger signature help.
	 *
	 * These trigger characters are only active when signature help is already showing. All trigger characters
	 * are also counted as re-trigger characters.</haxe_doc>
			</retriggerCharacters>
		</a>
		<haxe_doc>* Metadata about a registered [`SignatureHelpProvider`](#SignatureHelpProvider).</haxe_doc>
	</typedef>
	<abstract path="vscode.SignatureHelpTriggerKind" params="" file="src/vscode/SignatureHelpTriggerKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* How a [`SignatureHelpProvider`](#SignatureHelpProvider) was triggered.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SignatureHelpTriggerKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._SignatureHelpTriggerKind.SignatureHelpTriggerKind_Impl_" params="" file="src/vscode/SignatureHelpTriggerKind.hx" private="1" module="vscode.SignatureHelpTriggerKind" extern="1">
	<Invoke public="1" set="null" static="1">
		<x path="vscode.SignatureHelpTriggerKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Signature help was invoked manually by the user or by a command.</haxe_doc>
	</Invoke>
	<TriggerCharacter public="1" set="null" static="1">
		<x path="vscode.SignatureHelpTriggerKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Signature help was triggered by a trigger character.</haxe_doc>
	</TriggerCharacter>
	<ContentChange public="1" set="null" static="1">
		<x path="vscode.SignatureHelpTriggerKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Signature help was triggered by the cursor moving or by the document content changing.</haxe_doc>
	</ContentChange>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"SignatureHelpTriggerKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._SignatureHelpTriggerKind.SignatureHelpTriggerKind_Impl_" params="" file="src/vscode/SignatureHelpTriggerKind.hx" private="1" module="vscode.SignatureHelpTriggerKind" extern="1">
		<Invoke public="1" set="null" static="1">
			<x path="vscode.SignatureHelpTriggerKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Signature help was invoked manually by the user or by a command.</haxe_doc>
		</Invoke>
		<TriggerCharacter public="1" set="null" static="1">
			<x path="vscode.SignatureHelpTriggerKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Signature help was triggered by a trigger character.</haxe_doc>
		</TriggerCharacter>
		<ContentChange public="1" set="null" static="1">
			<x path="vscode.SignatureHelpTriggerKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Signature help was triggered by the cursor moving or by the document content changing.</haxe_doc>
		</ContentChange>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SignatureHelpTriggerKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.SignatureInformation" params="" file="src/vscode/SignatureInformation.hx" extern="1">
		<label public="1">
			<c path="String"/>
			<haxe_doc>* The label of this signature. Will be shown in
	 * the UI.</haxe_doc>
		</label>
		<documentation public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* The human-readable doc-comment of this signature. Will be shown
	 * in the UI but can be omitted.</haxe_doc>
		</documentation>
		<parameters public="1">
			<c path="Array"><c path="vscode.ParameterInformation"/></c>
			<haxe_doc>* The parameters of this signature.</haxe_doc>
		</parameters>
		<activeParameter public="1">
			<x path="Null"><x path="Int"/></x>
			<haxe_doc>* The index of the active parameter.
	 *
	 * If provided, this is used in place of [`SignatureHelp.activeSignature`](#SignatureHelp.activeSignature).</haxe_doc>
		</activeParameter>
		<new public="1" set="method">
			<f a="label:?documentation">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new signature information object.
	 *
	 * @param label A label string.
	 * @param documentation A doc string.</haxe_doc>
		</new>
		<haxe_doc>* Represents the signature of something callable. A signature
 * can have a label, like a function-name, a doc-comment, and
 * a set of parameters.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SignatureInformation"</e>
</m></meta>
	</class>
	<class path="vscode.SnippetString" params="" file="src/vscode/SnippetString.hx" extern="1">
		<value public="1">
			<c path="String"/>
			<haxe_doc>* The snippet string.</haxe_doc>
		</value>
		<appendText public="1" set="method">
			<f a="string">
				<c path="String"/>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends the given string to
	 * the [`value`](#SnippetString.value) of this snippet string.
	 *
	 * @param string A value to append 'as given'. The string will be escaped.
	 * @return This snippet string.</haxe_doc>
		</appendText>
		<appendTabstop public="1" set="method">
			<f a="?number">
				<x path="Int"/>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends a tabstop (`$1`, `$2` etc) to
	 * the [`value`](#SnippetString.value) of this snippet string.
	 *
	 * @param number The number of this tabstop, defaults to an auto-increment
	 * value starting at 1.
	 * @return This snippet string.</haxe_doc>
		</appendTabstop>
		<appendPlaceholder public="1" set="method">
			<f a="value:?number">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<f a="">
						<c path="vscode.SnippetString"/>
						<x path="Any"/>
					</f>
				</x>
				<x path="Int"/>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends a placeholder (`${1:value}`) to
	 * the [`value`](#SnippetString.value) of this snippet string.
	 *
	 * @param value The value of this placeholder - either a string or a function
	 * with which a nested snippet can be created.
	 * @param number The number of this tabstop, defaults to an auto-increment
	 * value starting at 1.
	 * @return This snippet string.</haxe_doc>
		</appendPlaceholder>
		<appendChoice public="1" set="method">
			<f a="values:?number">
				<c path="Array"><c path="String"/></c>
				<x path="Int"/>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends a choice (`${1|a,b,c|}`) to
	 * the [`value`](#SnippetString.value) of this snippet string.
	 *
	 * @param values The values for choices - the array of strings
	 * @param number The number of this tabstop, defaults to an auto-increment
	 * value starting at 1.
	 * @return This snippet string.</haxe_doc>
		</appendChoice>
		<appendVariable public="1" set="method">
			<f a="name:defaultValue">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<f a="">
						<c path="vscode.SnippetString"/>
						<x path="Any"/>
					</f>
				</x>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends a variable (`${VAR}`) to
	 * the [`value`](#SnippetString.value) of this snippet string.
	 *
	 * @param name The name of the variable - excluding the `$`.
	 * @param defaultValue The default value which is used when the variable name cannot
	 * be resolved - either a string or a function with which a nested snippet can be created.
	 * @return This snippet string.</haxe_doc>
		</appendVariable>
		<new public="1" set="method"><f a="?value">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* A snippet string is a template which allows to insert text
 * and to control the editor cursor when insertion happens.
 *
 * A snippet can define tab stops and placeholders with `$1`, `$2`
 * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
 * the end of the snippet. Variables are defined with `$name` and
 * `${name:default value}`. The full snippet syntax is documented
 * [here](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_creating-your-own-snippets).</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SnippetString"</e>
</m></meta>
	</class>
	<class path="vscode.SourceBreakpoint" params="" file="src/vscode/SourceBreakpoint.hx" extern="1">
		<extends path="vscode.Breakpoint"/>
		<location public="1" set="null">
			<c path="vscode.Location"/>
			<haxe_doc>* The source and line position of this breakpoint.</haxe_doc>
		</location>
		<new public="1" set="method">
			<f a="location:?enabled:?condition:?hitCondition:?logMessage">
				<c path="vscode.Location"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new breakpoint for a source location.</haxe_doc>
		</new>
		<haxe_doc>* A breakpoint specified by a source location.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SourceBreakpoint"</e>
</m></meta>
	</class>
	<typedef path="vscode.SourceControl" params="" file="src/vscode/SourceControl.hx">
		<a>
			<statusBarCommands>
				<x path="Null"><c path="Array"><t path="vscode.Command"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional status bar commands.
	 *
	 * These commands will be displayed in the editor's status bar.</haxe_doc>
			</statusBarCommands>
			<rootUri set="null">
				<x path="Null"><c path="vscode.Uri"/></x>
				<haxe_doc>* The (optional) Uri of the root of this source control.</haxe_doc>
			</rootUri>
			<quickDiffProvider>
				<x path="Null"><t path="vscode.QuickDiffProvider"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional [quick diff provider](#QuickDiffProvider).</haxe_doc>
			</quickDiffProvider>
			<label set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable label of this source control.</haxe_doc>
			</label>
			<inputBox set="null">
				<t path="vscode.SourceControlInputBox"/>
				<haxe_doc>* The [input box](#SourceControlInputBox) for this source control.</haxe_doc>
			</inputBox>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The id of this source control.</haxe_doc>
			</id>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this source control.</haxe_doc>
			</dispose>
			<createResourceGroup set="method">
				<f a="id:label">
					<c path="String"/>
					<c path="String"/>
					<t path="vscode.SourceControlResourceGroup"/>
				</f>
				<haxe_doc>* Create a new [resource group](#SourceControlResourceGroup).</haxe_doc>
			</createResourceGroup>
			<count>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The UI-visible count of [resource states](#SourceControlResourceState) of
	 * this source control.
	 *
	 * Equals to the total number of [resource state](#SourceControlResourceState)
	 * of this source control, if undefined.</haxe_doc>
			</count>
			<commitTemplate>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional commit template string.
	 *
	 * The Source Control viewlet will populate the Source Control
	 * input with this value when appropriate.</haxe_doc>
			</commitTemplate>
			<acceptInputCommand>
				<x path="Null"><t path="vscode.Command"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional accept input command.
	 *
	 * This command will be invoked when the user accepts the value
	 * in the Source Control input.</haxe_doc>
			</acceptInputCommand>
		</a>
		<haxe_doc>* An source control is able to provide [resource states](#SourceControlResourceState)
 * to the editor and interact with the editor in several source control related ways.</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlInputBox" params="" file="src/vscode/SourceControlInputBox.hx">
		<a>
			<visible>
				<x path="Bool"/>
				<haxe_doc>* Controls whether the input box is visible (default is `true`).</haxe_doc>
			</visible>
			<value>
				<c path="String"/>
				<haxe_doc>* Setter and getter for the contents of the input box.</haxe_doc>
			</value>
			<placeholder>
				<c path="String"/>
				<haxe_doc>* A string to show as placeholder in the input box to guide the user.</haxe_doc>
			</placeholder>
		</a>
		<haxe_doc>* Represents the input box in the Source Control viewlet.</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlResourceDecorations" params="" file="src/vscode/SourceControlResourceDecorations.hx">
		<a>
			<tooltip set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The title for a specific
	 * [source control resource state](#SourceControlResourceState).</haxe_doc>
			</tooltip>
			<strikeThrough set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the [source control resource state](#SourceControlResourceState) should
	 * be striked-through in the UI.</haxe_doc>
			</strikeThrough>
			<light set="null">
				<x path="Null"><t path="vscode.SourceControlResourceThemableDecorations"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The light theme decorations.</haxe_doc>
			</light>
			<iconPath set="null">
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The icon path for a specific
	 * [source control resource state](#SourceControlResourceState).</haxe_doc>
			</iconPath>
			<faded set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the [source control resource state](#SourceControlResourceState) should
	 * be faded in the UI.</haxe_doc>
			</faded>
			<dark set="null">
				<x path="Null"><t path="vscode.SourceControlResourceThemableDecorations"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The dark theme decorations.</haxe_doc>
			</dark>
		</a>
		<haxe_doc>* The decorations for a [source control resource state](#SourceControlResourceState).
 * Can be independently specified for light and dark themes.</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlResourceGroup" params="" file="src/vscode/SourceControlResourceGroup.hx">
		<a>
			<resourceStates>
				<c path="Array"><t path="vscode.SourceControlResourceState"/></c>
				<haxe_doc>* This group's collection of
	 * [source control resource states](#SourceControlResourceState).</haxe_doc>
			</resourceStates>
			<label>
				<c path="String"/>
				<haxe_doc>* The label of this source control resource group.</haxe_doc>
			</label>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The id of this source control resource group.</haxe_doc>
			</id>
			<hideWhenEmpty>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether this source control resource group is hidden when it contains
	 * no [source control resource states](#SourceControlResourceState).</haxe_doc>
			</hideWhenEmpty>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this source control resource group.</haxe_doc>
			</dispose>
		</a>
		<haxe_doc>* A source control resource group is a collection of
 * [source control resource states](#SourceControlResourceState).</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlResourceState" params="" file="src/vscode/SourceControlResourceState.hx">
		<a>
			<resourceUri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The [uri](#Uri) of the underlying resource inside the workspace.</haxe_doc>
			</resourceUri>
			<decorations set="null">
				<x path="Null"><t path="vscode.SourceControlResourceDecorations"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The [decorations](#SourceControlResourceDecorations) for this source control
	 * resource state.</haxe_doc>
			</decorations>
			<contextValue set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Context value of the resource state. This can be used to contribute resource specific actions.
	 * For example, if a resource is given a context value as `diffable`. When contributing actions to `scm/resourceState/context`
	 * using `menus` extension point, you can specify context value for key `scmResourceState` in `when` expressions, like `scmResourceState == diffable`.
	 * ```
	 *	"contributes": {
	 *		"menus": {
	 *			"scm/resourceState/context": [
	 *				{
	 *					"command": "extension.diff",
	 *					"when": "scmResourceState == diffable"
	 *				}
	 *			]
	 *		}
	 *	}
	 * ```
	 * This will show action `extension.diff` only for resources with `contextValue` is `diffable`.</haxe_doc>
			</contextValue>
			<command set="null">
				<x path="Null"><t path="vscode.Command"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The [command](#Command) which should be run when the resource
	 * state is open in the Source Control viewlet.</haxe_doc>
			</command>
		</a>
		<haxe_doc>* An source control resource state represents the state of an underlying workspace
 * resource within a certain [source control group](#SourceControlResourceGroup).</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlResourceThemableDecorations" params="" file="src/vscode/SourceControlResourceThemableDecorations.hx">
		<a><iconPath set="null">
	<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* The icon path for a specific
	 * [source control resource state](#SourceControlResourceState).</haxe_doc>
</iconPath></a>
		<haxe_doc>* The theme-aware decorations for a
 * [source control resource state](#SourceControlResourceState).</haxe_doc>
	</typedef>
	<abstract path="vscode.StatusBarAlignment" params="" file="src/vscode/StatusBarAlignment.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents the alignment of status bar items.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"StatusBarAlignment"</e>
			</m>
		</meta>
		<impl><class path="vscode._StatusBarAlignment.StatusBarAlignment_Impl_" params="" file="src/vscode/StatusBarAlignment.hx" private="1" module="vscode.StatusBarAlignment" extern="1">
	<Left public="1" set="null" static="1">
		<x path="vscode.StatusBarAlignment"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Aligned to the left side.</haxe_doc>
	</Left>
	<Right public="1" set="null" static="1">
		<x path="vscode.StatusBarAlignment"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Aligned to the right side.</haxe_doc>
	</Right>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"StatusBarAlignment"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._StatusBarAlignment.StatusBarAlignment_Impl_" params="" file="src/vscode/StatusBarAlignment.hx" private="1" module="vscode.StatusBarAlignment" extern="1">
		<Left public="1" set="null" static="1">
			<x path="vscode.StatusBarAlignment"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Aligned to the left side.</haxe_doc>
		</Left>
		<Right public="1" set="null" static="1">
			<x path="vscode.StatusBarAlignment"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Aligned to the right side.</haxe_doc>
		</Right>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"StatusBarAlignment"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.StatusBarItem" params="" file="src/vscode/StatusBarItem.hx">
		<a>
			<tooltip>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>* The tooltip text when you hover over this entry.</haxe_doc>
			</tooltip>
			<text>
				<c path="String"/>
				<haxe_doc>* The text to show for the entry. You can embed icons in the text by leveraging the syntax:
	 *
	 * `My text $(icon-name) contains icons like $(icon-name) this one.`
	 *
	 *  Where the icon-name is taken from the ThemeIcon [icon set](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing), e.g.
	 * `light-bulb`, `thumbsup`, `zap` etc.</haxe_doc>
			</text>
			<show set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Shows the entry in the status bar.</haxe_doc>
			</show>
			<priority set="null">
				<x path="Null"><x path="Float"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The priority of this item. Higher value means the item should
	 * be shown more to the left.</haxe_doc>
			</priority>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hide the entry in the status bar.</haxe_doc>
			</hide>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose and free associated resources. Call
	 * [hide](#StatusBarItem.hide).</haxe_doc>
			</dispose>
			<command>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.Command"/>
</x></x>
				<haxe_doc>* [`Command`](#Command) or identifier of a command to run on click.
	 *
	 * The command must be [known](#commands.getCommands).
	 *
	 * Note that if this is a [`Command`](#Command) object, only the [`command`](#Command.command) and [`arguments`](#Command.arguments)
	 * are used by VS Code.</haxe_doc>
			</command>
			<color>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<haxe_doc>* The foreground color for this entry.</haxe_doc>
			</color>
			<backgroundColor>
				<x path="Null"><c path="vscode.ThemeColor"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The background color for this entry.
	 *
	 * *Note*: only `new ThemeColor('statusBarItem.errorBackground')` is
	 * supported for now. More background colors may be supported in the
	 * future.
	 *
	 * *Note*: when a background color is set, the statusbar may override
	 * the `color` choice to ensure the entry is readable in all themes.</haxe_doc>
			</backgroundColor>
			<alignment set="null">
				<x path="vscode.StatusBarAlignment"/>
				<haxe_doc>* The alignment of this item.</haxe_doc>
			</alignment>
			<accessibilityInformation>
				<x path="Null"><t path="vscode.AccessibilityInformation"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Accessibility information used when screen reader interacts with this StatusBar item</haxe_doc>
			</accessibilityInformation>
		</a>
		<haxe_doc>* A status bar item is a status bar contribution that can
 * show text and icons and run a command on click.</haxe_doc>
	</typedef>
	<class path="vscode.SymbolInformation" params="" file="src/vscode/SymbolInformation.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The name of this symbol.</haxe_doc>
		</name>
		<containerName public="1">
			<c path="String"/>
			<haxe_doc>* The name of the symbol containing this symbol.</haxe_doc>
		</containerName>
		<kind public="1">
			<x path="vscode.SymbolKind"/>
			<haxe_doc>* The kind of this symbol.</haxe_doc>
		</kind>
		<tags public="1">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><x path="vscode.SymbolTag"/></x></x>
			<haxe_doc>* Tags for this symbol.</haxe_doc>
		</tags>
		<location public="1">
			<c path="vscode.Location"/>
			<haxe_doc>* The location of this symbol.</haxe_doc>
		</location>
		<new public="1" set="method">
			<f a="name:kind:containerName:location">
				<c path="String"/>
				<x path="vscode.SymbolKind"/>
				<c path="String"/>
				<c path="vscode.Location"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new symbol information object.
	 *
	 * @param name The name of the symbol.
	 * @param kind The kind of the symbol.
	 * @param containerName The name of the symbol containing the symbol.
	 * @param location The location of the symbol.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="name:kind:range:?uri:?containerName">
		<c path="String"/>
		<x path="vscode.SymbolKind"/>
		<c path="vscode.Range"/>
		<c path="vscode.Uri"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Creates a new symbol information object.
	 *
	 * @param name The name of the symbol.
	 * @param kind The kind of the symbol.
	 * @param containerName The name of the symbol containing the symbol.
	 * @param location The location of the symbol.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* Represents information about programming constructs like variables, classes,
 * interfaces etc.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SymbolInformation"</e>
</m></meta>
	</class>
	<abstract path="vscode.SymbolKind" params="" file="src/vscode/SymbolKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A symbol kind.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SymbolKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._SymbolKind.SymbolKind_Impl_" params="" file="src/vscode/SymbolKind.hx" private="1" module="vscode.SymbolKind" extern="1">
	<File public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</File>
	<Module public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Module>
	<Namespace public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Namespace>
	<Package public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Package>
	<Class public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Class>
	<Method public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Method>
	<Property public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Property>
	<Field public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Field>
	<Constructor public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Constructor>
	<Enum public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Enum>
	<Interface public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Interface>
	<Function public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Function>
	<Variable public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Variable>
	<Constant public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Constant>
	<String public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</String>
	<Number public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Number>
	<Boolean public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Boolean>
	<Array public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Array>
	<Object public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Object>
	<Key public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Key>
	<Null public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Null>
	<EnumMember public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</EnumMember>
	<Struct public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Struct>
	<Event public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Event>
	<Operator public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Operator>
	<TypeParameter public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</TypeParameter>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"SymbolKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._SymbolKind.SymbolKind_Impl_" params="" file="src/vscode/SymbolKind.hx" private="1" module="vscode.SymbolKind" extern="1">
		<File public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</File>
		<Module public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Module>
		<Namespace public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Namespace>
		<Package public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Package>
		<Class public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Class>
		<Method public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Method>
		<Property public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Property>
		<Field public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Field>
		<Constructor public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Constructor>
		<Enum public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Enum>
		<Interface public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Interface>
		<Function public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Function>
		<Variable public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Variable>
		<Constant public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Constant>
		<String public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</String>
		<Number public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Number>
		<Boolean public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Boolean>
		<Array public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Array>
		<Object public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Object>
		<Key public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Key>
		<Null public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Null>
		<EnumMember public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</EnumMember>
		<Struct public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Struct>
		<Event public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Event>
		<Operator public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Operator>
		<TypeParameter public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</TypeParameter>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SymbolKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.SymbolTag" params="" file="src/vscode/SymbolTag.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Symbol tags are extra annotations that tweak the rendering of a symbol.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SymbolTag"</e>
			</m>
		</meta>
		<impl><class path="vscode._SymbolTag.SymbolTag_Impl_" params="" file="src/vscode/SymbolTag.hx" private="1" module="vscode.SymbolTag" extern="1">
	<Deprecated public="1" set="null" static="1">
		<x path="vscode.SymbolTag"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render a symbol as obsolete, usually using a strike-out.</haxe_doc>
	</Deprecated>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"SymbolTag"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._SymbolTag.SymbolTag_Impl_" params="" file="src/vscode/SymbolTag.hx" private="1" module="vscode.SymbolTag" extern="1">
		<Deprecated public="1" set="null" static="1">
			<x path="vscode.SymbolTag"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render a symbol as obsolete, usually using a strike-out.</haxe_doc>
		</Deprecated>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SymbolTag"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.Task" params="" file="src/vscode/Task.hx" extern="1">
		<definition public="1">
			<t path="vscode.TaskDefinition"/>
			<haxe_doc>* The task's definition.</haxe_doc>
		</definition>
		<scope public="1" set="null">
			<x path="Null"><x path="haxe.extern.EitherType">
	<x path="vscode.TaskScope"/>
	<t path="vscode.WorkspaceFolder"/>
</x></x>
			<haxe_doc>* The task's scope.</haxe_doc>
		</scope>
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The task's name</haxe_doc>
		</name>
		<detail public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc><![CDATA[* A human-readable string which is rendered less prominently on a separate line in places
	 * where the task's name is displayed. Supports rendering of [theme icons](#ThemeIcon)
	 * via the `$(<name>)`-syntax.]]></haxe_doc>
		</detail>
		<execution public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.ProcessExecution"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.ShellExecution"/>
		<c path="vscode.CustomExecution"/>
	</x>
</x></x>
			<haxe_doc>* The task's execution engine</haxe_doc>
		</execution>
		<isBackground public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether the task is a background task or not.</haxe_doc>
		</isBackground>
		<source public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* A human-readable string describing the source of this shell task, e.g. 'gulp'
	 * or 'npm'. Supports rendering of [theme icons](#ThemeIcon) via the `$(<name>)`-syntax.]]></haxe_doc>
		</source>
		<group public="1">
			<x path="Null"><c path="vscode.TaskGroup"/></x>
			<haxe_doc>* The task group this tasks belongs to. See TaskGroup
	 * for a predefined set of available groups.
	 * Defaults to undefined meaning that the task doesn't
	 * belong to any special group.</haxe_doc>
		</group>
		<presentationOptions public="1">
			<t path="vscode.TaskPresentationOptions"/>
			<haxe_doc>* The presentation options. Defaults to an empty literal.</haxe_doc>
		</presentationOptions>
		<problemMatchers public="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The problem matchers attached to the task. Defaults to an empty
	 * array.</haxe_doc>
		</problemMatchers>
		<runOptions public="1">
			<t path="vscode.RunOptions"/>
			<haxe_doc>* Run options for the task</haxe_doc>
		</runOptions>
		<new public="1" set="method">
			<f a="taskDefinition:target:name:source:?execution:?problemMatchers">
				<t path="vscode.TaskDefinition"/>
				<x path="haxe.extern.EitherType">
					<t path="vscode.WorkspaceFolder"/>
					<x path="vscode.TaskScope"/>
				</x>
				<c path="String"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="vscode.ProcessExecution"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.ShellExecution"/>
						<c path="vscode.CustomExecution"/>
					</x>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new task.
	 *
	 * @param definition The task definition as defined in the taskDefinitions extension point.
	 * @param scope Specifies the task's scope. It is either a global or a workspace task or a task for a specific workspace folder. Global tasks are currently not supported.
	 * @param name The task's name. Is presented in the user interface.
	 * @param source The task's source (e.g. 'gulp', 'npm', ...). Is presented in the user interface.
	 * @param execution The process or shell execution.
	 * @param problemMatchers the names of problem matchers to use, like '$tsc'
	 *  or '$eslint'. Problem matchers can be contributed by an extension using
	 *  the `problemMatchers` extension point.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="taskDefinition:name:source:?execution:?problemMatchers">
		<t path="vscode.TaskDefinition"/>
		<c path="String"/>
		<c path="String"/>
		<x path="haxe.extern.EitherType">
			<c path="vscode.ProcessExecution"/>
			<c path="vscode.ShellExecution"/>
		</x>
		<x path="haxe.extern.EitherType">
			<c path="String"/>
			<c path="Array"><c path="String"/></c>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Creates a new task.
	 *
	 * @param definition The task definition as defined in the taskDefinitions extension point.
	 * @param scope Specifies the task's scope. It is either a global or a workspace task or a task for a specific workspace folder. Global tasks are currently not supported.
	 * @param name The task's name. Is presented in the user interface.
	 * @param source The task's source (e.g. 'gulp', 'npm', ...). Is presented in the user interface.
	 * @param execution The process or shell execution.
	 * @param problemMatchers the names of problem matchers to use, like '$tsc'
	 *  or '$eslint'. Problem matchers can be contributed by an extension using
	 *  the `problemMatchers` extension point.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* A task to execute</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Task"</e>
</m></meta>
	</class>
	<typedef path="vscode.TaskDefinition" params="" file="src/vscode/TaskDefinition.hx">
		<a><type set="null">
	<c path="String"/>
	<haxe_doc>* The task definition describing the task provided by an extension.
	 * Usually a task provider defines more properties to identify
	 * a task. They need to be defined in the package.json of the
	 * extension under the 'taskDefinitions' extension point. The npm
	 * task definition for example looks like this
	 * ```typescript
	 * interface NpmTaskDefinition extends TaskDefinition {
	 *     script: string;
	 * }
	 * ```
	 *
	 * Note that type identifier starting with a '$' are reserved for internal
	 * usages and shouldn't be used by extensions.</haxe_doc>
</type></a>
		<haxe_doc>* A structure that defines a task kind in the system.
 * The value must be JSON-stringifyable.</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskEndEvent" params="" file="src/vscode/TaskEndEvent.hx">
		<a><execution>
	<t path="vscode.TaskExecution"/>
	<haxe_doc>* The task item representing the task that finished.</haxe_doc>
</execution></a>
		<haxe_doc>* An event signaling the end of an executed task.
 *
 * This interface is not intended to be implemented.</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskExecution" params="" file="src/vscode/TaskExecution.hx">
		<a>
			<terminate set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Terminates the task execution.</haxe_doc>
			</terminate>
			<task>
				<c path="vscode.Task"/>
				<haxe_doc>* The task that got started.</haxe_doc>
			</task>
		</a>
		<haxe_doc>* An object representing an executed Task. It can be used
 * to terminate a task.
 *
 * This interface is not intended to be implemented.</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskFilter" params="" file="src/vscode/TaskFilter.hx"><a>
	<version>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The task version as used in the tasks.json file.
	 * The string support the package.json semver notation.</haxe_doc>
	</version>
	<type>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* The task type to return;</haxe_doc>
	</type>
</a></typedef>
	<class path="vscode.TaskGroup" params="" file="src/vscode/TaskGroup.hx" extern="1">
		<Clean public="1" static="1">
			<c path="vscode.TaskGroup"/>
			<haxe_doc>* The clean task group;</haxe_doc>
		</Clean>
		<Build public="1" static="1">
			<c path="vscode.TaskGroup"/>
			<haxe_doc>* The build task group;</haxe_doc>
		</Build>
		<Rebuild public="1" static="1">
			<c path="vscode.TaskGroup"/>
			<haxe_doc>* The rebuild all task group;</haxe_doc>
		</Rebuild>
		<Test public="1" static="1">
			<c path="vscode.TaskGroup"/>
			<haxe_doc>* The test all task group;</haxe_doc>
		</Test>
		<new set="method"><f a="id:label">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* A grouping for tasks. The editor by default supports the
 * 'Clean', 'Build', 'RebuildAll' and 'Test' group.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TaskGroup"</e>
</m></meta>
	</class>
	<abstract path="vscode.TaskPanelKind" params="" file="src/vscode/TaskPanelKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Controls how the task channel is used between tasks</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskPanelKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._TaskPanelKind.TaskPanelKind_Impl_" params="" file="src/vscode/TaskPanelKind.hx" private="1" module="vscode.TaskPanelKind" extern="1">
	<Shared public="1" set="null" static="1">
		<x path="vscode.TaskPanelKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Shares a panel with other tasks. This is the default.</haxe_doc>
	</Shared>
	<Dedicated public="1" set="null" static="1">
		<x path="vscode.TaskPanelKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Uses a dedicated panel for this tasks. The panel is not
	 * shared with other tasks.</haxe_doc>
	</Dedicated>
	<New public="1" set="null" static="1">
		<x path="vscode.TaskPanelKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Creates a new panel whenever this task is executed.</haxe_doc>
	</New>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TaskPanelKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TaskPanelKind.TaskPanelKind_Impl_" params="" file="src/vscode/TaskPanelKind.hx" private="1" module="vscode.TaskPanelKind" extern="1">
		<Shared public="1" set="null" static="1">
			<x path="vscode.TaskPanelKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Shares a panel with other tasks. This is the default.</haxe_doc>
		</Shared>
		<Dedicated public="1" set="null" static="1">
			<x path="vscode.TaskPanelKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Uses a dedicated panel for this tasks. The panel is not
	 * shared with other tasks.</haxe_doc>
		</Dedicated>
		<New public="1" set="null" static="1">
			<x path="vscode.TaskPanelKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Creates a new panel whenever this task is executed.</haxe_doc>
		</New>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskPanelKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TaskPresentationOptions" params="" file="src/vscode/TaskPresentationOptions.hx">
		<a>
			<showReuseMessage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether to show the "Terminal will be reused by tasks, press any key to close it" message.</haxe_doc>
			</showReuseMessage>
			<reveal>
				<x path="Null"><x path="vscode.TaskRevealKind"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether the task output is reveal in the user interface.
	 * Defaults to `RevealKind.Always`.</haxe_doc>
			</reveal>
			<panel>
				<x path="Null"><x path="vscode.TaskPanelKind"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if the task panel is used for this task only (dedicated),
	 * shared between tasks (shared) or if a new panel is created on
	 * every task execution (new). Defaults to `TaskInstanceKind.Shared`</haxe_doc>
			</panel>
			<focus>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether the panel showing the task output is taking focus.</haxe_doc>
			</focus>
			<echo>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether the command associated with the task is echoed
	 * in the user interface.</haxe_doc>
			</echo>
			<clear>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether the terminal is cleared before executing the task.</haxe_doc>
			</clear>
		</a>
		<haxe_doc>* Controls how the task is presented in the UI.</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskProcessEndEvent" params="" file="src/vscode/TaskProcessEndEvent.hx">
		<a>
			<exitCode set="null">
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>* The process's exit code. Will be `undefined` when the task is terminated.</haxe_doc>
			</exitCode>
			<execution set="null">
				<t path="vscode.TaskExecution"/>
				<haxe_doc>* The task execution for which the process got started.</haxe_doc>
			</execution>
		</a>
		<haxe_doc>* An event signaling the end of a process execution
 * triggered through a task</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskProcessStartEvent" params="" file="src/vscode/TaskProcessStartEvent.hx">
		<a>
			<processId set="null">
				<x path="Int"/>
				<haxe_doc>* The underlying process id.</haxe_doc>
			</processId>
			<execution set="null">
				<t path="vscode.TaskExecution"/>
				<haxe_doc>* The task execution for which the process got started.</haxe_doc>
			</execution>
		</a>
		<haxe_doc>* An event signaling the start of a process execution
 * triggered through a task</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskProvider" params="T" file="src/vscode/TaskProvider.hx">
		<a>
			<resolveTask set="method">
				<f a="task:token">
					<c path="vscode.TaskProvider.T"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.TaskProvider.T"/></t>
				</f>
				<haxe_doc>* Resolves a task that has no [`execution`](#Task.execution) set. Tasks are
	 * often created from information found in the `tasks.json`-file. Such tasks miss
	 * the information on how to execute them and a task provider must fill in
	 * the missing information in the `resolveTask`-method. This method will not be
	 * called for tasks returned from the above `provideTasks` method since those
	 * tasks are always fully resolved. A valid default implementation for the
	 * `resolveTask` method is to return `undefined`.
	 *
	 * Note that when filling in the properties of `task`, you _must_ be sure to
	 * use the exact same `TaskDefinition` and not create a new one. Other properties
	 * may be changed.
	 *
	 * @param task The task to resolve.
	 * @param token A cancellation token.
	 * @return The resolved task</haxe_doc>
			</resolveTask>
			<provideTasks set="method">
				<f a="token">
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TaskProvider.T"/></c></t>
				</f>
				<haxe_doc>* Provides tasks.
	 * @param token A cancellation token.
	 * @return an array of tasks</haxe_doc>
			</provideTasks>
		</a>
		<haxe_doc>* A task provider allows to add tasks to the task service.
 * A task provider is registered via #tasks.registerTaskProvider.</haxe_doc>
	</typedef>
	<abstract path="vscode.TaskRevealKind" params="" file="src/vscode/TaskRevealKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Controls the behaviour of the terminal's visibility.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskRevealKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._TaskRevealKind.TaskRevealKind_Impl_" params="" file="src/vscode/TaskRevealKind.hx" private="1" module="vscode.TaskRevealKind" extern="1">
	<Always public="1" set="null" static="1">
		<x path="vscode.TaskRevealKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Always brings the terminal to front if the task is executed.</haxe_doc>
	</Always>
	<Silent public="1" set="null" static="1">
		<x path="vscode.TaskRevealKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Only brings the terminal to front if a problem is detected executing the task
	 * (e.g. the task couldn't be started because).</haxe_doc>
	</Silent>
	<Never public="1" set="null" static="1">
		<x path="vscode.TaskRevealKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The terminal never comes to front when the task is executed.</haxe_doc>
	</Never>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TaskRevealKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TaskRevealKind.TaskRevealKind_Impl_" params="" file="src/vscode/TaskRevealKind.hx" private="1" module="vscode.TaskRevealKind" extern="1">
		<Always public="1" set="null" static="1">
			<x path="vscode.TaskRevealKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Always brings the terminal to front if the task is executed.</haxe_doc>
		</Always>
		<Silent public="1" set="null" static="1">
			<x path="vscode.TaskRevealKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Only brings the terminal to front if a problem is detected executing the task
	 * (e.g. the task couldn't be started because).</haxe_doc>
		</Silent>
		<Never public="1" set="null" static="1">
			<x path="vscode.TaskRevealKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The terminal never comes to front when the task is executed.</haxe_doc>
		</Never>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskRevealKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.TaskScope" params="" file="src/vscode/TaskScope.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The scope of a task.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskScope"</e>
			</m>
		</meta>
		<impl><class path="vscode._TaskScope.TaskScope_Impl_" params="" file="src/vscode/TaskScope.hx" private="1" module="vscode.TaskScope" extern="1">
	<Global public="1" set="null" static="1">
		<x path="vscode.TaskScope"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The task is a global task. Global tasks are currently not supported.</haxe_doc>
	</Global>
	<Workspace public="1" set="null" static="1">
		<x path="vscode.TaskScope"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The task is a workspace task</haxe_doc>
	</Workspace>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TaskScope"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TaskScope.TaskScope_Impl_" params="" file="src/vscode/TaskScope.hx" private="1" module="vscode.TaskScope" extern="1">
		<Global public="1" set="null" static="1">
			<x path="vscode.TaskScope"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The task is a global task. Global tasks are currently not supported.</haxe_doc>
		</Global>
		<Workspace public="1" set="null" static="1">
			<x path="vscode.TaskScope"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The task is a workspace task</haxe_doc>
		</Workspace>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskScope"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TaskStartEvent" params="" file="src/vscode/TaskStartEvent.hx">
		<a><execution set="null">
	<t path="vscode.TaskExecution"/>
	<haxe_doc>* The task item representing the task that got started.</haxe_doc>
</execution></a>
		<haxe_doc>* An event signaling the start of a task execution.
 *
 * This interface is not intended to be implemented.</haxe_doc>
	</typedef>
	<typedef path="vscode.Terminal" params="" file="src/vscode/Terminal.hx">
		<a>
			<show set="method">
				<f a="?preserveFocus">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Show the terminal panel and reveal this terminal in the UI.
	 *
	 * @param preserveFocus When `true` the terminal will not take focus.</haxe_doc>
			</show>
			<sendText set="method">
				<f a="text:?addNewLine">
					<c path="String"/>
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Send text to the terminal. The text is written to the stdin of the underlying pty process
	 * (shell) of the terminal.
	 *
	 * @param text The text to send.
	 * @param addNewLine Whether to add a new line to the text being sent, this is normally
	 * required to run a command in the terminal. The character(s) added are \n or \r\n
	 * depending on the platform. This defaults to `true`.</haxe_doc>
			</sendText>
			<processId set="null">
				<x path="js.lib.Thenable"><x path="Null"><x path="Int"/></x></x>
				<haxe_doc>* The process ID of the shell process.</haxe_doc>
			</processId>
			<name set="null">
				<c path="String"/>
				<haxe_doc>* The name of the terminal.</haxe_doc>
			</name>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hide the terminal panel if this terminal is currently showing.</haxe_doc>
			</hide>
			<exitStatus set="null">
				<x path="Null"><t path="vscode.TerminalExitStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* The exit status of the terminal, this will be undefined while the terminal is active.
	 *
	 * **Example:** Show a notification with the exit code when the terminal exits with a
	 * non-zero exit code.
	 * ```typescript
	 * window.onDidCloseTerminal(t => {
	 *   if (t.exitStatus && t.exitStatus.code) {
	 *   	vscode.window.showInformationMessage(`Exit code: ${t.exitStatus.code}`);
	 *   }
	 * });
	 * ```]]></haxe_doc>
			</exitStatus>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose and free associated resources.</haxe_doc>
			</dispose>
			<creationOptions set="null">
				<x path="haxe.extern.EitherType">
					<t path="vscode.TerminalOptions"/>
					<t path="vscode.ExtensionTerminalOptions"/>
				</x>
				<haxe_doc>* The object used to initialize the terminal, this is useful for example to detecting the
	 * shell type of when the terminal was not launched by this extension or for detecting what
	 * folder the shell was launched in.</haxe_doc>
			</creationOptions>
		</a>
		<haxe_doc>* An individual terminal instance within the integrated terminal.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalDimensions" params="" file="src/vscode/TerminalDimensions.hx">
		<a>
			<rows set="null">
				<x path="Int"/>
				<haxe_doc>* The number of rows in the terminal.</haxe_doc>
			</rows>
			<columns set="null">
				<x path="Int"/>
				<haxe_doc>* The number of columns in the terminal.</haxe_doc>
			</columns>
		</a>
		<haxe_doc>* Represents the dimensions of a terminal.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalExitStatus" params="" file="src/vscode/TerminalExitStatus.hx">
		<a><code set="null">
	<x path="Null"><x path="Int"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* The exit code that a terminal exited with, it can have the following values:
	 * - Zero: the terminal process or custom execution succeeded.
	 * - Non-zero: the terminal process or custom execution failed.
	 * - `undefined`: the user forcibly closed the terminal or a custom execution exited
	 *   without providing an exit code.</haxe_doc>
</code></a>
		<haxe_doc>* Represents how a terminal exited.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalLink" params="" file="src/vscode/TerminalLink.hx">
		<a>
			<tooltip>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The tooltip text when you hover over this link.
	 *
	 * If a tooltip is provided, is will be displayed in a string that includes instructions on
	 * how to trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary
	 * depending on OS, user settings, and localization.</haxe_doc>
			</tooltip>
			<startIndex>
				<x path="Int"/>
				<haxe_doc>* The start index of the link on [TerminalLinkContext.line](#TerminalLinkContext.line].</haxe_doc>
			</startIndex>
			<length>
				<x path="Int"/>
				<haxe_doc>* The length of the link on [TerminalLinkContext.line](#TerminalLinkContext.line]</haxe_doc>
			</length>
		</a>
		<haxe_doc>* A link on a terminal line.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalLinkContext" params="" file="src/vscode/TerminalLinkContext.hx">
		<a>
			<terminal>
				<t path="vscode.Terminal"/>
				<haxe_doc>* The terminal the link belongs to.</haxe_doc>
			</terminal>
			<line>
				<c path="String"/>
				<haxe_doc>* This is the text from the unwrapped line in the terminal.</haxe_doc>
			</line>
		</a>
		<haxe_doc>* Provides information on a line in a terminal in order to provide links for it.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalLinkProvider" params="T" file="src/vscode/TerminalLinkProvider.hx">
		<a>
			<provideTerminalLinks set="method">
				<f a="context:token">
					<t path="vscode.TerminalLinkContext"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TerminalLinkProvider.T"/></c></t>
				</f>
				<haxe_doc>* Provide terminal links for the given context. Note that this can be called multiple times
	 * even before previous calls resolve, make sure to not share global objects (eg. `RegExp`)
	 * that could have problems when asynchronous usage may overlap.
	 * @param context Information about what links are being provided for.
	 * @param token A cancellation token.
	 * @return A list of terminal links for the given line.</haxe_doc>
			</provideTerminalLinks>
			<handleTerminalLink set="method">
				<f a="link">
					<c path="vscode.TerminalLinkProvider.T"/>
					<t path="vscode.ProviderResult"><x path="Void"/></t>
				</f>
				<haxe_doc>* Handle an activated terminal link.
	 * @param link The link to handle.</haxe_doc>
			</handleTerminalLink>
		</a>
		<haxe_doc>* A provider that enables detection and handling of links within terminals.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalOptions" params="" file="src/vscode/TerminalOptions.hx">
		<a>
			<strictEnv>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the terminal process environment should be exactly as provided in
	 * `TerminalOptions.env`. When this is false (default), the environment will be based on the
	 * window's environment and also apply configured platform settings like
	 * `terminal.integrated.windows.env` on top. When this is true, the complete environment
	 * must be provided as nothing will be inherited from the process or any configuration.</haxe_doc>
			</strictEnv>
			<shellPath>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A path to a custom shell executable to be used in the terminal.</haxe_doc>
			</shellPath>
			<shellArgs>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Args for the custom shell executable. A string can be used on Windows only which allows
	 * specifying shell args in [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6).</haxe_doc>
			</shellArgs>
			<name>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string which will be used to represent the terminal in the UI.</haxe_doc>
			</name>
			<hideFromUser>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When enabled the terminal will run the process as normal but not be surfaced to the user
	 * until `Terminal.show` is called. The typical usage for this is when you need to run
	 * something that may need interactivity but only want to tell the user about it when
	 * interaction is needed. Note that the terminals will still be exposed to all extensions
	 * as normal.</haxe_doc>
			</hideFromUser>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><x path="Null"><c path="String"/></x></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Object with environment variables that will be added to the VS Code process.</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A path or Uri for the current working directory to be used for the terminal.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>* Value-object describing what options a terminal should use.</haxe_doc>
	</typedef>
	<typedef path="vscode.TextDocument" params="" file="src/vscode/TextDocument.hx">
		<a>
			<version set="null">
				<x path="Int"/>
				<haxe_doc>* The version number of this document (it will strictly increase after each
	 * change, including undo/redo).</haxe_doc>
			</version>
			<validateRange set="method">
				<f a="range">
					<c path="vscode.Range"/>
					<c path="vscode.Range"/>
				</f>
				<haxe_doc>* Ensure a range is completely contained in this document.
	 *
	 * @param range A range.
	 * @return The given range or a new, adjusted range.</haxe_doc>
			</validateRange>
			<validatePosition set="method">
				<f a="position">
					<c path="vscode.Position"/>
					<c path="vscode.Position"/>
				</f>
				<haxe_doc>* Ensure a position is contained in the range of this document.
	 *
	 * @param position A position.
	 * @return The given position or a new, adjusted position.</haxe_doc>
			</validatePosition>
			<uri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The associated uri for this document.
	 *
	 * *Note* that most documents use the `file`-scheme, which means they are files on disk. However, **not** all documents are
	 * saved on disk and therefore the `scheme` must be checked before trying to access the underlying file or siblings on disk.
	 *
	 * @see [FileSystemProvider](#FileSystemProvider)
	 * @see [TextDocumentContentProvider](#TextDocumentContentProvider)</haxe_doc>
			</uri>
			<save set="method">
				<f a=""><x path="js.lib.Thenable"><x path="Bool"/></x></f>
				<haxe_doc>* Save the underlying file.
	 *
	 * @return A promise that will resolve to true when the file
	 * has been saved. If the file was not dirty or the save failed,
	 * will return false.</haxe_doc>
			</save>
			<positionAt set="method">
				<f a="offset">
					<x path="Int"/>
					<c path="vscode.Position"/>
				</f>
				<haxe_doc>* Converts a zero-based offset to a position.
	 *
	 * @param offset A zero-based offset.
	 * @return A valid [position](#Position).</haxe_doc>
			</positionAt>
			<offsetAt set="method">
				<f a="position">
					<c path="vscode.Position"/>
					<x path="Int"/>
				</f>
				<haxe_doc>* Converts the position to a zero-based offset.
	 *
	 * The position will be [adjusted](#TextDocument.validatePosition).
	 *
	 * @param position A position.
	 * @return A valid zero-based offset.</haxe_doc>
			</offsetAt>
			<lineCount set="null">
				<x path="Int"/>
				<haxe_doc>* The number of lines in this document.</haxe_doc>
			</lineCount>
			<lineAt set="method">
				<f a="line">
					<x path="Int"/>
					<t path="vscode.TextLine"/>
				</f>
				<haxe_doc>* Returns a text line denoted by the line number. Note
	 * that the returned object is *not* live and changes to the
	 * document are not reflected.
	 *
	 * @param line A line number in [0, lineCount).
	 * @return A [line](#TextLine).</haxe_doc>
				<overloads><lineAt public="1" set="method">
	<f a="position">
		<c path="vscode.Position"/>
		<t path="vscode.TextLine"/>
	</f>
	<haxe_doc>* Returns a text line denoted by the line number. Note
	 * that the returned object is *not* live and changes to the
	 * document are not reflected.
	 *
	 * @param line A line number in [0, lineCount).
	 * @return A [line](#TextLine).</haxe_doc>
</lineAt></overloads>
			</lineAt>
			<languageId set="null">
				<c path="String"/>
				<haxe_doc>* The identifier of the language associated with this document.</haxe_doc>
			</languageId>
			<isUntitled set="null">
				<x path="Bool"/>
				<haxe_doc>* Is this document representing an untitled file which has never been saved yet. *Note* that
	 * this does not mean the document will be saved to disk, use [`uri.scheme`](#Uri.scheme)
	 * to figure out where a document will be [saved](#FileSystemProvider), e.g. `file`, `ftp` etc.</haxe_doc>
			</isUntitled>
			<isDirty set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if there are unpersisted changes.</haxe_doc>
			</isDirty>
			<isClosed set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if the document has been closed. A closed document isn't synchronized anymore
	 * and won't be re-used when the same resource is opened again.</haxe_doc>
			</isClosed>
			<getWordRangeAtPosition set="method">
				<f a="position:?regex">
					<c path="vscode.Position"/>
					<c path="js.lib.RegExp"/>
					<x path="Null"><c path="vscode.Range"/></x>
				</f>
				<haxe_doc>* Get a word-range at the given position. By default words are defined by
	 * common separators, like space, -, _, etc. In addition, per language custom
	 * [word definitions](#LanguageConfiguration.wordPattern) can be defined. It
	 * is also possible to provide a custom regular expression.
	 *
	 * * *Note 1:* A custom regular expression must not match the empty string and
	 * if it does, it will be ignored.
	 * * *Note 2:* A custom regular expression will fail to match multiline strings
	 * and in the name of speed regular expressions should not match words with
	 * spaces. Use [`TextLine.text`](#TextLine.text) for more complex, non-wordy, scenarios.
	 *
	 * The position will be [adjusted](#TextDocument.validatePosition).
	 *
	 * @param position A position.
	 * @param regex Optional regular expression that describes what a word is.
	 * @return A range spanning a word, or `undefined`.</haxe_doc>
			</getWordRangeAtPosition>
			<getText set="method">
				<f a="?range">
					<c path="vscode.Range"/>
					<c path="String"/>
				</f>
				<haxe_doc>* Get the text of this document. A substring can be retrieved by providing
	 * a range. The range will be [adjusted](#TextDocument.validateRange).
	 *
	 * @param range Include only the text included by the range.
	 * @return The text inside the provided range or the entire text.</haxe_doc>
			</getText>
			<fileName set="null">
				<c path="String"/>
				<haxe_doc>* The file system path of the associated resource. Shorthand
	 * notation for [TextDocument.uri.fsPath](#TextDocument.uri). Independent of the uri scheme.</haxe_doc>
			</fileName>
			<eol set="null">
				<x path="vscode.EndOfLine"/>
				<haxe_doc>* The [end of line](#EndOfLine) sequence that is predominately
	 * used in this document.</haxe_doc>
			</eol>
		</a>
		<haxe_doc>* Represents a text document, such as a source file. Text documents have
 * [lines](#TextLine) and knowledge about an underlying resource like a file.</haxe_doc>
	</typedef>
	<typedef path="vscode.TextDocumentChangeEvent" params="" file="src/vscode/TextDocumentChangeEvent.hx">
		<a>
			<document set="null">
				<t path="vscode.TextDocument"/>
				<haxe_doc>* The affected document.</haxe_doc>
			</document>
			<contentChanges set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TextDocumentContentChangeEvent"/></x>
				<haxe_doc>* An array of content changes.</haxe_doc>
			</contentChanges>
		</a>
		<haxe_doc>* An event describing a transactional [document](#TextDocument) change.</haxe_doc>
	</typedef>
	<typedef path="vscode.TextDocumentContentChangeEvent" params="" file="src/vscode/TextDocumentContentChangeEvent.hx">
		<a>
			<text set="null">
				<c path="String"/>
				<haxe_doc>* The new text for the range.</haxe_doc>
			</text>
			<rangeOffset set="null">
				<x path="Int"/>
				<haxe_doc>* The offset of the range that got replaced.</haxe_doc>
			</rangeOffset>
			<rangeLength set="null">
				<x path="Int"/>
				<haxe_doc>* The length of the range that got replaced.</haxe_doc>
			</rangeLength>
			<range set="null">
				<c path="vscode.Range"/>
				<haxe_doc>* The range that got replaced.</haxe_doc>
			</range>
		</a>
		<haxe_doc>* An event describing an individual change in the text of a [document](#TextDocument).</haxe_doc>
	</typedef>
	<typedef path="vscode.TextDocumentContentProvider" params="" file="src/vscode/TextDocumentContentProvider.hx">
		<a>
			<provideTextDocumentContent set="method">
				<f a="uri:token">
					<c path="vscode.Uri"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="String"/></t>
				</f>
				<haxe_doc>* Provide textual content for a given uri.
	 *
	 * The editor will use the returned string-content to create a readonly
	 * [document](#TextDocument). Resources allocated should be released when
	 * the corresponding document has been [closed](#workspace.onDidCloseTextDocument).
	 *
	 * **Note**: The contents of the created [document](#TextDocument) might not be
	 * identical to the provided text due to end-of-line-sequence normalization.
	 *
	 * @param uri An uri which scheme matches the scheme this provider was [registered](#workspace.registerTextDocumentContentProvider) for.
	 * @param token A cancellation token.
	 * @return A string or a thenable that resolves to such.</haxe_doc>
			</provideTextDocumentContent>
			<onDidChange set="null">
				<x path="Null"><t path="vscode.Event"><c path="vscode.Uri"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An event to signal a resource has changed.</haxe_doc>
			</onDidChange>
		</a>
		<haxe_doc>* A text document content provider allows to add readonly documents
 * to the editor, such as source from a dll or generated html from md.
 *
 * Content providers are [registered](#workspace.registerTextDocumentContentProvider)
 * for a [uri-scheme](#Uri.scheme). When a uri with that scheme is to
 * be [loaded](#workspace.openTextDocument) the content provider is
 * asked.</haxe_doc>
	</typedef>
	<abstract path="vscode.TextDocumentSaveReason" params="" file="src/vscode/TextDocumentSaveReason.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents reasons why a text document is saved.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextDocumentSaveReason"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextDocumentSaveReason.TextDocumentSaveReason_Impl_" params="" file="src/vscode/TextDocumentSaveReason.hx" private="1" module="vscode.TextDocumentSaveReason" extern="1">
	<Manual public="1" set="null" static="1">
		<x path="vscode.TextDocumentSaveReason"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Manually triggered, e.g. by the user pressing save, by starting debugging,
	 * or by an API call.</haxe_doc>
	</Manual>
	<AfterDelay public="1" set="null" static="1">
		<x path="vscode.TextDocumentSaveReason"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Automatic after a delay.</haxe_doc>
	</AfterDelay>
	<FocusOut public="1" set="null" static="1">
		<x path="vscode.TextDocumentSaveReason"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* When the editor lost focus.</haxe_doc>
	</FocusOut>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextDocumentSaveReason"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextDocumentSaveReason.TextDocumentSaveReason_Impl_" params="" file="src/vscode/TextDocumentSaveReason.hx" private="1" module="vscode.TextDocumentSaveReason" extern="1">
		<Manual public="1" set="null" static="1">
			<x path="vscode.TextDocumentSaveReason"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Manually triggered, e.g. by the user pressing save, by starting debugging,
	 * or by an API call.</haxe_doc>
		</Manual>
		<AfterDelay public="1" set="null" static="1">
			<x path="vscode.TextDocumentSaveReason"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Automatic after a delay.</haxe_doc>
		</AfterDelay>
		<FocusOut public="1" set="null" static="1">
			<x path="vscode.TextDocumentSaveReason"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* When the editor lost focus.</haxe_doc>
		</FocusOut>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextDocumentSaveReason"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextDocumentShowOptions" params="" file="src/vscode/TextDocumentShowOptions.hx">
		<a>
			<viewColumn>
				<x path="Null"><x path="vscode.ViewColumn"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional view column in which the [editor](#TextEditor) should be shown.
	 * The default is the [active](#ViewColumn.Active), other values are adjusted to
	 * be `Min(column, columnCount + 1)`, the [active](#ViewColumn.Active)-column is
	 * not adjusted. Use [`ViewColumn.Beside`](#ViewColumn.Beside) to open the
	 * editor to the side of the currently active one.</haxe_doc>
			</viewColumn>
			<selection>
				<x path="Null"><c path="vscode.Range"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional selection to apply for the document in the [editor](#TextEditor).</haxe_doc>
			</selection>
			<preview>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag that controls if an [editor](#TextEditor)-tab will be replaced
	 * with the next editor or if it will be kept.</haxe_doc>
			</preview>
			<preserveFocus>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag that when `true` will stop the [editor](#TextEditor) from taking focus.</haxe_doc>
			</preserveFocus>
		</a>
		<haxe_doc>* Represents options to configure the behavior of showing a [document](#TextDocument) in an [editor](#TextEditor).</haxe_doc>
	</typedef>
	<typedef path="vscode.TextDocumentWillSaveEvent" params="" file="src/vscode/TextDocumentWillSaveEvent.hx">
		<a>
			<waitUntil set="method">
				<f a="thenable">
					<x path="js.lib.Thenable"><c path="Array"><c path="vscode.TextEdit"/></c></x>
					<x path="Void"/>
				</f>
				<haxe_doc><![CDATA[* Allows to pause the event loop and to apply [pre-save-edits](#TextEdit).
	 * Edits of subsequent calls to this function will be applied in order. The
	 * edits will be *ignored* if concurrent modifications of the document happened.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillSaveTextDocument(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that resolves to [pre-save-edits](#TextEdit).]]></haxe_doc>
				<overloads><waitUntil public="1" set="method">
	<f a="thenable">
		<x path="js.lib.Thenable"><d/></x>
		<x path="Void"/>
	</f>
	<haxe_doc><![CDATA[* Allows to pause the event loop and to apply [pre-save-edits](#TextEdit).
	 * Edits of subsequent calls to this function will be applied in order. The
	 * edits will be *ignored* if concurrent modifications of the document happened.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillSaveTextDocument(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that resolves to [pre-save-edits](#TextEdit).]]></haxe_doc>
</waitUntil></overloads>
			</waitUntil>
			<reason set="null">
				<x path="vscode.TextDocumentSaveReason"/>
				<haxe_doc>* The reason why save was triggered.</haxe_doc>
			</reason>
			<document set="null">
				<t path="vscode.TextDocument"/>
				<haxe_doc>* The document that will be saved.</haxe_doc>
			</document>
		</a>
		<haxe_doc>* An event that is fired when a [document](#TextDocument) will be saved.
 *
 * To make modifications to the document before it is being saved, call the
 * [`waitUntil`](#TextDocumentWillSaveEvent.waitUntil)-function with a thenable
 * that resolves to an array of [text edits](#TextEdit).</haxe_doc>
	</typedef>
	<class path="vscode.TextEdit" params="" file="src/vscode/TextEdit.hx" extern="1">
		<replace public="1" set="method" static="1">
			<f a="range:newText">
				<c path="vscode.Range"/>
				<c path="String"/>
				<c path="vscode.TextEdit"/>
			</f>
			<haxe_doc>* Utility to create a replace edit.
	 *
	 * @param range A range.
	 * @param newText A string.
	 * @return A new text edit object.</haxe_doc>
		</replace>
		<insert public="1" set="method" static="1">
			<f a="position:newText">
				<c path="vscode.Position"/>
				<c path="String"/>
				<c path="vscode.TextEdit"/>
			</f>
			<haxe_doc>* Utility to create an insert edit.
	 *
	 * @param position A position, will become an empty range.
	 * @param newText A string.
	 * @return A new text edit object.</haxe_doc>
		</insert>
		<delete public="1" set="method" static="1">
			<f a="range">
				<c path="vscode.Range"/>
				<c path="vscode.TextEdit"/>
			</f>
			<haxe_doc>* Utility to create a delete edit.
	 *
	 * @param range A range.
	 * @return A new text edit object.</haxe_doc>
		</delete>
		<setEndOfLine public="1" set="method" static="1">
			<f a="eol">
				<x path="vscode.EndOfLine"/>
				<c path="vscode.TextEdit"/>
			</f>
			<haxe_doc>* Utility to create an eol-edit.
	 *
	 * @param eol An eol-sequence
	 * @return A new text edit object.</haxe_doc>
		</setEndOfLine>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range this edit applies to.</haxe_doc>
		</range>
		<newText public="1">
			<c path="String"/>
			<haxe_doc>* The string this edit will insert.</haxe_doc>
		</newText>
		<newEol public="1">
			<x path="Null"><x path="vscode.EndOfLine"/></x>
			<haxe_doc>* The eol-sequence used in the document.
	 *
	 * *Note* that the eol-sequence will be applied to the
	 * whole document.</haxe_doc>
		</newEol>
		<new public="1" set="method">
			<f a="range:newText">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new TextEdit.
	 *
	 * @param range A range.
	 * @param newText A string.</haxe_doc>
		</new>
		<haxe_doc>* A text edit represents edits that should be applied
 * to a document.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TextEdit"</e>
</m></meta>
	</class>
	<typedef path="vscode.TextEditor" params="" file="src/vscode/TextEditor.hx">
		<a>
			<visibleRanges set="null">
				<c path="Array"><c path="vscode.Range"/></c>
				<haxe_doc>* The current visible ranges in the editor (vertically).
	 * This accounts only for vertical scrolling, and not for horizontal scrolling.</haxe_doc>
			</visibleRanges>
			<viewColumn set="null">
				<x path="Null"><x path="vscode.ViewColumn"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The column in which this editor shows. Will be `undefined` in case this
	 * isn't one of the main editors, e.g. an embedded editor, or when the editor
	 * column is larger than three.</haxe_doc>
			</viewColumn>
			<show set="method">
				<f a="?column">
					<x path="vscode.ViewColumn"/>
					<x path="Void"/>
				</f>
				<meta><m n=":deprecated"><e>"Use [window.showTextDocument](#window.showTextDocument)"</e></m></meta>
				<haxe_doc>* Show the text editor.
	 *
	 * @deprecated Use [window.showTextDocument](#window.showTextDocument) instead.
	 *
	 * @param column The [column](#ViewColumn) in which to show this editor.
	 * This method shows unexpected behavior and will be removed in the next major update.</haxe_doc>
			</show>
			<setDecorations set="method">
				<f a="decorationType:rangesOrOptions">
					<t path="vscode.TextEditorDecorationType"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><c path="vscode.Range"/></c>
						<c path="Array"><t path="vscode.DecorationOptions"/></c>
					</x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Adds a set of decorations to the text editor. If a set of decorations already exists with
	 * the given [decoration type](#TextEditorDecorationType), they will be replaced.
	 *
	 * @see [createTextEditorDecorationType](#window.createTextEditorDecorationType).
	 *
	 * @param decorationType A decoration type.
	 * @param rangesOrOptions Either [ranges](#Range) or more detailed [options](#DecorationOptions).</haxe_doc>
			</setDecorations>
			<selections>
				<c path="Array"><c path="vscode.Selection"/></c>
				<haxe_doc>* The selections in this text editor. The primary selection is always at index 0.</haxe_doc>
			</selections>
			<selection>
				<c path="vscode.Selection"/>
				<haxe_doc>* The primary selection on this text editor. Shorthand for `TextEditor.selections[0]`.</haxe_doc>
			</selection>
			<revealRange set="method">
				<f a="range:?revealType">
					<c path="vscode.Range"/>
					<x path="vscode.TextEditorRevealType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Scroll as indicated by `revealType` in order to reveal the given range.
	 *
	 * @param range A range.
	 * @param revealType The scrolling strategy for revealing `range`.</haxe_doc>
			</revealRange>
			<options>
				<t path="vscode.TextEditorOptions"/>
				<haxe_doc>* Text editor options.</haxe_doc>
			</options>
			<insertSnippet set="method">
				<f a="snippet:?location:?options">
					<c path="vscode.SnippetString"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.Position"/>
						<x path="haxe.extern.EitherType">
							<c path="vscode.Range"/>
							<x path="haxe.extern.EitherType">
								<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Position"/></x>
								<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Range"/></x>
							</x>
						</x>
					</x>
					<a>
						<undoStopBefore><x path="Bool"/></undoStopBefore>
						<undoStopAfter><x path="Bool"/></undoStopAfter>
					</a>
					<x path="js.lib.Thenable"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Insert a [snippet](#SnippetString) and put the editor into snippet mode. "Snippet mode"
	 * means the editor adds placeholders and additional cursors so that the user can complete
	 * or accept the snippet.
	 *
	 * @param snippet The snippet to insert in this edit.
	 * @param location Position or range at which to insert the snippet, defaults to the current editor selection or selections.
	 * @param options The undo/redo behavior around this edit. By default, undo stops will be created before and after this edit.
	 * @return A promise that resolves with a value indicating if the snippet could be inserted. Note that the promise does not signal
	 * that the snippet is completely filled-in or accepted.</haxe_doc>
			</insertSnippet>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<meta><m n=":deprecated"><e>"Use the command `workbench.action.closeActiveEditor` instead."</e></m></meta>
				<haxe_doc>* Hide the text editor.
	 *
	 * @deprecated Use the command `workbench.action.closeActiveEditor` instead.
	 * This method shows unexpected behavior and will be removed in the next major update.</haxe_doc>
			</hide>
			<edit set="method">
				<f a="callback:?options">
					<f a="">
						<t path="vscode.TextEditorEdit"/>
						<x path="Void"/>
					</f>
					<a>
						<undoStopBefore><x path="Bool"/></undoStopBefore>
						<undoStopAfter><x path="Bool"/></undoStopAfter>
					</a>
					<x path="js.lib.Thenable"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Perform an edit on the document associated with this text editor.
	 *
	 * The given callback-function is invoked with an [edit-builder](#TextEditorEdit) which must
	 * be used to make edits. Note that the edit-builder is only valid while the
	 * callback executes.
	 *
	 * @param callback A function which can create edits using an [edit-builder](#TextEditorEdit).
	 * @param options The undo/redo behavior around this edit. By default, undo stops will be created before and after this edit.
	 * @return A promise that resolves with a value indicating if the edits could be applied.</haxe_doc>
			</edit>
			<document set="null">
				<t path="vscode.TextDocument"/>
				<haxe_doc>* The document associated with this text editor. The document will be the same for the entire lifetime of this text editor.</haxe_doc>
			</document>
		</a>
		<haxe_doc>* Represents an editor that is attached to a [document](#TextDocument).</haxe_doc>
	</typedef>
	<abstract path="vscode.TextEditorCursorStyle" params="" file="src/vscode/TextEditorCursorStyle.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Rendering style of the cursor.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorCursorStyle"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextEditorCursorStyle.TextEditorCursorStyle_Impl_" params="" file="src/vscode/TextEditorCursorStyle.hx" private="1" module="vscode.TextEditorCursorStyle" extern="1">
	<Line public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render the cursor as a vertical thick line.</haxe_doc>
	</Line>
	<Block public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render the cursor as a block filled.</haxe_doc>
	</Block>
	<Underline public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render the cursor as a thick horizontal line.</haxe_doc>
	</Underline>
	<LineThin public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render the cursor as a vertical thin line.</haxe_doc>
	</LineThin>
	<BlockOutline public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render the cursor as a block outlined.</haxe_doc>
	</BlockOutline>
	<UnderlineThin public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render the cursor as a thin horizontal line.</haxe_doc>
	</UnderlineThin>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextEditorCursorStyle"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextEditorCursorStyle.TextEditorCursorStyle_Impl_" params="" file="src/vscode/TextEditorCursorStyle.hx" private="1" module="vscode.TextEditorCursorStyle" extern="1">
		<Line public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render the cursor as a vertical thick line.</haxe_doc>
		</Line>
		<Block public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render the cursor as a block filled.</haxe_doc>
		</Block>
		<Underline public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render the cursor as a thick horizontal line.</haxe_doc>
		</Underline>
		<LineThin public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render the cursor as a vertical thin line.</haxe_doc>
		</LineThin>
		<BlockOutline public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render the cursor as a block outlined.</haxe_doc>
		</BlockOutline>
		<UnderlineThin public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render the cursor as a thin horizontal line.</haxe_doc>
		</UnderlineThin>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorCursorStyle"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextEditorDecorationType" params="" file="src/vscode/TextEditorDecorationType.hx">
		<a>
			<key set="null">
				<c path="String"/>
				<haxe_doc>* Internal representation of the handle.</haxe_doc>
			</key>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Remove this decoration type and all decorations on all text editors using it.</haxe_doc>
			</dispose>
		</a>
		<haxe_doc>* Represents a handle to a set of decorations
 * sharing the same [styling options](#DecorationRenderOptions) in a [text editor](#TextEditor).
 *
 * To get an instance of a `TextEditorDecorationType` use
 * [createTextEditorDecorationType](#window.createTextEditorDecorationType).</haxe_doc>
	</typedef>
	<typedef path="vscode.TextEditorEdit" params="" file="src/vscode/TextEditorEdit.hx">
		<a>
			<setEndOfLine set="method">
				<f a="endOfLine">
					<x path="vscode.EndOfLine"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Set the end of line sequence.
	 *
	 * @param endOfLine The new end of line for the [document](#TextDocument).</haxe_doc>
			</setEndOfLine>
			<replace set="method">
				<f a="location:value">
					<x path="haxe.extern.EitherType">
						<c path="vscode.Position"/>
						<x path="haxe.extern.EitherType">
							<c path="vscode.Range"/>
							<c path="vscode.Selection"/>
						</x>
					</x>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Replace a certain text region with a new value.
	 * You can use \r\n or \n in `value` and they will be normalized to the current [document](#TextDocument).
	 *
	 * @param location The range this operation should remove.
	 * @param value The new text this operation should insert after removing `location`.</haxe_doc>
			</replace>
			<insert set="method">
				<f a="location:value">
					<c path="vscode.Position"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Insert text at a location.
	 * You can use \r\n or \n in `value` and they will be normalized to the current [document](#TextDocument).
	 * Although the equivalent text edit can be made with [replace](#TextEditorEdit.replace), `insert` will produce a different resulting selection (it will get moved).
	 *
	 * @param location The position where the new text should be inserted.
	 * @param value The new text this operation should insert.</haxe_doc>
			</insert>
			<delete set="method">
				<f a="location">
					<x path="haxe.extern.EitherType">
						<c path="vscode.Range"/>
						<c path="vscode.Selection"/>
					</x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Delete a certain text region.
	 *
	 * @param location The range this operation should remove.</haxe_doc>
			</delete>
		</a>
		<haxe_doc>* A complex edit that will be applied in one transaction on a TextEditor.
 * This holds a description of the edits and if the edits are valid (i.e. no overlapping regions, document was not changed in the meantime, etc.)
 * they can be applied on a [document](#TextDocument) associated with a [text editor](#TextEditor).</haxe_doc>
	</typedef>
	<abstract path="vscode.TextEditorLineNumbersStyle" params="" file="src/vscode/TextEditorLineNumbersStyle.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Rendering style of the line numbers.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorLineNumbersStyle"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextEditorLineNumbersStyle.TextEditorLineNumbersStyle_Impl_" params="" file="src/vscode/TextEditorLineNumbersStyle.hx" private="1" module="vscode.TextEditorLineNumbersStyle" extern="1">
	<Off public="1" set="null" static="1">
		<x path="vscode.TextEditorLineNumbersStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Do not render the line numbers.</haxe_doc>
	</Off>
	<On public="1" set="null" static="1">
		<x path="vscode.TextEditorLineNumbersStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render the line numbers.</haxe_doc>
	</On>
	<Relative public="1" set="null" static="1">
		<x path="vscode.TextEditorLineNumbersStyle"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Render the line numbers with values relative to the primary cursor location.</haxe_doc>
	</Relative>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextEditorLineNumbersStyle"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextEditorLineNumbersStyle.TextEditorLineNumbersStyle_Impl_" params="" file="src/vscode/TextEditorLineNumbersStyle.hx" private="1" module="vscode.TextEditorLineNumbersStyle" extern="1">
		<Off public="1" set="null" static="1">
			<x path="vscode.TextEditorLineNumbersStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Do not render the line numbers.</haxe_doc>
		</Off>
		<On public="1" set="null" static="1">
			<x path="vscode.TextEditorLineNumbersStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render the line numbers.</haxe_doc>
		</On>
		<Relative public="1" set="null" static="1">
			<x path="vscode.TextEditorLineNumbersStyle"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Render the line numbers with values relative to the primary cursor location.</haxe_doc>
		</Relative>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorLineNumbersStyle"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextEditorOptions" params="" file="src/vscode/TextEditorOptions.hx">
		<a>
			<tabSize>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The size in spaces a tab takes. This is used for two purposes:
	 *  - the rendering width of a tab character;
	 *  - the number of spaces to insert when [insertSpaces](#TextEditorOptions.insertSpaces) is true.
	 *
	 * When getting a text editor's options, this property will always be a number (resolved).
	 * When setting a text editor's options, this property is optional and it can be a number or `"auto"`.</haxe_doc>
			</tabSize>
			<lineNumbers>
				<x path="Null"><x path="vscode.TextEditorLineNumbersStyle"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Render relative line numbers w.r.t. the current line number.
	 * When getting a text editor's options, this property will always be present.
	 * When setting a text editor's options, this property is optional.</haxe_doc>
			</lineNumbers>
			<insertSpaces>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When pressing Tab insert [n](#TextEditorOptions.tabSize) spaces.
	 * When getting a text editor's options, this property will always be a boolean (resolved).
	 * When setting a text editor's options, this property is optional and it can be a boolean or `"auto"`.</haxe_doc>
			</insertSpaces>
			<cursorStyle>
				<x path="Null"><x path="vscode.TextEditorCursorStyle"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The rendering style of the cursor in this editor.
	 * When getting a text editor's options, this property will always be present.
	 * When setting a text editor's options, this property is optional.</haxe_doc>
			</cursorStyle>
		</a>
		<haxe_doc>* Represents a [text editor](#TextEditor)'s [options](#TextEditor.options).</haxe_doc>
	</typedef>
	<typedef path="vscode.TextEditorOptionsChangeEvent" params="" file="src/vscode/TextEditorOptionsChangeEvent.hx">
		<a>
			<textEditor set="null">
				<t path="vscode.TextEditor"/>
				<haxe_doc>* The [text editor](#TextEditor) for which the options have changed.</haxe_doc>
			</textEditor>
			<options set="null">
				<t path="vscode.TextEditorOptions"/>
				<haxe_doc>* The new value for the [text editor's options](#TextEditor.options).</haxe_doc>
			</options>
		</a>
		<haxe_doc>* Represents an event describing the change in a [text editor's options](#TextEditor.options).</haxe_doc>
	</typedef>
	<abstract path="vscode.TextEditorRevealType" params="" file="src/vscode/TextEditorRevealType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents different [reveal](#TextEditor.revealRange) strategies in a text editor.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorRevealType"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextEditorRevealType.TextEditorRevealType_Impl_" params="" file="src/vscode/TextEditorRevealType.hx" private="1" module="vscode.TextEditorRevealType" extern="1">
	<Default public="1" set="null" static="1">
		<x path="vscode.TextEditorRevealType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The range will be revealed with as little scrolling as possible.</haxe_doc>
	</Default>
	<InCenter public="1" set="null" static="1">
		<x path="vscode.TextEditorRevealType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The range will always be revealed in the center of the viewport.</haxe_doc>
	</InCenter>
	<InCenterIfOutsideViewport public="1" set="null" static="1">
		<x path="vscode.TextEditorRevealType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* If the range is outside the viewport, it will be revealed in the center of the viewport.
	 * Otherwise, it will be revealed with as little scrolling as possible.</haxe_doc>
	</InCenterIfOutsideViewport>
	<AtTop public="1" set="null" static="1">
		<x path="vscode.TextEditorRevealType"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The range will always be revealed at the top of the viewport.</haxe_doc>
	</AtTop>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextEditorRevealType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextEditorRevealType.TextEditorRevealType_Impl_" params="" file="src/vscode/TextEditorRevealType.hx" private="1" module="vscode.TextEditorRevealType" extern="1">
		<Default public="1" set="null" static="1">
			<x path="vscode.TextEditorRevealType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The range will be revealed with as little scrolling as possible.</haxe_doc>
		</Default>
		<InCenter public="1" set="null" static="1">
			<x path="vscode.TextEditorRevealType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The range will always be revealed in the center of the viewport.</haxe_doc>
		</InCenter>
		<InCenterIfOutsideViewport public="1" set="null" static="1">
			<x path="vscode.TextEditorRevealType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* If the range is outside the viewport, it will be revealed in the center of the viewport.
	 * Otherwise, it will be revealed with as little scrolling as possible.</haxe_doc>
		</InCenterIfOutsideViewport>
		<AtTop public="1" set="null" static="1">
			<x path="vscode.TextEditorRevealType"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The range will always be revealed at the top of the viewport.</haxe_doc>
		</AtTop>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorRevealType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextEditorSelectionChangeEvent" params="" file="src/vscode/TextEditorSelectionChangeEvent.hx">
		<a>
			<textEditor set="null">
				<t path="vscode.TextEditor"/>
				<haxe_doc>* The [text editor](#TextEditor) for which the selections have changed.</haxe_doc>
			</textEditor>
			<selections set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Selection"/></x>
				<haxe_doc>* The new value for the [text editor's selections](#TextEditor.selections).</haxe_doc>
			</selections>
			<kind set="null">
				<x path="Null"><x path="vscode.TextEditorSelectionChangeKind"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The [change kind](#TextEditorSelectionChangeKind) which has triggered this
	 * event. Can be `undefined`.</haxe_doc>
			</kind>
		</a>
		<haxe_doc>* Represents an event describing the change in a [text editor's selections](#TextEditor.selections).</haxe_doc>
	</typedef>
	<abstract path="vscode.TextEditorSelectionChangeKind" params="" file="src/vscode/TextEditorSelectionChangeKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents sources that can cause [selection change events](#window.onDidChangeTextEditorSelection).</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorSelectionChangeKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextEditorSelectionChangeKind.TextEditorSelectionChangeKind_Impl_" params="" file="src/vscode/TextEditorSelectionChangeKind.hx" private="1" module="vscode.TextEditorSelectionChangeKind" extern="1">
	<Keyboard public="1" set="null" static="1">
		<x path="vscode.TextEditorSelectionChangeKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Selection changed due to typing in the editor.</haxe_doc>
	</Keyboard>
	<Mouse public="1" set="null" static="1">
		<x path="vscode.TextEditorSelectionChangeKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Selection change due to clicking in the editor.</haxe_doc>
	</Mouse>
	<Command public="1" set="null" static="1">
		<x path="vscode.TextEditorSelectionChangeKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Selection changed because a command ran.</haxe_doc>
	</Command>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextEditorSelectionChangeKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextEditorSelectionChangeKind.TextEditorSelectionChangeKind_Impl_" params="" file="src/vscode/TextEditorSelectionChangeKind.hx" private="1" module="vscode.TextEditorSelectionChangeKind" extern="1">
		<Keyboard public="1" set="null" static="1">
			<x path="vscode.TextEditorSelectionChangeKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Selection changed due to typing in the editor.</haxe_doc>
		</Keyboard>
		<Mouse public="1" set="null" static="1">
			<x path="vscode.TextEditorSelectionChangeKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Selection change due to clicking in the editor.</haxe_doc>
		</Mouse>
		<Command public="1" set="null" static="1">
			<x path="vscode.TextEditorSelectionChangeKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Selection changed because a command ran.</haxe_doc>
		</Command>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorSelectionChangeKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextEditorViewColumnChangeEvent" params="" file="src/vscode/TextEditorViewColumnChangeEvent.hx">
		<a>
			<viewColumn set="null">
				<x path="vscode.ViewColumn"/>
				<haxe_doc>* The new value for the [text editor's view column](#TextEditor.viewColumn).</haxe_doc>
			</viewColumn>
			<textEditor set="null">
				<t path="vscode.TextEditor"/>
				<haxe_doc>* The [text editor](#TextEditor) for which the view column has changed.</haxe_doc>
			</textEditor>
		</a>
		<haxe_doc>* Represents an event describing the change of a [text editor's view column](#TextEditor.viewColumn).</haxe_doc>
	</typedef>
	<typedef path="vscode.TextEditorVisibleRangesChangeEvent" params="" file="src/vscode/TextEditorVisibleRangesChangeEvent.hx">
		<a>
			<visibleRanges set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Range"/></x>
				<haxe_doc>* The new value for the [text editor's visible ranges](#TextEditor.visibleRanges).</haxe_doc>
			</visibleRanges>
			<textEditor set="null">
				<t path="vscode.TextEditor"/>
				<haxe_doc>* The [text editor](#TextEditor) for which the visible ranges have changed.</haxe_doc>
			</textEditor>
		</a>
		<haxe_doc>* Represents an event describing the change in a [text editor's visible ranges](#TextEditor.visibleRanges).</haxe_doc>
	</typedef>
	<typedef path="vscode.TextLine" params="" file="src/vscode/TextLine.hx">
		<a>
			<text set="null">
				<c path="String"/>
				<haxe_doc>* The text of this line without the line separator characters.</haxe_doc>
			</text>
			<rangeIncludingLineBreak set="null">
				<c path="vscode.Range"/>
				<haxe_doc>* The range this line covers with the line separator characters.</haxe_doc>
			</rangeIncludingLineBreak>
			<range set="null">
				<c path="vscode.Range"/>
				<haxe_doc>* The range this line covers without the line separator characters.</haxe_doc>
			</range>
			<lineNumber set="null">
				<x path="Int"/>
				<haxe_doc>* The zero-based line number.</haxe_doc>
			</lineNumber>
			<isEmptyOrWhitespace set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether this line is whitespace only, shorthand
	 * for [TextLine.firstNonWhitespaceCharacterIndex](#TextLine.firstNonWhitespaceCharacterIndex) === [TextLine.text.length](#TextLine.text).</haxe_doc>
			</isEmptyOrWhitespace>
			<firstNonWhitespaceCharacterIndex set="null">
				<x path="Int"/>
				<haxe_doc>* The offset of the first character which is not a whitespace character as defined
	 * by `/\s/`. **Note** that if a line is all whitespace the length of the line is returned.</haxe_doc>
			</firstNonWhitespaceCharacterIndex>
		</a>
		<haxe_doc>* Represents a line of text, such as a line of source code.
 *
 * TextLine objects are __immutable__. When a [document](#TextDocument) changes,
 * previously retrieved lines will not represent the latest state.</haxe_doc>
	</typedef>
	<typedef path="vscode.ThemableDecorationAttachmentRenderOptions" params="" file="src/vscode/ThemableDecorationAttachmentRenderOptions.hx"><a>
	<width>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
	</width>
	<textDecoration>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
	</textDecoration>
	<margin>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
	</margin>
	<height>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
	</height>
	<fontWeight>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
	</fontWeight>
	<fontStyle>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
	</fontStyle>
	<contentText>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both.</haxe_doc>
	</contentText>
	<contentIconPath>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon
	 * or a text can be shown, but not both.</haxe_doc>
	</contentIconPath>
	<color>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
	</color>
	<borderColor>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
	</borderColor>
	<border>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
	</border>
	<backgroundColor>
		<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
	</backgroundColor>
</a></typedef>
	<typedef path="vscode.ThemableDecorationInstanceRenderOptions" params="" file="src/vscode/ThemableDecorationInstanceRenderOptions.hx"><a>
	<before>
		<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Defines the rendering options of the attachment that is inserted before the decorated text.</haxe_doc>
	</before>
	<after>
		<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Defines the rendering options of the attachment that is inserted after the decorated text.</haxe_doc>
	</after>
</a></typedef>
	<typedef path="vscode.ThemableDecorationRenderOptions" params="" file="src/vscode/ThemableDecorationRenderOptions.hx">
		<a>
			<textDecoration>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</textDecoration>
			<overviewRulerColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations.</haxe_doc>
			</overviewRulerColor>
			<outlineWidth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineWidth>
			<outlineStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineStyle>
			<outlineColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineColor>
			<outline>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</outline>
			<opacity>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</opacity>
			<letterSpacing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</letterSpacing>
			<gutterIconSize>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Specifies the size of the gutter icon.
	 * Available values are 'auto', 'contain', 'cover' and any percentage value.
	 * For further information: https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx</haxe_doc>
			</gutterIconSize>
			<gutterIconPath>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An **absolute path** or an URI to an image to be rendered in the gutter.</haxe_doc>
			</gutterIconPath>
			<fontWeight>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</fontWeight>
			<fontStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</fontStyle>
			<cursor>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</cursor>
			<color>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</color>
			<borderWidth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderWidth>
			<borderStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderStyle>
			<borderSpacing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderSpacing>
			<borderRadius>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderRadius>
			<borderColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderColor>
			<border>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</border>
			<before>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted before the decorated text.</haxe_doc>
			</before>
			<backgroundColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations.
	 * Alternatively a color from the color registry can be [referenced](#ThemeColor).</haxe_doc>
			</backgroundColor>
			<after>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted after the decorated text.</haxe_doc>
			</after>
		</a>
		<haxe_doc>* Represents theme specific rendering styles for a [text editor decoration](#TextEditorDecorationType).</haxe_doc>
	</typedef>
	<class path="vscode.ThemeColor" params="" file="src/vscode/ThemeColor.hx" extern="1">
		<new public="1" set="method">
			<f a="id">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a reference to a theme color.
	 * @param id of the color. The available colors are listed in https://code.visualstudio.com/docs/getstarted/theme-color-reference.</haxe_doc>
		</new>
		<haxe_doc>* A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference.
 * Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ThemeColor"</e>
</m></meta>
	</class>
	<class path="vscode.ThemeIcon" params="" file="src/vscode/ThemeIcon.hx" extern="1">
		<File public="1" set="null" static="1">
			<c path="vscode.ThemeIcon"/>
			<haxe_doc>* Reference to an icon representing a file. The icon is taken from the current file icon theme or a placeholder icon.</haxe_doc>
		</File>
		<Folder public="1" set="null" static="1">
			<c path="vscode.ThemeIcon"/>
			<haxe_doc>* Reference to an icon representing a folder. The icon is taken from the current file icon theme or a placeholder icon.</haxe_doc>
		</Folder>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The id of the icon. The available icons are listed in https://code.visualstudio.com/api/references/icons-in-labels#icon-listing.</haxe_doc>
		</id>
		<color public="1" set="null">
			<x path="Null"><c path="vscode.ThemeColor"/></x>
			<haxe_doc>* The optional ThemeColor of the icon. The color is currently only used in [TreeItem](#TreeItem).</haxe_doc>
		</color>
		<new public="1" set="method">
			<f a="id:?color">
				<c path="String"/>
				<c path="vscode.ThemeColor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a reference to a theme icon.
	 * @param id id id of the icon. The available icons are listed in https://code.visualstudio.com/api/references/icons-in-labels#icon-listing.
	 * @param color optional `ThemeColor` for the icon. The color is currently only used in [TreeItem](#TreeItem).</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A reference to a named icon. Currently, [File](#ThemeIcon.File), [Folder](#ThemeIcon.Folder),
 * and [ThemeIcon ids](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing) are supported.
 * Using a theme icon is preferred over a custom icon as it gives product theme authors the possibility to change the icons.
 *
 * *Note* that theme icons can also be rendered inside labels and descriptions. Places that support theme icons spell this out
 * and they use the `$(<name>)`-syntax, for instance `quickPick.label = "Hello World $(globe)"`.]]></haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ThemeIcon"</e>
</m></meta>
	</class>
	<typedef path="vscode.TreeDataProvider" params="T" file="src/vscode/TreeDataProvider.hx">
		<a>
			<resolveTreeItem set="null">
				<x path="Null"><f a="item:element:token">
	<c path="vscode.TreeItem"/>
	<c path="vscode.TreeDataProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.TreeItem"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Called on hover to resolve the [TreeItem](#TreeItem.tooltip) property if it is undefined.
	 * Called on tree item click/open to resolve the [TreeItem](#TreeItem.command) property if it is undefined.
	 * Only properties that were undefined can be resolved in `resolveTreeItem`.
	 * Functionality may be expanded later to include being called to resolve other missing
	 * properties on selection and/or on open.
	 *
	 * Will only ever be called once per TreeItem.
	 *
	 * onDidChangeTreeData should not be triggered from within resolveTreeItem.
	 *
	 * *Note* that this function is called when tree items are already showing in the UI.
	 * Because of that, no property that changes the presentation (label, description, etc.)
	 * can be changed.
	 *
	 * @param element The object associated with the TreeItem.
	 * @param token A cancellation token.
	 * @param item Undefined properties of `item` should be set then `item` should be returned.
	 * @return The resolved tree item or a thenable that resolves to such. It is OK to return the given
	 * `item`. When no result is returned, the given `item` will be used.</haxe_doc>
			</resolveTreeItem>
			<onDidChangeTreeData>
				<x path="Null"><t path="vscode.Event"><x path="Null"><c path="vscode.TreeDataProvider.T"/></x></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that an element or root has changed.
	 * This will trigger the view to update the changed element/root and its children recursively (if shown).
	 * To signal that root has changed, do not pass any argument or pass `undefined` or `null`.</haxe_doc>
			</onDidChangeTreeData>
			<getTreeItem set="method">
				<f a="element">
					<c path="vscode.TreeDataProvider.T"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.TreeItem"/>
						<x path="js.lib.Thenable"><c path="vscode.TreeItem"/></x>
					</x>
				</f>
				<haxe_doc>* Get [TreeItem](#TreeItem) representation of the `element`
	 *
	 * @param element The element for which [TreeItem](#TreeItem) representation is asked for.
	 * @return [TreeItem](#TreeItem) representation of the element</haxe_doc>
			</getTreeItem>
			<getParent set="null">
				<x path="Null"><f a="element">
	<c path="vscode.TreeDataProvider.T"/>
	<t path="vscode.ProviderResult"><c path="vscode.TreeDataProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional method to return the parent of `element`.
	 * Return `null` or `undefined` if `element` is a child of root.
	 *
	 * **NOTE:** This method should be implemented in order to access [reveal](#TreeView.reveal) API.
	 *
	 * @param element The element for which the parent has to be returned.
	 * @return Parent of `element`.</haxe_doc>
			</getParent>
			<getChildren set="method">
				<f a="?element">
					<c path="vscode.TreeDataProvider.T"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TreeDataProvider.T"/></c></t>
				</f>
				<haxe_doc>* Get the children of `element` or root if no element is passed.
	 *
	 * @param element The element from which the provider gets children. Can be `undefined`.
	 * @return Children of `element` or root if no element is passed.</haxe_doc>
			</getChildren>
		</a>
		<haxe_doc>* A data provider that provides tree data</haxe_doc>
	</typedef>
	<class path="vscode.TreeItem" params="" file="src/vscode/TreeItem.hx" extern="1">
		<label public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.TreeItemLabel"/>
</x></x>
			<haxe_doc>* A human-readable string describing this item. When `falsy`, it is derived from [resourceUri](#TreeItem.resourceUri).</haxe_doc>
		</label>
		<id public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* Optional id for the tree item that has to be unique across tree. The id is used to preserve the selection and expansion state of the tree item.
	 *
	 * If not provided, an id is generated using the tree item's label. **Note** that when labels change, ids will change and that selection and expansion state cannot be kept stable anymore.</haxe_doc>
		</id>
		<iconPath public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.Uri"/>
		<x path="haxe.extern.EitherType">
			<a>
				<light><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></light>
				<dark><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></dark>
			</a>
			<c path="vscode.ThemeIcon"/>
		</x>
	</x>
</x></x>
			<haxe_doc>* The icon path or [ThemeIcon](#ThemeIcon) for the tree item.
	 * When `falsy`, [Folder Theme Icon](#ThemeIcon.Folder) is assigned, if item is collapsible otherwise [File Theme Icon](#ThemeIcon.File).
	 * When a file or folder [ThemeIcon](#ThemeIcon) is specified, icon is derived from the current file icon theme for the specified theme icon using [resourceUri](#TreeItem.resourceUri) (if provided).</haxe_doc>
		</iconPath>
		<description public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="Bool"/>
</x></x>
			<haxe_doc>* A human-readable string which is rendered less prominent.
	 * When `true`, it is derived from [resourceUri](#TreeItem.resourceUri) and when `falsy`, it is not shown.</haxe_doc>
		</description>
		<resourceUri public="1">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* The [uri](#Uri) of the resource representing this item.
	 *
	 * Will be used to derive the [label](#TreeItem.label), when it is not provided.
	 * Will be used to derive the icon from current file icon theme, when [iconPath](#TreeItem.iconPath) has [ThemeIcon](#ThemeIcon) value.</haxe_doc>
		</resourceUri>
		<tooltip public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* The tooltip text when you hover over this item.</haxe_doc>
		</tooltip>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* The [command](#Command) that should be executed when the tree item is selected.
	 * 
	 * Please use `vscode.open` or `vscode.diff` as command IDs when the tree item is opening
	 * something in the editor. Using these commands ensures that the resulting editor will
	 * appear consistent with how other built-in trees open editors.</haxe_doc>
		</command>
		<collapsibleState public="1">
			<x path="Null"><x path="vscode.TreeItemCollapsibleState"/></x>
			<haxe_doc>* [TreeItemCollapsibleState](#TreeItemCollapsibleState) of the tree item.</haxe_doc>
		</collapsibleState>
		<contextValue public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* Context value of the tree item. This can be used to contribute item specific actions in the tree.
	 * For example, a tree item is given a context value as `folder`. When contributing actions to `view/item/context`
	 * using `menus` extension point, you can specify context value for key `viewItem` in `when` expression like `viewItem == folder`.
	 * ```
	 *	"contributes": {
	 *		"menus": {
	 *			"view/item/context": [
	 *				{
	 *					"command": "extension.deleteFolder",
	 *					"when": "viewItem == folder"
	 *				}
	 *			]
	 *		}
	 *	}
	 * ```
	 * This will show action `extension.deleteFolder` only for items with `contextValue` is `folder`.</haxe_doc>
		</contextValue>
		<accessibilityInformation public="1">
			<x path="Null"><t path="vscode.AccessibilityInformation"/></x>
			<haxe_doc>* Accessibility information used when screen reader interacts with this tree item.
	 * Generally, a TreeItem has no need to set the `role` of the accessibilityInformation;
	 * however, there are cases where a TreeItem is not displayed in a tree-like way where setting the `role` may make sense.</haxe_doc>
		</accessibilityInformation>
		<new public="1" set="method">
			<f a="label:?collapsibleState">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="vscode.TreeItemLabel"/>
				</x>
				<x path="vscode.TreeItemCollapsibleState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param label A human-readable string describing this item
	 * @param resourceUri The [uri](#Uri) of the resource representing this item.
	 * @param collapsibleState [TreeItemCollapsibleState](#TreeItemCollapsibleState) of the tree item. Default is [TreeItemCollapsibleState.None](#TreeItemCollapsibleState.None)</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="resourceUri:?collapsibleState">
		<c path="vscode.Uri"/>
		<x path="vscode.TreeItemCollapsibleState"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* @param label A human-readable string describing this item
	 * @param resourceUri The [uri](#Uri) of the resource representing this item.
	 * @param collapsibleState [TreeItemCollapsibleState](#TreeItemCollapsibleState) of the tree item. Default is [TreeItemCollapsibleState.None](#TreeItemCollapsibleState.None)</haxe_doc>
</new></overloads>
		</new>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TreeItem"</e>
</m></meta>
	</class>
	<abstract path="vscode.TreeItemCollapsibleState" params="" file="src/vscode/TreeItemCollapsibleState.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Collapsible state of the tree item</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TreeItemCollapsibleState"</e>
			</m>
		</meta>
		<impl><class path="vscode._TreeItemCollapsibleState.TreeItemCollapsibleState_Impl_" params="" file="src/vscode/TreeItemCollapsibleState.hx" private="1" module="vscode.TreeItemCollapsibleState" extern="1">
	<None public="1" set="null" static="1">
		<x path="vscode.TreeItemCollapsibleState"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Determines an item can be neither collapsed nor expanded. Implies it has no children.</haxe_doc>
	</None>
	<Collapsed public="1" set="null" static="1">
		<x path="vscode.TreeItemCollapsibleState"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Determines an item is collapsed</haxe_doc>
	</Collapsed>
	<Expanded public="1" set="null" static="1">
		<x path="vscode.TreeItemCollapsibleState"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Determines an item is expanded</haxe_doc>
	</Expanded>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TreeItemCollapsibleState"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TreeItemCollapsibleState.TreeItemCollapsibleState_Impl_" params="" file="src/vscode/TreeItemCollapsibleState.hx" private="1" module="vscode.TreeItemCollapsibleState" extern="1">
		<None public="1" set="null" static="1">
			<x path="vscode.TreeItemCollapsibleState"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Determines an item can be neither collapsed nor expanded. Implies it has no children.</haxe_doc>
		</None>
		<Collapsed public="1" set="null" static="1">
			<x path="vscode.TreeItemCollapsibleState"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Determines an item is collapsed</haxe_doc>
		</Collapsed>
		<Expanded public="1" set="null" static="1">
			<x path="vscode.TreeItemCollapsibleState"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Determines an item is expanded</haxe_doc>
		</Expanded>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TreeItemCollapsibleState"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TreeItemLabel" params="" file="src/vscode/TreeItemLabel.hx">
		<a>
			<label>
				<c path="String"/>
				<haxe_doc>* A human-readable string describing the [Tree item](#TreeItem).</haxe_doc>
			</label>
			<highlights>
				<x path="Null"><c path="Array"><c path="Array"><x path="Int"/></c></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Ranges in the label to highlight. A range is defined as a tuple of two number where the
	 * first is the inclusive start index and the second the exclusive end index</haxe_doc>
			</highlights>
		</a>
		<haxe_doc>* Label describing the [Tree item](#TreeItem)</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeView" params="T" file="src/vscode/TreeView.hx">
		<a>
			<visible set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if the [tree view](#TreeView) is visible otherwise `false`.</haxe_doc>
			</visible>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The tree view title is initially taken from the extension package.json
	 * Changes to the title property will be properly reflected in the UI in the title of the view.</haxe_doc>
			</title>
			<selection set="null">
				<c path="Array"><c path="vscode.TreeView.T"/></c>
				<haxe_doc>* Currently selected elements.</haxe_doc>
			</selection>
			<reveal set="method">
				<f a="element:?options">
					<c path="vscode.TreeView.T"/>
					<a>
						<select>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</select>
						<focus>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</focus>
						<exapnd>
							<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<x path="Int"/>
</x></x>
							<meta><m n=":optional"/></meta>
						</exapnd>
					</a>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Reveals the given element in the tree view.
	 * If the tree view is not visible then the tree view is shown and element is revealed.
	 *
	 * By default revealed element is selected.
	 * In order to not to select, set the option `select` to `false`.
	 * In order to focus, set the option `focus` to `true`.
	 * In order to expand the revealed element, set the option `expand` to `true`. To expand recursively set `expand` to the number of levels to expand.
	 * **NOTE:** You can expand only to 3 levels maximum.
	 *
	 * **NOTE:** The [TreeDataProvider](#TreeDataProvider) that the `TreeView` [is registered with](#window.createTreeView) with must implement [getParent](#TreeDataProvider.getParent) method to access this API.</haxe_doc>
			</reveal>
			<onDidExpandElement set="null">
				<t path="vscode.Event"><t path="vscode.TreeViewExpansionEvent"><c path="vscode.TreeView.T"/></t></t>
				<haxe_doc>* Event that is fired when an element is expanded</haxe_doc>
			</onDidExpandElement>
			<onDidCollapseElement set="null">
				<t path="vscode.Event"><t path="vscode.TreeViewExpansionEvent"><c path="vscode.TreeView.T"/></t></t>
				<haxe_doc>* Event that is fired when an element is collapsed</haxe_doc>
			</onDidCollapseElement>
			<onDidChangeVisibility set="null">
				<t path="vscode.Event"><t path="vscode.TreeViewVisibilityChangeEvent"/></t>
				<haxe_doc>* Event that is fired when [visibility](#TreeView.visible) has changed</haxe_doc>
			</onDidChangeVisibility>
			<onDidChangeSelection set="null">
				<t path="vscode.Event"><t path="vscode.TreeViewSelectionChangeEvent"><c path="vscode.TreeView.T"/></t></t>
				<haxe_doc>* Event that is fired when the [selection](#TreeView.selection) has changed</haxe_doc>
			</onDidChangeSelection>
			<message>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional human-readable message that will be rendered in the view.
	 * Setting the message to null, undefined, or empty string will remove the message from the view.</haxe_doc>
			</message>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this object.</haxe_doc>
			</dispose>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional human-readable description which is rendered less prominently in the title of the view.
	 * Setting the title description to null, undefined, or empty string will remove the description from the view.</haxe_doc>
			</description>
		</a>
		<haxe_doc>* Represents a Tree view</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeViewExpansionEvent" params="T" file="src/vscode/TreeViewExpansionEvent.hx">
		<a><element set="null">
	<c path="vscode.TreeViewExpansionEvent.T"/>
	<haxe_doc>* Element that is expanded or collapsed.</haxe_doc>
</element></a>
		<haxe_doc>* The event that is fired when an element in the [TreeView](#TreeView) is expanded or collapsed</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeViewOptions" params="T" file="src/vscode/TreeViewOptions.hx">
		<a>
			<treeDataProvider>
				<t path="vscode.TreeDataProvider"><c path="vscode.TreeViewOptions.T"/></t>
				<haxe_doc>* A data provider that provides tree data.</haxe_doc>
			</treeDataProvider>
			<showCollapseAll>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether to show collapse all action or not.</haxe_doc>
			</showCollapseAll>
			<canSelectMany>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the tree supports multi-select. When the tree supports multi-select and a command is executed from the tree,
	 * the first argument to the command is the tree item that the command was executed on and the second argument is an
	 * array containing all selected tree items.</haxe_doc>
			</canSelectMany>
		</a>
		<haxe_doc>* Options for creating a [TreeView](#TreeView)</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeViewSelectionChangeEvent" params="T" file="src/vscode/TreeViewSelectionChangeEvent.hx">
		<a><selection set="null">
	<c path="Array"><c path="vscode.TreeViewSelectionChangeEvent.T"/></c>
	<haxe_doc>* Selected elements.</haxe_doc>
</selection></a>
		<haxe_doc>* The event that is fired when there is a change in [tree view's selection](#TreeView.selection)</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeViewVisibilityChangeEvent" params="" file="src/vscode/TreeViewVisibilityChangeEvent.hx">
		<a><visible set="null">
	<x path="Bool"/>
	<haxe_doc>* `true` if the [tree view](#TreeView) is visible otherwise `false`.</haxe_doc>
</visible></a>
		<haxe_doc>* The event that is fired when there is a change in [tree view's visibility](#TreeView.visible)</haxe_doc>
	</typedef>
	<typedef path="vscode.TypeDefinitionProvider" params="" file="src/vscode/TypeDefinitionProvider.hx">
		<a><provideTypeDefinition set="method">
	<f a="document:position:token">
		<t path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<t path="vscode.Definition"/>
	<c path="Array"><t path="vscode.DefinitionLink"/></c>
</x></t>
	</f>
	<haxe_doc>* Provide the type definition of the symbol at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @return A definition or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideTypeDefinition></a>
		<haxe_doc>* The type definition provider defines the contract between extensions and
 * the go to type definition feature.</haxe_doc>
	</typedef>
	<abstract path="vscode.UIKind" params="" file="src/vscode/UIKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Possible kinds of UI that can use extensions.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"UIKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._UIKind.UIKind_Impl_" params="" file="src/vscode/UIKind.hx" private="1" module="vscode.UIKind" extern="1">
	<Desktop public="1" set="null" static="1">
		<x path="vscode.UIKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Extensions are accessed from a desktop application.</haxe_doc>
	</Desktop>
	<Web public="1" set="null" static="1">
		<x path="vscode.UIKind"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* Extensions are accessed from a web browser.</haxe_doc>
	</Web>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"UIKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._UIKind.UIKind_Impl_" params="" file="src/vscode/UIKind.hx" private="1" module="vscode.UIKind" extern="1">
		<Desktop public="1" set="null" static="1">
			<x path="vscode.UIKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Extensions are accessed from a desktop application.</haxe_doc>
		</Desktop>
		<Web public="1" set="null" static="1">
			<x path="vscode.UIKind"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* Extensions are accessed from a web browser.</haxe_doc>
		</Web>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"UIKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.Uri" params="" file="src/vscode/Uri.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="value:?strict">
				<c path="String"/>
				<x path="Bool"/>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Create an URI from a string, e.g. `http://www.msft.com/some/path`,
	 * `file:///usr/home`, or `scheme:with/path`.
	 *
	 * *Note* that for a while uris without a `scheme` were accepted. That is not correct
	 * as all uris should have a scheme. To avoid breakage of existing code the optional
	 * `strict`-argument has been added. We *strongly* advise to use it, e.g. `Uri.parse('my:uri', true)`
	 *
	 * @see [Uri.toString](#Uri.toString)
	 * @param value The string value of an Uri.
	 * @param strict Throw an error when `value` is empty or when no `scheme` can be parsed.
	 * @return A new Uri instance.</haxe_doc>
		</parse>
		<file public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Create an URI from a file system path. The [scheme](#Uri.scheme)
	 * will be `file`.
	 *
	 * The *difference* between `Uri#parse` and `Uri#file` is that the latter treats the argument
	 * as path, not as stringified-uri. E.g. `Uri.file(path)` is *not* the same as
	 * `Uri.parse('file://' + path)` because the path might contain characters that are
	 * interpreted (# and ?). See the following sample:
	 * ```ts
	 * const good = URI.file('/coding/c#/project1');
	 * good.scheme === 'file';
	 * good.path === '/coding/c#/project1';
	 * good.fragment === '';
	 * const bad = URI.parse('file://' + '/coding/c#/project1');
	 * bad.scheme === 'file';
	 * bad.path === '/coding/c'; // path is now broken
	 * bad.fragment === '/project1';
	 * ```
	 *
	 * @param path A file system or UNC path.
	 * @return A new Uri instance.</haxe_doc>
		</file>
		<joinPath public="1" set="method" static="1">
			<f a="base:pathSegments">
				<c path="vscode.Uri"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Create a new uri which path is the result of joining
	 * the path of the base uri with the provided path segments.
	 *
	 * - Note 1: `joinPath` only affects the path component
	 * and all other components (scheme, authority, query, and fragment) are
	 * left as they are.
	 * - Note 2: The base uri must have a path; an error is thrown otherwise.
	 *
	 * The path segments are normalized in the following ways:
	 * - sequences of path separators (`/` or `\`) are replaced with a single separator
	 * - for `file`-uris on windows, the backslash-character (`\`) is considered a path-separator
	 * - the `..`-segment denotes the parent segment, the `.` denotes the current segment
	 * - paths have a root which always remains, for instance on windows drive-letters are roots
	 * so that is true: `joinPath(Uri.file('file:///c:/root'), '../../other').fsPath === 'c:/other'`
	 *
	 * @param base An uri. Must have a path.
	 * @param pathSegments One more more path fragments
	 * @returns A new uri which path is joined with the given fragments</haxe_doc>
		</joinPath>
		<scheme public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Scheme is the `http` part of `http://www.msft.com/some/path?query#fragment`.
	 * The part before the first colon.</haxe_doc>
		</scheme>
		<authority public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Authority is the `www.msft.com` part of `http://www.msft.com/some/path?query#fragment`.
	 * The part between the first double slashes and the next slash.</haxe_doc>
		</authority>
		<path public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Path is the `/some/path` part of `http://www.msft.com/some/path?query#fragment`.</haxe_doc>
		</path>
		<query public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Query is the `query` part of `http://www.msft.com/some/path?query#fragment`.</haxe_doc>
		</query>
		<fragment public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Fragment is the `fragment` part of `http://www.msft.com/some/path?query#fragment`.</haxe_doc>
		</fragment>
		<fsPath public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The string representing the corresponding file system path of this Uri.
	 *
	 * Will handle UNC paths and normalize windows drive letters to lower-case. Also
	 * uses the platform specific path separator.
	 *
	 * * Will *not* validate the path for invalid characters and semantics.
	 * * Will *not* look at the scheme of this Uri.
	 * * The resulting string shall *not* be used for display purposes but
	 * for disk operations, like `readFile` et al.
	 *
	 * The *difference* to the [`path`](#Uri.path)-property is the use of the platform specific
	 * path separator and the handling of UNC paths. The sample below outlines the difference:
	 * ```ts
	 * const u = URI.parse('file://server/c$/folder/file.txt')
	 * u.authority === 'server'
	 * u.path === '/shares/c$/file.txt'
	 * u.fsPath === '\\server\c$\folder\file.txt'
	 * ```</haxe_doc>
		</fsPath>
		<with public="1" set="method">
			<f a="change">
				<a>
					<scheme>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</scheme>
					<query>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</query>
					<path>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</path>
					<fragment>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</fragment>
					<authority>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</authority>
				</a>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Derive a new Uri from this Uri.
	 *
	 * ```haxe
	 * var file = Uri.parse('before:some/file/path');
	 * var other = file.with({scheme: 'after'});
	 * Assert.ok(other.toString() == 'after:some/file/path');
	 * ```
	 *
	 * @param change An object that describes a change to this Uri. To unset components use `null` or
	 *  the empty string.
	 * @return A new Uri that reflects the given change. Will return `this` Uri if the change
	 *  is not changing anything.</haxe_doc>
		</with>
		<toString public="1" set="method">
			<f a="?skipEncoding">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Returns a string representation of this Uri. The representation and normalization
	 * of a URI depends on the scheme.
	 *
	 * * The resulting string can be safely used with [Uri.parse](#Uri.parse).
	 * * The resulting string shall *not* be used for display purposes.
	 *
	 * *Note* that the implementation will encode _aggressive_ which often leads to unexpected,
	 * but not incorrect, results. For instance, colons are encoded to `%3A` which might be unexpected
	 * in file-uri. Also `&` and `=` will be encoded which might be unexpected for http-uris. For stability
	 * reasons this cannot be changed anymore. If you suffer from too aggressive encoding you should use
	 * the `skipEncoding`-argument: `uri.toString(true)`.
	 *
	 * @param skipEncoding Do not percentage-encode the result, defaults to `false`. Note that
	 *	the `#` and `?` characters occurring in the path will always be encoded.
	 * @returns A string representation of this Uri.]]></haxe_doc>
		</toString>
		<toJSON public="1" set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Returns a JSON representation of this Uri.
	 *
	 * @return An object.</haxe_doc>
		</toJSON>
		<new set="method">
			<f a="scheme:authority:path:query:fragment">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Use the `file` and `parse` factory functions to create new `Uri` objects.</haxe_doc>
		</new>
		<haxe_doc>* A universal resource identifier representing either a file on disk
 * or another resource, like untitled resources.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Uri"</e>
</m></meta>
	</class>
	<typedef path="vscode.UriHandler" params="" file="src/vscode/UriHandler.hx">
		<a><handleUri set="method">
	<f a="uri">
		<c path="vscode.Uri"/>
		<t path="vscode.ProviderResult"><x path="Void"/></t>
	</f>
	<haxe_doc>* Handle the provided system-wide [uri](#Uri).
	 *
	 * @see [window.registerUriHandler](#window.registerUriHandler).</haxe_doc>
</handleUri></a>
		<haxe_doc>* A uri handler is responsible for handling system-wide [uris](#Uri).
 *
 * @see [window.registerUriHandler](#window.registerUriHandler).</haxe_doc>
	</typedef>
	<abstract path="vscode.ViewColumn" params="" file="src/vscode/ViewColumn.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Denotes a location of an editor in the window. Editors can be arranged in a grid
 * and each column represents one editor location in that grid by counting the editors
 * in order of their appearance.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ViewColumn"</e>
			</m>
		</meta>
		<impl><class path="vscode._ViewColumn.ViewColumn_Impl_" params="" file="src/vscode/ViewColumn.hx" private="1" module="vscode.ViewColumn" extern="1">
	<Active public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* A *symbolic* editor column representing the currently active column. This value
	 * can be used when opening editors, but the *resolved* [viewColumn](#TextEditor.viewColumn)-value
	 * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Active`.</haxe_doc>
	</Active>
	<Beside public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* A *symbolic* editor column representing the column to the side of the active one. This value
	 * can be used when opening editors, but the *resolved* [viewColumn](#TextEditor.viewColumn)-value
	 * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Beside`.</haxe_doc>
	</Beside>
	<One public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The first editor column.</haxe_doc>
	</One>
	<Two public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The second editor column.</haxe_doc>
	</Two>
	<Three public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The third editor column.</haxe_doc>
	</Three>
	<Four public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The fourth editor column.</haxe_doc>
	</Four>
	<Five public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The fifth editor column.</haxe_doc>
	</Five>
	<Six public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The sixth editor column.</haxe_doc>
	</Six>
	<Seven public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The seventh editor column.</haxe_doc>
	</Seven>
	<Eight public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The eighth editor column.</haxe_doc>
	</Eight>
	<Nine public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
		<haxe_doc>* The ninth editor column.</haxe_doc>
	</Nine>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ViewColumn"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ViewColumn.ViewColumn_Impl_" params="" file="src/vscode/ViewColumn.hx" private="1" module="vscode.ViewColumn" extern="1">
		<Active public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* A *symbolic* editor column representing the currently active column. This value
	 * can be used when opening editors, but the *resolved* [viewColumn](#TextEditor.viewColumn)-value
	 * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Active`.</haxe_doc>
		</Active>
		<Beside public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* A *symbolic* editor column representing the column to the side of the active one. This value
	 * can be used when opening editors, but the *resolved* [viewColumn](#TextEditor.viewColumn)-value
	 * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Beside`.</haxe_doc>
		</Beside>
		<One public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The first editor column.</haxe_doc>
		</One>
		<Two public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The second editor column.</haxe_doc>
		</Two>
		<Three public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The third editor column.</haxe_doc>
		</Three>
		<Four public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The fourth editor column.</haxe_doc>
		</Four>
		<Five public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The fifth editor column.</haxe_doc>
		</Five>
		<Six public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The sixth editor column.</haxe_doc>
		</Six>
		<Seven public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The seventh editor column.</haxe_doc>
		</Seven>
		<Eight public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The eighth editor column.</haxe_doc>
		</Eight>
		<Nine public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
			<haxe_doc>* The ninth editor column.</haxe_doc>
		</Nine>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ViewColumn"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.Webview" params="" file="src/vscode/Webview.hx">
		<a>
			<postMessage set="method">
				<f a="message">
					<x path="Any"/>
					<x path="js.lib.Thenable"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Post a message to the webview content.
	 *
	 * Messages are only delivered if the webview is live (either visible or in the
	 * background with `retainContextWhenHidden`).
	 *
	 * @param message Body of the message. This must be a string or other json serializable object.</haxe_doc>
			</postMessage>
			<options>
				<t path="vscode.WebviewOptions"/>
				<haxe_doc>* Content settings for the webview.</haxe_doc>
			</options>
			<onDidReceiveMessage set="null">
				<t path="vscode.Event"><x path="Any"/></t>
				<haxe_doc>* Fired when the webview content posts a message.
	 *
	 * Webview content can post strings or json serializable objects back to a VS Code extension. They cannot
	 * post `Blob`, `File`, `ImageData` and other DOM specific objects since the extension that receives the
	 * message does not run in a browser environment.</haxe_doc>
			</onDidReceiveMessage>
			<html>
				<c path="String"/>
				<haxe_doc><![CDATA[* HTML contents of the webview.
	 *
	 * This should be a complete, valid html document. Changing this property causes the webview to be reloaded.
	 *
	 * Webviews are sandboxed from normal extension process, so all communication with the webview must use
	 * message passing. To send a message from the extension to the webview, use [`postMessage`](#Webview.postMessage).
	 * To send message from the webview back to an extension, use the `acquireVsCodeApi` function inside the webview
	 * to get a handle to VS Code's api and then call `.postMessage()`:
	 *
	 * ```html
	 * <script>
	 *     const vscode = acquireVsCodeApi(); // acquireVsCodeApi can only be invoked once
	 *     vscode.postMessage({ message: 'hello!' });
	 * </script>
	 * ```
	 *
	 * To load a resources from the workspace inside a webview, use the `[asWebviewUri](#Webview.asWebviewUri)` method
	 * and ensure the resource's directory is listed in [`WebviewOptions.localResourceRoots`](#WebviewOptions.localResourceRoots).
	 *
	 * Keep in mind that even though webviews are sandboxed, they still allow running scripts and loading arbitrary content,
	 * so extensions must follow all standard web security best practices when working with webviews. This includes
	 * properly sanitizing all untrusted input (including content from the workspace) and
	 * setting a [content security policy](https://aka.ms/vscode-api-webview-csp).]]></haxe_doc>
			</html>
			<cspSource set="null">
				<c path="String"/>
				<haxe_doc>* Content security policy source for webview resources.
	 *
	 * This is the origin that should be used in a content security policy rule:
	 *
	 * ```
	 * img-src https: ${webview.cspSource} ...;
	 * ```</haxe_doc>
			</cspSource>
			<asWebviewUri set="method">
				<f a="localResource">
					<c path="vscode.Uri"/>
					<c path="vscode.Uri"/>
				</f>
				<haxe_doc><![CDATA[* Convert a uri for the local file system to one that can be used inside webviews.
	 *
	 * Webviews cannot directly load resources from the workspace or local file system using `file:` uris. The
	 * `asWebviewUri` function takes a local `file:` uri and converts it into a uri that can be used inside of
	 * a webview to load the same resource:
	 *
	 * ```ts
	 * webview.html = `<img src="${webview.asWebviewUri(vscode.Uri.file('/Users/codey/workspace/cat.gif'))}">`
	 * ```]]></haxe_doc>
			</asWebviewUri>
		</a>
		<haxe_doc>* Displays html content, similarly to an iframe.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewOptions" params="" file="src/vscode/WebviewOptions.hx">
		<a>
			<portMapping set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.WebviewPortMapping"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Mappings of localhost ports used inside the webview.
	 *
	 * Port mapping allow webviews to transparently define how localhost ports are resolved. This can be used
	 * to allow using a static localhost port inside the webview that is resolved to random port that a service is
	 * running on.
	 *
	 * If a webview accesses localhost content, we recommend that you specify port mappings even if
	 * the `webviewPort` and `extensionHostPort` ports are the same.
	 *
	 * *Note* that port mappings only work for `http` or `https` urls. Websocket urls (e.g. `ws://localhost:3000`)
	 * cannot be mapped to another port.</haxe_doc>
			</portMapping>
			<localResourceRoots set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Root paths from which the webview can load local (filesystem) resources using the `vscode-resource:` scheme.
	 *
	 * Default to the root folders of the current workspace plus the extension's install directory.
	 *
	 * Pass in an empty array to disallow access to any local resources.</haxe_doc>
			</localResourceRoots>
			<enableScripts set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether scripts are enabled in the webview content or not.
	 *
	 * Defaults to false (scripts-disabled).</haxe_doc>
			</enableScripts>
			<enableCommandUris set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether command uris are enabled in webview content or not.
	 *
	 * Defaults to false.</haxe_doc>
			</enableCommandUris>
		</a>
		<haxe_doc>* Content settings for a webview.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPanel" params="" file="src/vscode/WebviewPanel.hx">
		<a>
			<webview set="null">
				<t path="vscode.Webview"/>
				<haxe_doc>* [`Webview`](#Webview) belonging to the panel.</haxe_doc>
			</webview>
			<visible set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the panel is visible.</haxe_doc>
			</visible>
			<viewType set="null">
				<c path="String"/>
				<haxe_doc>* Identifies the type of the webview panel, such as `'markdown.preview'`.</haxe_doc>
			</viewType>
			<viewColumn set="null">
				<x path="Null"><x path="vscode.ViewColumn"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Editor position of the panel. This property is only set if the webview is in
	 * one of the editor view columns.</haxe_doc>
			</viewColumn>
			<title>
				<c path="String"/>
				<haxe_doc>* Title of the panel shown in UI.</haxe_doc>
			</title>
			<reveal set="method">
				<f a="?viewColumn:?preserveFocus">
					<x path="vscode.ViewColumn"/>
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Show the webview panel in a given column.
	 *
	 * A webview panel may only show in a single column at a time. If it is already showing, this
	 * method moves it to a new column.
	 *
	 * @param viewColumn View column to show the panel in. Shows in the current `viewColumn` if undefined.
	 * @param preserveFocus When `true`, the webview will not take focus.</haxe_doc>
			</reveal>
			<options set="null">
				<t path="vscode.WebviewPanelOptions"/>
				<haxe_doc>* Content settings for the webview panel.</haxe_doc>
			</options>
			<onDidDispose set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* Fired when the panel is disposed.
	 *
	 * This may be because the user closed the panel or because `.dispose()` was
	 * called on it.
	 *
	 * Trying to use the panel after it has been disposed throws an exception.</haxe_doc>
			</onDidDispose>
			<onDidChangeViewState set="null">
				<t path="vscode.Event"><t path="vscode.WebviewPanelOnDidChangeViewStateEvent"/></t>
				<haxe_doc>* Fired when the panel's view state changes.</haxe_doc>
			</onDidChangeViewState>
			<iconPath>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.Uri"/>
	<a>
		<light><c path="vscode.Uri"/></light>
		<dark><c path="vscode.Uri"/></dark>
	</a>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Icon for the panel shown in UI.</haxe_doc>
			</iconPath>
			<dispose set="method">
				<f a=""><x path="Any"/></f>
				<haxe_doc>* Dispose of the webview panel.
	 *
	 * This closes the panel if it showing and disposes of the resources owned by the webview.
	 * Webview panels are also disposed when the user closes the webview panel. Both cases
	 * fire the `onDispose` event.</haxe_doc>
			</dispose>
			<active set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the panel is active (focused by the user).</haxe_doc>
			</active>
		</a>
		<haxe_doc>* A panel that contains a webview.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPanelOnDidChangeViewStateEvent" params="" file="src/vscode/WebviewPanelOnDidChangeViewStateEvent.hx">
		<a><webviewPanel set="null">
	<t path="vscode.WebviewPanel"/>
	<haxe_doc>* Webview panel whose view state changed.</haxe_doc>
</webviewPanel></a>
		<haxe_doc>* Event fired when a webview panel's view state changes.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPanelOptions" params="" file="src/vscode/WebviewPanelOptions.hx">
		<a>
			<retainContextWhenHidden set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if the webview panel's content (iframe) is kept around even when the panel
	 * is no longer visible.
	 *
	 * Normally the webview panel's html context is created when the panel becomes visible
	 * and destroyed when it is hidden. Extensions that have complex state
	 * or UI can set the `retainContextWhenHidden` to make VS Code keep the webview
	 * context around, even when the webview moves to a background tab. When a webview using
	 * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.
	 * When the panel becomes visible again, the context is automatically restored
	 * in the exact same state it was in originally. You cannot send messages to a
	 * hidden webview, even with `retainContextWhenHidden` enabled.
	 *
	 * `retainContextWhenHidden` has a high memory overhead and should only be used if
	 * your panel's context cannot be quickly saved and restored.</haxe_doc>
			</retainContextWhenHidden>
			<enableFindWidget set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if the find widget is enabled in the panel.
	 *
	 * Defaults to false.</haxe_doc>
			</enableFindWidget>
		</a>
		<haxe_doc>* Content settings for a webview panel.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPanelSerializer" params="T" file="src/vscode/WebviewPanelSerializer.hx">
		<a><deserializeWebviewPanel set="method">
	<f a="webviewPanel:state">
		<t path="vscode.WebviewPanel"/>
		<c path="vscode.WebviewPanelSerializer.T"/>
		<x path="js.lib.Thenable"><x path="Void"/></x>
	</f>
	<haxe_doc>* Restore a webview panel from its serialized `state`.
	 *
	 * Called when a serialized webview first becomes visible.
	 *
	 * @param webviewPanel Webview panel to restore. The serializer should take ownership of this panel. The
	 * serializer must restore the webview's `.html` and hook up all webview events.
	 * @param state Persisted state from the webview content.
	 *
	 * @return Thenable indicating that the webview has been fully restored.</haxe_doc>
</deserializeWebviewPanel></a>
		<haxe_doc>* Restore webview panels that have been persisted when vscode shuts down.
 *
 * There are two types of webview persistence:
 *
 * - Persistence within a session.
 * - Persistence across sessions (across restarts of VS Code).
 *
 * A `WebviewPanelSerializer` is only required for the second case: persisting a webview across sessions.
 *
 * Persistence within a session allows a webview to save its state when it becomes hidden
 * and restore its content from this state when it becomes visible again. It is powered entirely
 * by the webview content itself. To save off a persisted state, call `acquireVsCodeApi().setState()` with
 * any json serializable object. To restore the state again, call `getState()`
 *
 * ```js
 * // Within the webview
 * const vscode = acquireVsCodeApi();
 *
 * // Get existing state
 * const oldState = vscode.getState() || { value: 0 };
 *
 * // Update state
 * setState({ value: oldState.value + 1 })
 * ```
 *
 * A `WebviewPanelSerializer` extends this persistence across restarts of VS Code. When the editor is shutdown,
 * VS Code will save off the state from `setState` of all webviews that have a serializer. When the
 * webview first becomes visible after the restart, this state is passed to `deserializeWebviewPanel`.
 * The extension can then restore the old `WebviewPanel` from this state.
 *
 * @param T Type of the webview's state.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPortMapping" params="" file="src/vscode/WebviewPortMapping.hx">
		<a>
			<webviewPort set="null">
				<x path="Int"/>
				<haxe_doc>* Localhost port to remap inside the webview.</haxe_doc>
			</webviewPort>
			<extensionHostPort set="null">
				<x path="Int"/>
				<haxe_doc>* Destination port. The `webviewPort` is resolved to this port.</haxe_doc>
			</extensionHostPort>
		</a>
		<haxe_doc>* Defines a port mapping used for localhost inside the webview.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewView" params="" file="src/vscode/WebviewView.hx">
		<a>
			<webview set="null">
				<t path="vscode.Webview"/>
				<haxe_doc>* The underlying webview for the view.</haxe_doc>
			</webview>
			<visible set="null">
				<x path="Bool"/>
				<haxe_doc>* Tracks if the webview is currently visible.
	 *
	 * Views are visible when they are on the screen and expanded.</haxe_doc>
			</visible>
			<viewType set="null">
				<c path="String"/>
				<haxe_doc>* Identifies the type of the webview view, such as `'hexEditor.dataView'`.</haxe_doc>
			</viewType>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* View title displayed in the UI.
	 *
	 * The view title is initially taken from the extension `package.json` contribution.</haxe_doc>
			</title>
			<show set="method">
				<f a="?preserveFocus">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Reveal the view in the UI.
	 *
	 * If the view is collapsed, this will expand it.
	 *
	 * @param preserveFocus When `true` the view will not take focus.</haxe_doc>
			</show>
			<onDidDispose set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* Event fired when the view is disposed.
	 *
	 * Views are disposed when they are explicitly hidden by a user (this happens when a user
	 * right clicks in a view and unchecks the webview view).
	 *
	 * Trying to use the view after it has been disposed throws an exception.</haxe_doc>
			</onDidDispose>
			<onDidChangeVisibility set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* Event fired when the visibility of the view changes.
	 *
	 * Actions that trigger a visibility change:
	 *
	 * - The view is collapsed or expanded.
	 * - The user switches to a different view group in the sidebar or panel.
	 *
	 * Note that hiding a view using the context menu instead disposes of the view and fires `onDidDispose`.</haxe_doc>
			</onDidChangeVisibility>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Human-readable string which is rendered less prominently in the title.</haxe_doc>
			</description>
		</a>
		<haxe_doc>* A webview based view.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewViewProvider" params="" file="src/vscode/WebviewViewProvider.hx">
		<a><resolveWebviewView params="T" set="method">
	<f a="webviewView:context:token">
		<t path="vscode.WebviewView"/>
		<t path="vscode.WebviewViewResolveContext"><c path="resolveWebviewView.T"/></t>
		<t path="vscode.CancellationToken"/>
		<x path="Null"><x path="js.lib.Thenable"><x path="Void"/></x></x>
	</f>
	<haxe_doc>* Revolves a webview view.
	 *
	 * `resolveWebviewView` is called when a view first becomes visible. This may happen when the view is
	 * first loaded or when the user hides and then shows a view again.
	 *
	 * @param webviewView Webview view to restore. The provider should take ownership of this view. The
	 *    provider must set the webview's `.html` and hook up all webview events it is interested in.
	 * @param context Additional metadata about the view being resolved.
	 * @param token Cancellation token indicating that the view being provided is no longer needed.
	 *
	 * @return Optional thenable indicating that the view has been fully resolved.</haxe_doc>
</resolveWebviewView></a>
		<haxe_doc>* Provider for creating `WebviewView` elements.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewViewResolveContext" params="T" file="src/vscode/WebviewViewResolveContext.hx">
		<a><state set="null">
	<x path="Null"><c path="vscode.WebviewViewResolveContext.T"/></x>
	<haxe_doc>* Persisted state from the webview content.
	 *
	 * To save resources, VS Code normally deallocates webview documents (the iframe content) that are not visible.
	 * For example, when the user collapse a view or switches to another top level activity in the sidebar, the
	 * `WebviewView` itself is kept alive but the webview's underlying document is deallocated. It is recreated when
	 * the view becomes visible again.
	 *
	 * You can prevent this behavior by setting `retainContextWhenHidden` in the `WebviewOptions`. However this
	 * increases resource usage and should be avoided wherever possible. Instead, you can use persisted state to
	 * save off a webview's state so that it can be quickly recreated as needed.
	 *
	 * To save off a persisted state, inside the webview call `acquireVsCodeApi().setState()` with
	 * any json serializable object. To restore the state again, call `getState()`. For example:
	 *
	 * ```js
	 * // Within the webview
	 * const vscode = acquireVsCodeApi();
	 *
	 * // Get existing state
	 * const oldState = vscode.getState() || { value: 0 };
	 *
	 * // Update state
	 * setState({ value: oldState.value + 1 })
	 * ```
	 *
	 * VS Code ensures that the persisted state is saved correctly when a webview is hidden and across
	 * editor restarts.</haxe_doc>
</state></a>
		<haxe_doc>* Additional information the webview view being resolved.
 *
 * @param T Type of the webview's state.</haxe_doc>
	</typedef>
	<typedef path="vscode.WindowState" params="" file="src/vscode/WindowState.hx">
		<a><focused set="null">
	<x path="Bool"/>
	<haxe_doc>* Whether the current window is focused.</haxe_doc>
</focused></a>
		<haxe_doc>* Represents the state of a window.</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceConfiguration" params="" file="src/vscode/WorkspaceConfiguration.hx">
		<a>
			<update set="method">
				<f a="section:value:?configurationTarget:?overrideInLanguage">
					<c path="String"/>
					<x path="Any"/>
					<x path="haxe.extern.EitherType">
						<x path="vscode.ConfigurationTarget"/>
						<x path="Bool"/>
					</x>
					<x path="Bool"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Update a configuration value. The updated configuration values are persisted.
	 *
	 * A value can be changed in
	 *
	 * - [Global settings](#ConfigurationTarget.Global): Changes the value for all instances of the editor.
	 * - [Workspace settings](#ConfigurationTarget.Workspace): Changes the value for current workspace, if available.
	 * - [Workspace folder settings](#ConfigurationTarget.WorkspaceFolder): Changes the value for settings from one of the [Workspace Folders](#workspace.workspaceFolders) under which the requested resource belongs to.
	 * - Language settings: Changes the value for the requested languageId.
	 *
	 * *Note:* To remove a configuration value use `undefined`, like so: `config.update('somekey', undefined)`
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @param value The new value.
	 * @param configurationTarget The [configuration target](#ConfigurationTarget) or a boolean value.
	 *	- If `true` updates [Global settings](#ConfigurationTarget.Global).
	 *	- If `false` updates [Workspace settings](#ConfigurationTarget.Workspace).
	 *	- If `undefined` or `null` updates to [Workspace folder settings](#ConfigurationTarget.WorkspaceFolder) if configuration is resource specific,
	 * 	otherwise to [Workspace settings](#ConfigurationTarget.Workspace).
	 * @param overrideInLanguage Whether to update the value in the scope of requested languageId or not.
	 *	- If `true` updates the value under the requested languageId.
	 *	- If `undefined` updates the value under the requested languageId only if the configuration is defined for the language.
	 * @throws error while updating
	 *	- configuration which is not registered.
	 *	- window configuration to workspace folder
	 *	- configuration to workspace or workspace folder when no workspace is opened.
	 *	- configuration to workspace folder when there is no workspace folder settings.
	 *	- configuration to workspace folder when [WorkspaceConfiguration](#WorkspaceConfiguration) is not scoped to a resource.</haxe_doc>
			</update>
			<inspect params="T" set="method">
				<f a="section">
					<c path="String"/>
					<x path="Null"><a>
	<workspaceValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</workspaceValue>
	<workspaceLanguageValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</workspaceLanguageValue>
	<workspaceFolderValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</workspaceFolderValue>
	<workspaceFolderLanguageValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</workspaceFolderLanguageValue>
	<languageIds>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</languageIds>
	<key><c path="String"/></key>
	<globalValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</globalValue>
	<globalLanguageValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</globalLanguageValue>
	<defaultValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</defaultValue>
	<defaultLanguageValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</defaultLanguageValue>
</a></x>
				</f>
				<haxe_doc>* Retrieve all information about a configuration setting. A configuration value
	 * often consists of a *default* value, a global or installation-wide value,
	 * a workspace-specific value, folder-specific value
	 * and language-specific values (if [WorkspaceConfiguration](#WorkspaceConfiguration) is scoped to a language).
	 *
	 * Also provides all language ids under which the given configuration setting is defined.
	 *
	 * *Note:* The configuration name must denote a leaf in the configuration tree
	 * (`editor.fontSize` vs `editor`) otherwise no result is returned.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @return Information about a configuration setting or `undefined`.</haxe_doc>
			</inspect>
			<has set="method">
				<f a="section">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>* Check if this configuration has a certain value.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @return `true` if the section doesn't resolve to `undefined`.</haxe_doc>
			</has>
			<get params="T" set="method">
				<f a="section">
					<c path="String"/>
					<x path="Null"><c path="get.T"/></x>
				</f>
				<haxe_doc>* Return a value from this configuration.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @return The value `section` denotes or `undefined`.</haxe_doc>
				<overloads><get public="1" params="T" set="method">
	<f a="section:defaultValue">
		<c path="String"/>
		<c path="get.T"/>
		<c path="get.T"/>
	</f>
	<haxe_doc>* Return a value from this configuration.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @return The value `section` denotes or `undefined`.</haxe_doc>
</get></overloads>
			</get>
		</a>
		<haxe_doc>* Represents the configuration. It is a merged view of
 *
 * - *Default Settings*
 * - *Global (User) Settings*
 * - *Workspace settings*
 * - *Workspace Folder settings* - From one of the [Workspace Folders](#workspace.workspaceFolders) under which requested resource belongs to.
 * - *Language settings* - Settings defined under requested language.
 *
 * The *effective* value (returned by [`get`](#WorkspaceConfiguration.get)) is computed by overriding or merging the values in the following order.
 *
 * ```
 * `defaultValue` (if defined in `package.json` otherwise derived from the value's type)
 * `globalValue` (if defined)
 * `workspaceValue` (if defined)
 * `workspaceFolderValue` (if defined)
 * `defaultLanguageValue` (if defined)
 * `globalLanguageValue` (if defined)
 * `workspaceLanguageValue` (if defined)
 * `workspaceFolderLanguageValue` (if defined)
 * ```
 * **Note:** Only `object` value types are merged and all other value types are overridden.
 *
 * Example 1: Overriding
 *
 * ```ts
 * defaultValue = 'on';
 * globalValue = 'relative'
 * workspaceFolderValue = 'off'
 * value = 'off'
 * ```
 *
 * Example 2: Language Values
 *
 * ```ts
 * defaultValue = 'on';
 * globalValue = 'relative'
 * workspaceFolderValue = 'off'
 * globalLanguageValue = 'on'
 * value = 'on'
 * ```
 *
 * Example 3: Object Values
 *
 * ```ts
 * defaultValue = { "a": 1, "b": 2 };
 * globalValue = { "b": 3, "c": 4 };
 * value = { "a": 1, "b": 3, "c": 4 };
 * ```
 *
 * *Note:* Workspace and Workspace Folder configurations contains `launch` and `tasks` settings. Their basename will be
 * part of the section identifier. The following snippets shows how to retrieve all configurations
 * from `launch.json`:
 *
 * ```ts
 * // launch.json configuration
 * const config = workspace.getConfiguration('launch', vscode.workspace.workspaceFolders[0].uri);
 *
 * // retrieve values
 * const values = config.get('configurations');
 * ```
 *
 * Refer to [Settings](https://code.visualstudio.com/docs/getstarted/settings) for more information.</haxe_doc>
	</typedef>
	<class path="vscode.WorkspaceEdit" params="" file="src/vscode/WorkspaceEdit.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The number of affected resources of textual or resource changes.</haxe_doc>
		</size>
		<replace public="1" set="method">
			<f a="uri:range:newText:?metadata">
				<c path="vscode.Uri"/>
				<c path="vscode.Range"/>
				<c path="String"/>
				<t path="vscode.WorkspaceEditEntryMetadata"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Replace the given range with given text for the given resource.
	 *
	 * @param uri A resource identifier.
	 * @param range A range.
	 * @param newText A string.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</replace>
		<insert public="1" set="method">
			<f a="uri:position:newText:?metadata">
				<c path="vscode.Uri"/>
				<c path="vscode.Position"/>
				<c path="String"/>
				<t path="vscode.WorkspaceEditEntryMetadata"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Insert the given text at the given position.
	 *
	 * @param uri A resource identifier.
	 * @param position A position.
	 * @param newText A string.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</insert>
		<delete public="1" set="method">
			<f a="uri:range:?metadata">
				<c path="vscode.Uri"/>
				<c path="vscode.Range"/>
				<t path="vscode.WorkspaceEditEntryMetadata"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Delete the text at the given range.
	 *
	 * @param uri A resource identifier.
	 * @param range A range.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</delete>
		<has public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if a text edit for a resource exists.
	 *
	 * @param uri A resource identifier.
	 * @return `true` if the given resource will be touched by this edit.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="uri:edits">
				<c path="vscode.Uri"/>
				<c path="Array"><c path="vscode.TextEdit"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set (and replace) text edits for a resource.
	 *
	 * @param uri A resource identifier.
	 * @param edits An array of text edits.</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<c path="Array"><c path="vscode.TextEdit"/></c>
			</f>
			<haxe_doc>* Get the text edits for a resource.
	 *
	 * @param uri A resource identifier.
	 * @return An array of text edits.</haxe_doc>
		</get>
		<createFile public="1" set="method">
			<f a="uri:?options:?metadata">
				<c path="vscode.Uri"/>
				<a>
					<overwrite>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</overwrite>
					<ignoreIfExists>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</ignoreIfExists>
				</a>
				<t path="vscode.WorkspaceEditEntryMetadata"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a regular file.
	 *
	 * @param uri Uri of the new file..
	 * @param options Defines if an existing file should be overwritten or be
	 * ignored. When overwrite and ignoreIfExists are both set overwrite wins.
	 * When both are unset and when the file already exists then the edit cannot
	 * be applied successfully.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</createFile>
		<deleteFile public="1" set="method">
			<f a="uri:?options:?metadata">
				<c path="vscode.Uri"/>
				<a>
					<recursive>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</recursive>
					<ignoreIfNotExists>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</ignoreIfNotExists>
				</a>
				<t path="vscode.WorkspaceEditEntryMetadata"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Delete a file or folder.
	 *
	 * @param uri The uri of the file that is to be deleted.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</deleteFile>
		<renameFile public="1" set="method">
			<f a="oldUri:newUri:?options:?metadata">
				<c path="vscode.Uri"/>
				<c path="vscode.Uri"/>
				<a>
					<overwrite>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</overwrite>
					<ignoreIfExists>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</ignoreIfExists>
				</a>
				<t path="vscode.WorkspaceEditEntryMetadata"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Rename a file or folder.
	 *
	 * @param oldUri The existing file.
	 * @param newUri The new location.
	 * @param options Defines if existing files should be overwritten or be
	 * ignored. When overwrite and ignoreIfExists are both set overwrite wins.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</renameFile>
		<entries public="1" set="method">
			<f a=""><c path="Array"><x path="vscode.WorkspaceEditEntriesTuple"/></c></f>
			<haxe_doc>* Get all text edits grouped by resource.
	 *
	 * @return A shallow copy of `[Uri, TextEdit[]]`-tuples.</haxe_doc>
		</entries>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* A workspace edit is a collection of textual and files changes for
 * multiple resources and documents.
 *
 * Use the [applyEdit](#workspace.applyEdit)-function to apply a workspace edit.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"WorkspaceEdit"</e>
</m></meta>
	</class>
	<abstract path="vscode.WorkspaceEditEntriesTuple" params="" file="src/vscode/WorkspaceEdit.hx" module="vscode.WorkspaceEdit">
		<this><c path="Array"><x path="Any"/></c></this>
		<to><icast><c path="Array"><x path="Any"/></c></icast></to>
		<meta><m n=":dce"/></meta>
		<impl><class path="vscode._WorkspaceEdit.WorkspaceEditEntriesTuple_Impl_" params="" file="src/vscode/WorkspaceEdit.hx" private="1" module="vscode.WorkspaceEdit">
	<uri public="1" get="accessor" set="null" static="1">
		<c path="vscode.Uri"/>
		<meta><m n=":impl"/></meta>
	</uri>
	<edits public="1" get="accessor" set="null" static="1">
		<c path="Array"><c path="vscode.TextEdit"/></c>
		<meta><m n=":impl"/></meta>
	</edits>
	<meta>
		<m n=":keep"/>
		<m n=":dce"/>
		<m n=":dce"/>
	</meta>
</class></impl>
	</abstract>
	<typedef path="vscode.WorkspaceEditEntryMetadata" params="" file="src/vscode/WorkspaceEditEntryMetadata.hx">
		<a>
			<needsConfirmation>
				<x path="Bool"/>
				<haxe_doc>* A flag which indicates that user confirmation is needed.</haxe_doc>
			</needsConfirmation>
			<label>
				<c path="String"/>
				<haxe_doc>* A human-readable string which is rendered prominent.</haxe_doc>
			</label>
			<iconPath>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.Uri"/>
	<x path="haxe.extern.EitherType">
		<a>
			<light><c path="vscode.Uri"/></light>
			<dark><c path="vscode.Uri"/></dark>
		</a>
		<c path="vscode.ThemeIcon"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The icon path or [ThemeIcon](#ThemeIcon) for the edit.</haxe_doc>
			</iconPath>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string which is rendered less prominent on the same line.</haxe_doc>
			</description>
		</a>
		<haxe_doc>* Additional data for entries of a workspace edit. Supports to label entries and marks entries
 * as needing confirmation by the user. The editor groups edits with equal labels into tree nodes,
 * for instance all edits labelled with "Changes in Strings" would be a tree node.</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceFolder" params="" file="src/vscode/WorkspaceFolder.hx">
		<a>
			<uri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The associated uri for this workspace folder.
	 *
	 * *Note:* The [Uri](#Uri)-type was intentionally chosen such that future releases of the editor can support
	 * workspace folders that are not stored on the local disk, e.g. `ftp://server/workspaces/foo`.</haxe_doc>
			</uri>
			<name set="null">
				<c path="String"/>
				<haxe_doc>* The name of this workspace folder. Defaults to
	 * the basename of its [uri-path](#Uri.path)</haxe_doc>
			</name>
			<index set="null">
				<x path="Int"/>
				<haxe_doc>* The ordinal number of this workspace folder.</haxe_doc>
			</index>
		</a>
		<haxe_doc>* A workspace folder is one of potentially many roots opened by the editor. All workspace folders
 * are equal which means there is no notion of an active or primary workspace folder.</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceFolderPickOptions" params="" file="src/vscode/WorkspaceFolderPickOptions.hx">
		<a>
			<placeHolder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show as placeholder in the input box to guide the user what to pick on.</haxe_doc>
			</placeHolder>
			<ignoreFocusOut>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.</haxe_doc>
			</ignoreFocusOut>
		</a>
		<haxe_doc>* Options to configure the behaviour of the [workspace folder](#WorkspaceFolder) pick UI.</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceFoldersChangeEvent" params="" file="src/vscode/WorkspaceFoldersChangeEvent.hx">
		<a>
			<removed set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.WorkspaceFolder"/></x>
				<haxe_doc>* Removed workspace folders.</haxe_doc>
			</removed>
			<added set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.WorkspaceFolder"/></x>
				<haxe_doc>* Added workspace folders.</haxe_doc>
			</added>
		</a>
		<haxe_doc>* An event describing a change to the set of [workspace folders](#workspace.workspaceFolders).</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceSymbolProvider" params="T" file="src/vscode/WorkspaceSymbolProvider.hx">
		<a>
			<resolveWorkspaceSymbol>
				<x path="Null"><f a="symbol:token">
	<c path="vscode.WorkspaceSymbolProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.WorkspaceSymbolProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Given a symbol fill in its [location](#SymbolInformation.location). This method is called whenever a symbol
	 * is selected in the UI. Providers can implement this method and return incomplete symbols from
	 * [`provideWorkspaceSymbols`](#WorkspaceSymbolProvider.provideWorkspaceSymbols) which often helps to improve
	 * performance.
	 *
	 * @param symbol The symbol that is to be resolved. Guaranteed to be an instance of an object returned from an
	 * earlier call to `provideWorkspaceSymbols`.
	 * @param token A cancellation token.
	 * @return The resolved symbol or a thenable that resolves to that. When no result is returned,
	 * the given `symbol` is used.</haxe_doc>
			</resolveWorkspaceSymbol>
			<provideWorkspaceSymbols set="method">
				<f a="query:token">
					<c path="String"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.WorkspaceSymbolProvider.T"/></c></t>
				</f>
				<haxe_doc>* Project-wide search for a symbol matching the given query string.
	 *
	 * The `query`-parameter should be interpreted in a *relaxed way* as the editor will apply its own highlighting
	 * and scoring on the results. A good rule of thumb is to match case-insensitive and to simply check that the
	 * characters of *query* appear in their order in a candidate symbol. Don't use prefix, substring, or similar
	 * strict matching.
	 *
	 * To improve performance implementors can implement `resolveWorkspaceSymbol` and then provide symbols with partial
	 * [location](#SymbolInformation.location)-objects, without a `range` defined. The editor will then call
	 * `resolveWorkspaceSymbol` for selected symbols only, e.g. when opening a workspace symbol.
	 *
	 * @param query A query string, can be the empty string in which case all symbols should be returned.
	 * @param token A cancellation token.
	 * @return An array of document highlights or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideWorkspaceSymbols>
		</a>
		<haxe_doc>* The workspace symbol provider interface defines the contract between extensions and
 * the [symbol search](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)-feature.</haxe_doc>
	</typedef>
</haxe>